webpackJsonp([0],{114:function(e,t,n){e.exports=n(189)},116:function(e,t,n){"use strict";var o=n(18),i=n(195),a=n(198),r=n(204),l=n(202),s=n(119),u="undefined"!=typeof window&&window.btoa&&window.btoa.bind(window)||n(197);e.exports=function(e){return new Promise(function(t,c){var d=e.data,f=e.headers;o.isFormData(d)&&delete f["Content-Type"];var p=new XMLHttpRequest,h="onreadystatechange",y=!1;if("undefined"==typeof window||!window.XDomainRequest||"withCredentials"in p||l(e.url)||(p=new window.XDomainRequest,h="onload",y=!0,p.onprogress=function(){},p.ontimeout=function(){}),e.auth){var m=e.auth.username||"",v=e.auth.password||"";f.Authorization="Basic "+u(m+":"+v)}if(p.open(e.method.toUpperCase(),a(e.url,e.params,e.paramsSerializer),!0),p.timeout=e.timeout,p[h]=function(){if(p&&(4===p.readyState||y)&&(0!==p.status||p.responseURL&&0===p.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in p?r(p.getAllResponseHeaders()):null,o=e.responseType&&"text"!==e.responseType?p.response:p.responseText,a={data:o,status:1223===p.status?204:p.status,statusText:1223===p.status?"No Content":p.statusText,headers:n,config:e,request:p};i(t,c,a),p=null}},p.onerror=function(){c(s("Network Error",e,null,p)),p=null},p.ontimeout=function(){c(s("timeout of "+e.timeout+"ms exceeded",e,"ECONNABORTED",p)),p=null},o.isStandardBrowserEnv()){var g=n(200),T=(e.withCredentials||l(e.url))&&e.xsrfCookieName?g.read(e.xsrfCookieName):void 0;T&&(f[e.xsrfHeaderName]=T)}if("setRequestHeader"in p&&o.forEach(f,function(e,t){void 0===d&&"content-type"===t.toLowerCase()?delete f[t]:p.setRequestHeader(t,e)}),e.withCredentials&&(p.withCredentials=!0),e.responseType)try{p.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&p.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&p.upload&&p.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then(function(e){p&&(p.abort(),c(e),p=null)}),void 0===d&&(d=null),p.send(d)})}},117:function(e,t,n){"use strict";function o(e){this.message=e}o.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},o.prototype.__CANCEL__=!0,e.exports=o},118:function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},119:function(e,t,n){"use strict";var o=n(194);e.exports=function(e,t,n,i,a){var r=new Error(e);return o(r,t,n,i,a)}},120:function(e,t,n){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),o=0;o<n.length;o++)n[o]=arguments[o];return e.apply(t,n)}}},146:function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var i=n(12),a=o(i),r=n(9),l=o(r),s=n(5),u=o(s),c=n(3),d=o(c),f=n(4),p=o(f),h=n(7),y=o(h),m=n(6),v=o(m),g=n(8),T=o(g),S=n(0),b=o(S),w=n(1),E=o(w),x=n(320),k=o(x),I=function(e){function t(){return(0,d.default)(this,t),(0,y.default)(this,(t.__proto__||(0,u.default)(t)).apply(this,arguments))}return(0,v.default)(t,e),(0,p.default)(t,[{key:"render",value:function(){var e=this.props,t=e.children,n=e.style,o=(0,l.default)(e,["children","style"]),i=this.context.muiTheme.prepareStyles,r=!1,s=S.Children.toArray(t)[0];(0,S.isValidElement)(s)&&s.type===k.default&&(r=!0);var u={root:{padding:(r?0:8)+"px 0px 8px 0px"}};return b.default.createElement("div",(0,a.default)({},o,{style:i((0,T.default)(u.root,n))}),t)}}]),t}(S.Component);I.contextTypes={muiTheme:E.default.object.isRequired},I.propTypes={},t.default=I},18:function(e,t,n){"use strict";function o(e){return"[object Array]"===x.call(e)}function i(e){return"[object ArrayBuffer]"===x.call(e)}function a(e){return"undefined"!=typeof FormData&&e instanceof FormData}function r(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer}function l(e){return"string"==typeof e}function s(e){return"number"==typeof e}function u(e){return void 0===e}function c(e){return null!==e&&"object"==typeof e}function d(e){return"[object Date]"===x.call(e)}function f(e){return"[object File]"===x.call(e)}function p(e){return"[object Blob]"===x.call(e)}function h(e){return"[object Function]"===x.call(e)}function y(e){return c(e)&&h(e.pipe)}function m(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams}function v(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}function g(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)}function T(e,t){if(null!==e&&void 0!==e)if("object"==typeof e||o(e)||(e=[e]),o(e))for(var n=0,i=e.length;n<i;n++)t.call(null,e[n],n,e);else for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&t.call(null,e[a],a,e)}function S(){function e(e,n){"object"==typeof t[n]&&"object"==typeof e?t[n]=S(t[n],e):t[n]=e}for(var t={},n=0,o=arguments.length;n<o;n++)T(arguments[n],e);return t}function b(e,t,n){return T(t,function(t,o){e[o]=n&&"function"==typeof t?w(t,n):t}),e}var w=n(120),E=n(292),x=Object.prototype.toString;e.exports={isArray:o,isArrayBuffer:i,isBuffer:E,isFormData:a,isArrayBufferView:r,isString:l,isNumber:s,isObject:c,isUndefined:u,isDate:d,isFile:f,isBlob:p,isFunction:h,isStream:y,isURLSearchParams:m,isStandardBrowserEnv:g,forEach:T,merge:S,extend:b,trim:v}},181:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),i=function(e){return e&&e.__esModule?e:{default:e}}(o),a=i.default.createClass({displayName:"Index",render:function(){return i.default.createElement("div",null,i.default.createElement("h1",null,"Bienvenido a Bindie!"))}});t.default=a},182:function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),a=o(i),r=n(16),l=(o(r),n(71)),s=o(l),u=n(343),c=o(u),d=n(344),f=o(d),p=a.default.createClass({displayName:"SongPlayer",loadingSong:!1,songLoadWait:1e3,getDefaultProps:function(){return{song:null,nextSong:function(){},prevSong:function(){}}},onSongEnd:function(e){console.log("SONG ENDED!"),this.props.nextSong()},getSongSrc:function(e){return"/api/song/"+e},componentDidUpdate:function(e,t){console.log("SongPlayer DID UPDATE!");var n=e.song||"",o=this.props.song||"";n.valueOf()!=o.valueOf()&&(console.log("prevSong: "+n+" | currSong: "+o),this.audio.src=this.getSongSrc(o),this.audio.load(),this.audio.play())},nextSong:function(){var e=this;this.loadingSong||(this.loadingSong=!0,setTimeout(function(t){e.loadingSong=!1,e.props.nextSong()},this.songLoadWait))},prevSong:function(){var e=this;if(console.log("this.audio.currentTime: "+this.audio.currentTime),this.audio.currentTime<3){if(this.loadingSong)return;return this.loadingSong=!0,setTimeout(function(t){e.loadingSong=!1,e.props.prevSong()},this.songLoadWait)}this.audio.currentTime=0},componentDidMount:function(){console.log("SongPlayer DID MOUNT!")},render:function(){var e=this;if(this.props.song){console.log("RENDERING SongPlayer!");var t=this.getSongSrc(this.props.song),n="undefined"!=typeof InstallTrigger,o={width:"50%",borderRadius:0};return n?(o.backgroundColor="#484848",o.color="#FFFFFF"):(o.backgroundColor="#fafafa",o.color="#5a5a5a"),a.default.createElement("div",{style:{width:"100%"}},a.default.createElement("audio",{ref:function(t){return e.audio=t},onEnded:this.onSongEnd,style:{width:"100%"},controls:!0},a.default.createElement("source",{src:t,type:"audio/mpeg"}),a.default.createElement("p",null,"Your browser does not support the audio element.")),a.default.createElement("div",{style:{width:"100%"}},a.default.createElement(s.default,{icon:a.default.createElement(f.default,null),style:o,onClick:this.prevSong}),a.default.createElement(s.default,{icon:a.default.createElement(c.default,null),style:o,onClick:this.nextSong})))}}});t.default=p},183:function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),a=o(i),r=n(16),l=(o(r),n(114)),s=o(l),u=n(71),c=o(u),d=n(342),f=o(d),p=n(115),h=o(p),y=a.default.createClass({displayName:"SongsApp",getInitialState:function(){return{band:null,uploadSuccMsg:null,uploadErrMsg:null}},uploadFile:function(e){var t=this,n=new FormData,o=this.fileInput.files[0];if(o)if(console.log("ARCHIVO A SUBIR:"),console.log(o),console.log('TIPO DEL ARCHIVO": '+o.type),"audio/mpeg"==o.type||"audio/mp3"==o.type){n.append("file",o),n.append("foo","bar"),console.log("UPLOADING FILE");var i=this.state.band,a={onUploadProgress:function(e){var t=Math.round(100*e.loaded/e.total);console.log("percentage: "+t)}};s.default.post("/api/song/upload/"+i,n,a).then(function(e){console.log(e),t.setState({uploadSuccMsg:"Cancion subida exitosamente",uploadErrMsg:""})}).catch(function(e){console.error(e),t.setState({uploadSuccMsg:"",uploadErrMsg:"Error al subir cancion"})})}else this.setState({uploadSuccMsg:"",uploadErrMsg:"El tipo de archivo no es mp3"});else console.log("NO SE INDICO UN ARCHIVO A SUBIR");e.preventDefault()},onBandChange:function(e){var t=e.target.value;this.setState({band:t})},render:function(){var e=this,t={uploadButton:{verticalAlign:"middle"},uploadInput:{cursor:"pointer",position:"absolute",top:0,bottom:0,right:0,left:0,width:"100%",opacity:0}},n=!this.state.band,o=this.state.uploadSuccMsg?a.default.createElement("p",{style:{color:"green"}},this.state.uploadSuccMsg):a.default.createElement("div",null),i=this.state.uploadErrMsg?a.default.createElement("p",{style:{color:"red"}},this.state.uploadErrMsg):a.default.createElement("div",null);return a.default.createElement("div",null,o,i,a.default.createElement(h.default,{hintText:"Banda",onChange:this.onBandChange}),a.default.createElement(c.default,{label:"Subir una cancion",labelPosition:"before",style:t.uploadButton,containerElement:"label",icon:a.default.createElement(f.default,null),disabled:n},a.default.createElement("input",{ref:function(t){e.fileInput=t},type:"file",name:"song",className:"upload-file",style:t.uploadInput,onChange:this.uploadFile,disabled:n})))}});t.default=y},184:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=n(295),i=function(e){return e&&e.__esModule?e:{default:e}}(o);t.default=i.default},186:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=n(304),i=function(e){return e&&e.__esModule?e:{default:e}}(o);t.default=i.default},187:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=n(312),i=function(e){return e&&e.__esModule?e:{default:e}}(o);t.default=i.default},189:function(e,t,n){"use strict";function o(e){var t=new r(e),n=a(r.prototype.request,t);return i.extend(n,r.prototype,t),i.extend(n,t),n}var i=n(18),a=n(120),r=n(191),l=n(74),s=o(l);s.Axios=r,s.create=function(e){return o(i.merge(l,e))},s.Cancel=n(117),s.CancelToken=n(190),s.isCancel=n(118),s.all=function(e){return Promise.all(e)},s.spread=n(205),e.exports=s,e.exports.default=s},190:function(e,t,n){"use strict";function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise(function(e){t=e});var n=this;e(function(e){n.reason||(n.reason=new i(e),t(n.reason))})}var i=n(117);o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var e;return{token:new o(function(t){e=t}),cancel:e}},e.exports=o},191:function(e,t,n){"use strict";function o(e){this.defaults=e,this.interceptors={request:new r,response:new r}}var i=n(74),a=n(18),r=n(192),l=n(193),s=n(201),u=n(199);o.prototype.request=function(e){"string"==typeof e&&(e=a.merge({url:arguments[0]},arguments[1])),e=a.merge(i,this.defaults,{method:"get"},e),e.method=e.method.toLowerCase(),e.baseURL&&!s(e.url)&&(e.url=u(e.baseURL,e.url));var t=[l,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach(function(e){t.unshift(e.fulfilled,e.rejected)}),this.interceptors.response.forEach(function(e){t.push(e.fulfilled,e.rejected)});t.length;)n=n.then(t.shift(),t.shift());return n},a.forEach(["delete","get","head","options"],function(e){o.prototype[e]=function(t,n){return this.request(a.merge(n||{},{method:e,url:t}))}}),a.forEach(["post","put","patch"],function(e){o.prototype[e]=function(t,n,o){return this.request(a.merge(o||{},{method:e,url:t,data:n}))}}),e.exports=o},192:function(e,t,n){"use strict";function o(){this.handlers=[]}var i=n(18);o.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){i.forEach(this.handlers,function(t){null!==t&&e(t)})},e.exports=o},193:function(e,t,n){"use strict";function o(e){e.cancelToken&&e.cancelToken.throwIfRequested()}var i=n(18),a=n(196),r=n(118),l=n(74);e.exports=function(e){return o(e),e.headers=e.headers||{},e.data=a(e.data,e.headers,e.transformRequest),e.headers=i.merge(e.headers.common||{},e.headers[e.method]||{},e.headers||{}),i.forEach(["delete","get","head","post","put","patch","common"],function(t){delete e.headers[t]}),(e.adapter||l.adapter)(e).then(function(t){return o(e),t.data=a(t.data,t.headers,e.transformResponse),t},function(t){return r(t)||(o(e),t&&t.response&&(t.response.data=a(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)})}},194:function(e,t,n){"use strict";e.exports=function(e,t,n,o,i){return e.config=t,n&&(e.code=n),e.request=o,e.response=i,e}},195:function(e,t,n){"use strict";var o=n(119);e.exports=function(e,t,n){var i=n.config.validateStatus;n.status&&i&&!i(n.status)?t(o("Request failed with status code "+n.status,n.config,null,n.request,n)):e(n)}},196:function(e,t,n){"use strict";var o=n(18);e.exports=function(e,t,n){return o.forEach(n,function(n){e=n(e,t)}),e}},197:function(e,t,n){"use strict";function o(){this.message="String contains an invalid character"}function i(e){for(var t,n,i=String(e),r="",l=0,s=a;i.charAt(0|l)||(s="=",l%1);r+=s.charAt(63&t>>8-l%1*8)){if((n=i.charCodeAt(l+=.75))>255)throw new o;t=t<<8|n}return r}var a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";o.prototype=new Error,o.prototype.code=5,o.prototype.name="InvalidCharacterError",e.exports=i},198:function(e,t,n){"use strict";function o(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}var i=n(18);e.exports=function(e,t,n){if(!t)return e;var a;if(n)a=n(t);else if(i.isURLSearchParams(t))a=t.toString();else{var r=[];i.forEach(t,function(e,t){null!==e&&void 0!==e&&(i.isArray(e)&&(t+="[]"),i.isArray(e)||(e=[e]),i.forEach(e,function(e){i.isDate(e)?e=e.toISOString():i.isObject(e)&&(e=JSON.stringify(e)),r.push(o(t)+"="+o(e))}))}),a=r.join("&")}return a&&(e+=(-1===e.indexOf("?")?"?":"&")+a),e}},199:function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},200:function(e,t,n){"use strict";var o=n(18);e.exports=o.isStandardBrowserEnv()?function(){return{write:function(e,t,n,i,a,r){var l=[];l.push(e+"="+encodeURIComponent(t)),o.isNumber(n)&&l.push("expires="+new Date(n).toGMTString()),o.isString(i)&&l.push("path="+i),o.isString(a)&&l.push("domain="+a),!0===r&&l.push("secure"),document.cookie=l.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}}():function(){return{write:function(){},read:function(){return null},remove:function(){}}}()},201:function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},202:function(e,t,n){"use strict";var o=n(18);e.exports=o.isStandardBrowserEnv()?function(){function e(e){var t=e;return n&&(i.setAttribute("href",t),t=i.href),i.setAttribute("href",t),{href:i.href,protocol:i.protocol?i.protocol.replace(/:$/,""):"",host:i.host,search:i.search?i.search.replace(/^\?/,""):"",hash:i.hash?i.hash.replace(/^#/,""):"",hostname:i.hostname,port:i.port,pathname:"/"===i.pathname.charAt(0)?i.pathname:"/"+i.pathname}}var t,n=/(msie|trident)/i.test(navigator.userAgent),i=document.createElement("a");return t=e(window.location.href),function(n){var i=o.isString(n)?e(n):n;return i.protocol===t.protocol&&i.host===t.host}}():function(){return function(){return!0}}()},203:function(e,t,n){"use strict";var o=n(18);e.exports=function(e,t){o.forEach(e,function(n,o){o!==t&&o.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[o])})}},204:function(e,t,n){"use strict";var o=n(18);e.exports=function(e){var t,n,i,a={};return e?(o.forEach(e.split("\n"),function(e){i=e.indexOf(":"),t=o.trim(e.substr(0,i)).toLowerCase(),n=o.trim(e.substr(i+1)),t&&(a[t]=a[t]?a[t]+", "+n:n)}),a):a}},205:function(e,t,n){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},207:function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}var i=n(0),a=o(i),r=n(16),l=o(r),s=n(72),u=o(s),c=n(184),d=o(c),f=n(186),p=o(f),h=n(187),y=o(h),m=n(114),v=o(m),g=n(181),T=o(g),S=n(183),b=o(S),w=n(182),E=o(w);n(73)();var x={index:a.default.createElement(T.default,null),songs:a.default.createElement(b.default,null)},k=a.default.createClass({displayName:"MainApp",getInitialState:function(){return{currPage:"index",drawerOpen:!1,songIndex:0,playlist:[]}},appBarLeftTap:function(){var e=this.state.drawerOpen;this.setState({drawerOpen:!e})},onDrawerRequestChange:function(e){this.setState({drawerOpen:e})},gotoPage:function(e){console.log("GOING TO PAGE: "+e),this.setState({currPage:e,drawerOpen:!1})},componentDidMount:function(){var e=this;console.log("MainApp DID MOUNT!"),v.default.post("/api/allSongs").then(function(t){var n=t.data;n.err?console.error("Error al obtener las canciones"):(console.log("CARGANDO PLAYLIST: ["+n.songs+"]"),e.setState({playlist:n.songs}))}).catch(function(e){console.error(e)})},nextSong:function(){if(this.state.playlist.length){var e=(this.state.songIndex+1)%this.state.playlist.length;this.setState({songIndex:e})}else this.setState({songIndex:0})},prevSong:function(){if(this.state.playlist.length){var e=this.state.songIndex-1;e=e<0?this.state.playlist.length-1:e,this.setState({songIndex:e})}else this.setState({songIndex:0})},render:function(){var e=this;console.log("RENDERING MainApp!");var t=x[this.state.currPage],n=this.state.playlist[this.state.songIndex],o=n?a.default.createElement(E.default,{nextSong:this.nextSong,prevSong:this.prevSong,song:n}):a.default.createElement("div",null);return a.default.createElement(u.default,null,a.default.createElement("div",null,a.default.createElement(d.default,{onLeftIconButtonTouchTap:this.appBarLeftTap,title:"Bindie"}),a.default.createElement(p.default,{open:this.state.drawerOpen,docked:!1,onRequestChange:this.onDrawerRequestChange},a.default.createElement(y.default,{onTouchTap:function(t){return e.gotoPage("index")}},"Principal"),a.default.createElement(y.default,{onTouchTap:function(t){return e.gotoPage("songs")}},"Canciones")),o,t))}});l.default.render(a.default.createElement(k,null),document.getElementById("root"))},292:function(e,t){function n(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}function o(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&n(e.slice(0,0))}/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
e.exports=function(e){return null!=e&&(n(e)||o(e)||!!e._isBuffer)}},294:function(e,t,n){(function(t){function n(e,t,n){function o(t){var n=y,o=m;return y=m=void 0,x=t,g=e.apply(o,n)}function a(e){return x=e,T=setTimeout(c,t),k?o(e):g}function r(e){var n=e-S,o=e-x,i=t-n;return I?w(i,v-o):i}function u(e){var n=e-S,o=e-x;return void 0===S||n>=t||n<0||I&&o>=v}function c(){var e=E();if(u(e))return d(e);T=setTimeout(c,r(e))}function d(e){return T=void 0,C&&y?o(e):(y=m=void 0,g)}function f(){void 0!==T&&clearTimeout(T),x=0,y=S=m=T=void 0}function p(){return void 0===T?g:d(E())}function h(){var e=E(),n=u(e);if(y=arguments,m=this,S=e,n){if(void 0===T)return a(S);if(I)return T=setTimeout(c,t),o(S)}return void 0===T&&(T=setTimeout(c,t)),g}var y,m,v,g,T,S,x=0,k=!1,I=!1,C=!0;if("function"!=typeof e)throw new TypeError(s);return t=l(t)||0,i(n)&&(k=!!n.leading,I="maxWait"in n,v=I?b(l(n.maxWait)||0,t):v,C="trailing"in n?!!n.trailing:C),h.cancel=f,h.flush=p,h}function o(e,t,o){var a=!0,r=!0;if("function"!=typeof e)throw new TypeError(s);return i(o)&&(a="leading"in o?!!o.leading:a,r="trailing"in o?!!o.trailing:r),n(e,t,{leading:a,maxWait:t,trailing:r})}function i(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function a(e){return!!e&&"object"==typeof e}function r(e){return"symbol"==typeof e||a(e)&&S.call(e)==c}function l(e){if("number"==typeof e)return e;if(r(e))return u;if(i(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=i(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(d,"");var n=p.test(e);return n||h.test(e)?y(e.slice(2),n?2:8):f.test(e)?u:+e}var s="Expected a function",u=NaN,c="[object Symbol]",d=/^\s+|\s+$/g,f=/^[-+]0x[0-9a-f]+$/i,p=/^0b[01]+$/i,h=/^0o[0-7]+$/i,y=parseInt,m="object"==typeof t&&t&&t.Object===Object&&t,v="object"==typeof self&&self&&self.Object===Object&&self,g=m||v||Function("return this")(),T=Object.prototype,S=T.toString,b=Math.max,w=Math.min,E=function(){return g.Date.now()};e.exports=o}).call(t,n(179))},295:function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}function i(e,t){var n=t.muiTheme,o=n.appBar,i=n.button.iconButtonSize;return{root:{position:"relative",zIndex:n.zIndex.appBar,width:"100%",display:"flex",backgroundColor:o.color,paddingLeft:o.padding,paddingRight:o.padding},title:{whiteSpace:"nowrap",overflow:"hidden",textOverflow:"ellipsis",margin:0,paddingTop:0,letterSpacing:0,fontSize:24,fontWeight:o.titleFontWeight,color:o.textColor,height:o.height,lineHeight:o.height+"px"},mainElement:{boxFlex:1,flex:"1"},iconButtonStyle:{marginTop:(o.height-i)/2,marginRight:8,marginLeft:-16},iconButtonIconStyle:{fill:o.textColor,color:o.textColor},flatButton:{color:o.textColor,marginTop:(i-36)/2+1}}}Object.defineProperty(t,"__esModule",{value:!0});var a=n(12),r=o(a),l=n(75),s=o(l),u=n(9),c=o(u),d=n(5),f=o(d),p=n(3),h=o(p),y=n(4),m=o(y),v=n(7),g=o(v),T=n(6),S=o(T);t.getStyles=i;var b=n(8),w=o(b),E=n(0),x=o(E),k=n(1),I=o(k),C=n(94),M=o(C),_=n(350),L=o(_),O=n(43),B=o(O),A=n(31),R=(o(A),n(37)),D=(o(R),function(e){function t(){var e,n,o,i;(0,h.default)(this,t);for(var a=arguments.length,r=Array(a),l=0;l<a;l++)r[l]=arguments[l];return n=o=(0,g.default)(this,(e=t.__proto__||(0,f.default)(t)).call.apply(e,[this].concat(r))),o.handleTouchTapLeftIconButton=function(e){o.props.onLeftIconButtonTouchTap&&o.props.onLeftIconButtonTouchTap(e)},o.handleTouchTapRightIconButton=function(e){o.props.onRightIconButtonTouchTap&&o.props.onRightIconButtonTouchTap(e)},o.handleTitleTouchTap=function(e){o.props.onTitleTouchTap&&o.props.onTitleTouchTap(e)},i=n,(0,g.default)(o,i)}return(0,S.default)(t,e),(0,m.default)(t,[{key:"componentDidMount",value:function(){}},{key:"render",value:function(){var e=this.props,t=e.title,n=e.titleStyle,o=e.iconStyleLeft,a=e.iconStyleRight,l=(e.onTitleTouchTap,e.showMenuIconButton),u=e.iconElementLeft,d=e.iconElementRight,f=e.iconClassNameLeft,p=e.iconClassNameRight,h=(e.onLeftIconButtonTouchTap,e.onRightIconButtonTouchTap,e.className),y=e.style,m=e.zDepth,v=e.children,g=(0,c.default)(e,["title","titleStyle","iconStyleLeft","iconStyleRight","onTitleTouchTap","showMenuIconButton","iconElementLeft","iconElementRight","iconClassNameLeft","iconClassNameRight","onLeftIconButtonTouchTap","onRightIconButtonTouchTap","className","style","zDepth","children"]),T=this.context.muiTheme.prepareStyles,S=i(this.props,this.context),b=void 0,k=void 0,I="string"==typeof t||t instanceof String?"h1":"div",C=x.default.createElement(I,{onTouchTap:this.handleTitleTouchTap,style:T((0,w.default)(S.title,S.mainElement,n))},t),_=(0,w.default)({},S.iconButtonStyle,o);if(l)if(u){var O={};if("IconButton"===u.type.muiName){var A=u.props.children,R=A&&A.props&&A.props.color?null:S.iconButtonIconStyle;O.iconStyle=(0,w.default)({},R,u.props.iconStyle)}!u.props.onTouchTap&&this.props.onLeftIconButtonTouchTap&&(O.onTouchTap=this.handleTouchTapLeftIconButton),b=x.default.createElement("div",{style:T(_)},(0,s.default)(O).length>0?(0,E.cloneElement)(u,O):u)}else b=x.default.createElement(M.default,{style:_,iconStyle:S.iconButtonIconStyle,iconClassName:f,onTouchTap:this.handleTouchTapLeftIconButton},f?"":x.default.createElement(L.default,{style:(0,w.default)({},S.iconButtonIconStyle)}));var D=(0,w.default)({},S.iconButtonStyle,{marginRight:-16,marginLeft:"auto"},a);if(d){var N={};switch(d.type.muiName){case"IconMenu":case"IconButton":var P=d.props.children,F=P&&P.props&&P.props.color?null:S.iconButtonIconStyle;N.iconStyle=(0,w.default)({},F,d.props.iconStyle);break;case"FlatButton":N.style=(0,w.default)({},S.flatButton,d.props.style)}!d.props.onTouchTap&&this.props.onRightIconButtonTouchTap&&(N.onTouchTap=this.handleTouchTapRightIconButton),k=x.default.createElement("div",{style:T(D)},(0,s.default)(N).length>0?(0,E.cloneElement)(d,N):d)}else p&&(k=x.default.createElement(M.default,{style:D,iconStyle:S.iconButtonIconStyle,iconClassName:p,onTouchTap:this.handleTouchTapRightIconButton}));return x.default.createElement(B.default,(0,r.default)({},g,{rounded:!1,className:h,style:(0,w.default)({},S.root,y),zDepth:m}),b,C,k,v)}}]),t}(E.Component));D.muiName="AppBar",D.defaultProps={showMenuIconButton:!0,title:"",zDepth:1},D.contextTypes={muiTheme:I.default.object.isRequired},D.propTypes={},t.default=D},304:function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var i=n(5),a=o(i),r=n(3),l=o(r),s=n(4),u=o(s),c=n(7),d=o(c),f=n(6),p=o(f),h=n(8),y=o(h),m=n(0),v=o(m),g=n(1),T=o(g),S=n(16),b=o(S),w=n(113),E=o(w),x=n(93),k=o(x),I=n(64),C=o(I),M=n(15),_=o(M),L=n(331),O=o(L),B=n(43),A=o(B),R=n(31),D=(o(R),null),N=function(e){function t(){var e,n,o,i;(0,l.default)(this,t);for(var r=arguments.length,s=Array(r),u=0;u<r;u++)s[u]=arguments[u];return n=o=(0,d.default)(this,(e=t.__proto__||(0,a.default)(t)).call.apply(e,[this].concat(s))),o.handleTouchTapOverlay=function(e){e.preventDefault(),o.close("clickaway")},o.handleKeyUp=function(e){o.state.open&&!o.props.docked&&"esc"===(0,k.default)(e)&&o.close("escape")},o.onBodyTouchStart=function(e){var t=o.props.swipeAreaWidth,n=o.context.muiTheme.isRtl?document.body.offsetWidth-e.touches[0].pageX:e.touches[0].pageX,i=e.touches[0].pageY;if(null!==t&&!o.state.open)if(o.props.openSecondary){if(n<document.body.offsetWidth-t)return}else if(n>t)return;(o.state.open||D===o.onBodyTouchStart&&!o.props.disableSwipeToOpen)&&(o.maybeSwiping=!0,o.touchStartX=n,o.touchStartY=i,document.body.addEventListener("touchmove",o.onBodyTouchMove),document.body.addEventListener("touchend",o.onBodyTouchEnd),document.body.addEventListener("touchcancel",o.onBodyTouchEnd))},o.onBodyTouchMove=function(e){var t=o.context.muiTheme.isRtl?document.body.offsetWidth-e.touches[0].pageX:e.touches[0].pageX,n=e.touches[0].pageY;if(o.state.swiping)e.preventDefault(),o.setPosition(o.getTranslateX(t));else if(o.maybeSwiping){var i=Math.abs(t-o.touchStartX),a=Math.abs(n-o.touchStartY);i>10&&a<=10?(o.swipeStartX=t,o.setState({swiping:o.state.open?"closing":"opening"}),o.setPosition(o.getTranslateX(t))):i<=10&&a>10&&o.onBodyTouchEnd()}},o.onBodyTouchEnd=function(e){if(o.state.swiping){var t=o.context.muiTheme.isRtl?document.body.offsetWidth-e.changedTouches[0].pageX:e.changedTouches[0].pageX,n=o.getTranslateX(t)/o.getMaxTranslateX();o.maybeSwiping=!1;var i=o.state.swiping;o.setState({swiping:null}),n>.5?"opening"===i?o.setPosition(o.getMaxTranslateX()):o.close("swipe"):"opening"===i?o.open("swipe"):o.setPosition(0)}else o.maybeSwiping=!1;o.removeBodyTouchListeners()},i=n,(0,d.default)(o,i)}return(0,p.default)(t,e),(0,u.default)(t,[{key:"componentWillMount",value:function(){this.maybeSwiping=!1,this.touchStartX=null,this.touchStartY=null,this.swipeStartX=null,this.setState({open:null!==this.props.open?this.props.open:this.props.docked,swiping:null})}},{key:"componentDidMount",value:function(){this.enableSwipeHandling()}},{key:"componentWillReceiveProps",value:function(e){null!==e.open?this.setState({open:e.open}):this.props.docked!==e.docked&&this.setState({open:e.docked})}},{key:"componentDidUpdate",value:function(){this.enableSwipeHandling()}},{key:"componentWillUnmount",value:function(){this.disableSwipeHandling(),this.removeBodyTouchListeners()}},{key:"getStyles",value:function(){var e=this.context.muiTheme,t=e.drawer,n=this.getTranslateMultiplier()*(this.state.open?0:this.getMaxTranslateX());return{root:{height:"100%",width:this.getTranslatedWidth()||t.width,position:"fixed",zIndex:e.zIndex.drawer,left:0,top:0,transform:"translate("+n+"px, 0)",transition:!this.state.swiping&&_.default.easeOut(null,"transform",null),backgroundColor:t.color,overflow:"auto",WebkitOverflowScrolling:"touch"},overlay:{zIndex:e.zIndex.drawerOverlay,pointerEvents:this.state.open?"auto":"none"},rootWhenOpenRight:{left:"auto",right:0}}}},{key:"shouldShow",value:function(){return this.state.open||!!this.state.swiping}},{key:"close",value:function(e){return null===this.props.open&&this.setState({open:!1}),this.props.onRequestChange&&this.props.onRequestChange(!1,e),this}},{key:"open",value:function(e){return null===this.props.open&&this.setState({open:!0}),this.props.onRequestChange&&this.props.onRequestChange(!0,e),this}},{key:"getTranslatedWidth",value:function(){if("string"==typeof this.props.width){if(!/^\d+(\.\d+)?%$/.test(this.props.width))throw new Error("Not a valid percentage format.");var e=parseFloat(this.props.width)/100;return"undefined"!=typeof window?e*window.innerWidth:1e4}return this.props.width}},{key:"getMaxTranslateX",value:function(){return(this.getTranslatedWidth()||this.context.muiTheme.drawer.width)+10}},{key:"getTranslateMultiplier",value:function(){return this.props.openSecondary?1:-1}},{key:"enableSwipeHandling",value:function(){this.props.docked?this.disableSwipeHandling():(document.body.addEventListener("touchstart",this.onBodyTouchStart),D||(D=this.onBodyTouchStart))}},{key:"disableSwipeHandling",value:function(){document.body.removeEventListener("touchstart",this.onBodyTouchStart),D===this.onBodyTouchStart&&(D=null)}},{key:"removeBodyTouchListeners",value:function(){document.body.removeEventListener("touchmove",this.onBodyTouchMove),document.body.removeEventListener("touchend",this.onBodyTouchEnd),document.body.removeEventListener("touchcancel",this.onBodyTouchEnd)}},{key:"setPosition",value:function(e){var t=this.context.muiTheme.isRtl?-1:1,n=b.default.findDOMNode(this.refs.clickAwayableElement),o="translate("+this.getTranslateMultiplier()*t*e+"px, 0)";this.refs.overlay.setOpacity(1-e/this.getMaxTranslateX()),C.default.set(n.style,"transform",o)}},{key:"getTranslateX",value:function(e){return Math.min(Math.max("closing"===this.state.swiping?this.getTranslateMultiplier()*(e-this.swipeStartX):this.getMaxTranslateX()-this.getTranslateMultiplier()*(this.swipeStartX-e),0),this.getMaxTranslateX())}},{key:"render",value:function(){var e=this.props,t=e.children,n=e.className,o=e.containerClassName,i=e.containerStyle,a=e.docked,r=e.openSecondary,l=e.overlayClassName,s=e.overlayStyle,u=e.style,c=e.zDepth,d=this.getStyles(),f=void 0;return a||(f=v.default.createElement(O.default,{ref:"overlay",show:this.shouldShow(),className:l,style:(0,y.default)(d.overlay,s),transitionEnabled:!this.state.swiping,onTouchTap:this.handleTouchTapOverlay})),v.default.createElement("div",{className:n,style:u},v.default.createElement(E.default,{target:"window",onKeyUp:this.handleKeyUp}),f,v.default.createElement(A.default,{ref:"clickAwayableElement",zDepth:c,rounded:!1,transitionEnabled:!this.state.swiping,className:o,style:(0,y.default)(d.root,r&&d.rootWhenOpenRight,i)},t))}}]),t}(m.Component);N.defaultProps={disableSwipeToOpen:!1,docked:!0,open:null,openSecondary:!1,swipeAreaWidth:30,width:null,zDepth:2},N.contextTypes={muiTheme:T.default.object.isRequired},N.propTypes={},t.default=N},310:function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}function i(e,t,n){var o=e.autoGenerateNestedIndicator,i=e.insetChildren,a=e.leftAvatar,r=e.leftCheckbox,l=e.leftIcon,s=e.nestedItems,u=e.nestedLevel,c=e.rightAvatar,d=e.rightIcon,f=e.rightIconButton,p=e.rightToggle,h=e.secondaryText,y=e.secondaryTextLines,m=t.muiTheme,v=m.listItem,g=m.baseTheme.palette.textColor,T=e.hoverColor||(0,_.fade)(g,.1),S=!h&&(a||c),b=!h&&!(a||c),w=h&&1===y,E=h&&y>1;return{root:{backgroundColor:!(void 0!==e.isKeyboardFocused?e:n).isKeyboardFocused&&!n.hovered||n.rightIconButtonHovered||n.rightIconButtonKeyboardFocused?null:T,color:g,display:"block",fontSize:16,lineHeight:"16px",position:"relative",transition:O.default.easeOut()},innerDiv:{marginLeft:u*v.nestedLevelDepth,paddingLeft:l||a||r||i?72:16,paddingRight:d||c||f||s.length&&o?56:p?72:16,paddingBottom:S?20:16,paddingTop:b||E?16:20,position:"relative"},icons:{height:24,width:24,display:"block",position:"absolute",top:w?12:S?4:0,margin:12},leftIcon:{left:4},rightIcon:{right:4},avatars:{position:"absolute",top:S?8:16},label:{cursor:"pointer"},leftAvatar:{left:16},rightAvatar:{right:16},leftCheckbox:{position:"absolute",display:"block",width:24,top:w?24:S?16:12,left:16},primaryText:{},rightIconButton:{position:"absolute",display:"block",top:w?12:S?4:0,right:4},rightToggle:{position:"absolute",display:"block",width:54,top:w?25:S?17:13,right:8},secondaryText:{fontSize:14,lineHeight:E?"18px":"16px",height:E?36:16,margin:0,marginTop:4,color:v.secondaryTextColor,overflow:"hidden",textOverflow:"ellipsis",whiteSpace:E?null:"nowrap",display:E?"-webkit-box":null,WebkitLineClamp:E?2:null,WebkitBoxOrient:E?"vertical":null}}}Object.defineProperty(t,"__esModule",{value:!0});var a=n(9),r=o(a),l=n(12),s=o(l),u=n(5),c=o(u),d=n(3),f=o(d),p=n(4),h=o(p),y=n(7),m=o(y),v=n(6),g=o(v),T=n(8),S=o(T),b=n(0),w=o(b),E=n(1),x=o(E),k=n(16),I=o(k),C=n(36),M=o(C),_=n(57),L=n(15),O=o(L),B=n(63),A=o(B),R=n(94),D=o(R),N=n(348),P=o(N),F=n(349),j=o(F),z=n(311),W=o(z),K=function(e){function t(){var e,n,o,i;(0,f.default)(this,t);for(var a=arguments.length,r=Array(a),l=0;l<a;l++)r[l]=arguments[l];return n=o=(0,m.default)(this,(e=t.__proto__||(0,c.default)(t)).call.apply(e,[this].concat(r))),o.state={hovered:!1,isKeyboardFocused:!1,open:!1,rightIconButtonHovered:!1,rightIconButtonKeyboardFocused:!1,touch:!1},o.handleKeyboardFocus=function(e,t){o.setState({isKeyboardFocused:t}),o.props.onKeyboardFocus(e,t)},o.handleMouseEnter=function(e){o.state.touch||o.setState({hovered:!0}),o.props.onMouseEnter(e)},o.handleMouseLeave=function(e){o.setState({hovered:!1}),o.props.onMouseLeave(e)},o.handleTouchTap=function(e){o.props.onTouchTap&&o.props.onTouchTap(e),o.props.primaryTogglesNestedList&&o.handleNestedListToggle(e)},o.handleNestedListToggle=function(e){o.props.leftCheckbox&&e.preventDefault(),e.stopPropagation(),null===o.props.open?o.setState({open:!o.state.open},function(){o.props.onNestedListToggle(o)}):o.props.onNestedListToggle((0,s.default)({},o,{state:{open:!o.state.open}}))},o.handleRightIconButtonKeyboardFocus=function(e,t){t&&o.setState({isKeyboardFocused:!1,rightIconButtonKeyboardFocused:t});var n=o.props.rightIconButton;n&&n.props.onKeyboardFocus&&n.props.onKeyboardFocus(e,t)},o.handleRightIconButtonMouseLeave=function(e){var t=o.props.rightIconButton;o.setState({rightIconButtonHovered:!1}),t&&t.props.onMouseLeave&&t.props.onMouseLeave(e)},o.handleRightIconButtonMouseEnter=function(e){var t=o.props.rightIconButton;o.setState({rightIconButtonHovered:!0}),t&&t.props.onMouseEnter&&t.props.onMouseEnter(e)},o.handleRightIconButtonMouseUp=function(e){var t=o.props.rightIconButton;e.stopPropagation(),t&&t.props.onMouseUp&&t.props.onMouseUp(e)},o.handleRightIconButtonTouchTap=function(e){var t=o.props.rightIconButton;e.stopPropagation(),t&&t.props.onTouchTap&&t.props.onTouchTap(e)},o.handleTouchStart=function(e){o.setState({touch:!0}),o.props.onTouchStart(e)},o.handleTouchEnd=function(e){o.setState({touch:!0}),o.props.onTouchEnd(e)},i=n,(0,m.default)(o,i)}return(0,g.default)(t,e),(0,h.default)(t,[{key:"componentWillMount",value:function(){this.setState({open:null===this.props.open?!0===this.props.initiallyOpen:this.props.open})}},{key:"componentWillReceiveProps",value:function(e){null!==e.open&&this.setState({open:e.open}),e.disabled&&this.state.hovered&&this.setState({hovered:!1})}},{key:"shouldComponentUpdate",value:function(e,t,n){return!(0,M.default)(this.props,e)||!(0,M.default)(this.state,t)||!(0,M.default)(this.context,n)}},{key:"applyFocusState",value:function(e){if(this.button){var t=I.default.findDOMNode(this.button);switch(e){case"none":t.blur();break;case"focused":t.focus();break;case"keyboard-focused":this.button.setKeyboardFocus(),t.focus()}}}},{key:"createDisabledElement",value:function(e,t,n){var o=this.props,i=o.innerDivStyle,a=o.style,r=(0,S.default)({},e.root,e.innerDiv,i,a);return w.default.createElement("div",(0,s.default)({},n,{style:this.context.muiTheme.prepareStyles(r)}),t)}},{key:"createLabelElement",value:function(e,t,n){var o=this.props,i=o.innerDivStyle,a=o.style,r=(0,S.default)({},e.root,e.innerDiv,i,e.label,a);return w.default.createElement("label",(0,s.default)({},n,{style:this.context.muiTheme.prepareStyles(r)}),t)}},{key:"createTextElement",value:function(e,t,n){var o=this.context.muiTheme.prepareStyles;if(w.default.isValidElement(t)){var i=(0,S.default)({},e,t.props.style);return"string"==typeof t.type&&(i=o(i)),w.default.cloneElement(t,{key:n,style:i})}return w.default.createElement("div",{key:n,style:o(e)},t)}},{key:"pushElement",value:function(e,t,n,o){if(t){var i=(0,S.default)({},n,t.props.style);e.push(w.default.cloneElement(t,(0,s.default)({key:e.length,style:i},o)))}}},{key:"render",value:function(){var e=this,t=this.props,n=t.autoGenerateNestedIndicator,o=t.children,a=t.containerElement,l=t.disabled,u=t.disableKeyboardFocus,c=(t.hoverColor,t.initiallyOpen,t.innerDivStyle),d=(t.insetChildren,t.leftAvatar),f=t.leftCheckbox,p=t.leftIcon,h=t.nestedItems,y=t.nestedLevel,m=t.nestedListStyle,v=(t.onKeyboardFocus,t.isKeyboardFocused,t.onMouseEnter,t.onMouseLeave,t.onNestedListToggle,t.onTouchStart,t.onTouchTap,t.rightAvatar),g=t.rightIcon,T=t.rightIconButton,b=t.rightToggle,E=t.primaryText,x=t.primaryTogglesNestedList,k=t.secondaryText,I=(t.secondaryTextLines,t.style),C=(0,r.default)(t,["autoGenerateNestedIndicator","children","containerElement","disabled","disableKeyboardFocus","hoverColor","initiallyOpen","innerDivStyle","insetChildren","leftAvatar","leftCheckbox","leftIcon","nestedItems","nestedLevel","nestedListStyle","onKeyboardFocus","isKeyboardFocused","onMouseEnter","onMouseLeave","onNestedListToggle","onTouchStart","onTouchTap","rightAvatar","rightIcon","rightIconButton","rightToggle","primaryText","primaryTogglesNestedList","secondaryText","secondaryTextLines","style"]),M=this.context.muiTheme.prepareStyles,_=i(this.props,this.context,this.state),L=[o];if(p){var O={color:p.props.color||this.context.muiTheme.listItem.leftIconColor};this.pushElement(L,p,(0,S.default)({},_.icons,_.leftIcon),O)}if(g){var B={color:g.props.color||this.context.muiTheme.listItem.rightIconColor};this.pushElement(L,g,(0,S.default)({},_.icons,_.rightIcon),B)}d&&this.pushElement(L,d,(0,S.default)({},_.avatars,_.leftAvatar)),v&&this.pushElement(L,v,(0,S.default)({},_.avatars,_.rightAvatar)),f&&this.pushElement(L,f,(0,S.default)({},_.leftCheckbox));var R=h.length,N=v||g||T||b,F=R&&n&&!N;if(T||F){var z=T,K={onKeyboardFocus:this.handleRightIconButtonKeyboardFocus,onMouseEnter:this.handleRightIconButtonMouseEnter,onMouseLeave:this.handleRightIconButtonMouseLeave,onTouchTap:this.handleRightIconButtonTouchTap,onMouseDown:this.handleRightIconButtonMouseUp,onMouseUp:this.handleRightIconButtonMouseUp};F&&(z=this.state.open?w.default.createElement(D.default,null,w.default.createElement(P.default,null)):w.default.createElement(D.default,null,w.default.createElement(j.default,null)),K.onTouchTap=this.handleNestedListToggle),this.pushElement(L,z,(0,S.default)({},_.rightIconButton),K)}if(b&&this.pushElement(L,b,(0,S.default)({},_.rightToggle)),E){var H=this.createTextElement(_.primaryText,E,"primaryText");L.push(H)}if(k){var q=this.createTextElement(_.secondaryText,k,"secondaryText");L.push(q)}var U=h.length?w.default.createElement(W.default,{nestedLevel:y,open:this.state.open,style:m},h):void 0,X=!x&&(f||b);return w.default.createElement("div",null,X?this.createLabelElement(_,L,C):l?this.createDisabledElement(_,L,C):w.default.createElement(A.default,(0,s.default)({containerElement:a},C,{disableKeyboardFocus:u||this.state.rightIconButtonKeyboardFocused,onKeyboardFocus:this.handleKeyboardFocus,onMouseLeave:this.handleMouseLeave,onMouseEnter:this.handleMouseEnter,onTouchStart:this.handleTouchStart,onTouchEnd:this.handleTouchEnd,onTouchTap:this.handleTouchTap,disabled:l,ref:function(t){return e.button=t},style:(0,S.default)({},_.root,I)}),w.default.createElement("div",{style:M((0,S.default)(_.innerDiv,c))},L)),U)}}]),t}(b.Component);K.muiName="ListItem",K.defaultProps={autoGenerateNestedIndicator:!0,containerElement:"span",disableKeyboardFocus:!1,disabled:!1,initiallyOpen:!1,insetChildren:!1,nestedItems:[],nestedLevel:0,onKeyboardFocus:function(){},onMouseEnter:function(){},onMouseLeave:function(){},onNestedListToggle:function(){},onTouchEnd:function(){},onTouchStart:function(){},open:null,primaryTogglesNestedList:!1,secondaryTextLines:1},K.contextTypes={muiTheme:x.default.object.isRequired},K.propTypes={},t.default=K},311:function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),a=o(i),r=n(1),l=(o(r),n(146)),s=o(l),u=function(e){var t=e.children,n=e.open,o=e.nestedLevel,r=e.style;return n?a.default.createElement(s.default,{style:r},i.Children.map(t,function(e){return(0,i.isValidElement)(e)?(0,i.cloneElement)(e,{nestedLevel:o+1}):e})):null};u.propTypes={},t.default=u},312:function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}function i(e,t){var n=t.muiTheme.baseTheme.palette.disabledColor,o=t.muiTheme.baseTheme.palette.textColor,i=e.desktop?64:72,a=e.desktop?24:16;return{root:{color:e.disabled?n:o,cursor:e.disabled?"default":"pointer",minHeight:e.desktop?"32px":"48px",lineHeight:e.desktop?"32px":"48px",fontSize:e.desktop?15:16,whiteSpace:"nowrap"},innerDivStyle:{paddingLeft:e.leftIcon||e.insetChildren||e.checked?i:a,paddingRight:e.rightIcon?i:a,paddingBottom:0,paddingTop:0},secondaryText:{float:"right"},leftIconDesktop:{margin:0,left:24,top:4},rightIconDesktop:{margin:0,right:24,top:4,fill:t.muiTheme.menuItem.rightIconDesktopFill}}}Object.defineProperty(t,"__esModule",{value:!0});var a=n(12),r=o(a),l=n(9),s=o(l),u=n(5),c=o(u),d=n(3),f=o(d),p=n(4),h=o(p),y=n(7),m=o(y),v=n(6),g=o(v),T=n(8),S=o(T),b=n(0),w=o(b),E=n(1),x=o(E),k=n(16),I=o(k),C=n(36),M=o(C),_=n(316),L=o(_),O=n(347),B=o(O),A=n(310),R=o(A),D=n(313),N=o(D),P=n(31),F=(o(P),{position:"relative"}),j=function(e){function t(){var e,n,o,i;(0,f.default)(this,t);for(var a=arguments.length,r=Array(a),l=0;l<a;l++)r[l]=arguments[l];return n=o=(0,m.default)(this,(e=t.__proto__||(0,c.default)(t)).call.apply(e,[this].concat(r))),o.state={open:!1},o.cloneMenuItem=function(e){return w.default.cloneElement(e,{onTouchTap:function(t){e.props.menuItems||o.handleRequestClose(),e.props.onTouchTap&&e.props.onTouchTap(t)}})},o.handleTouchTap=function(e){e.preventDefault(),o.setState({open:!0,anchorEl:I.default.findDOMNode(o)}),o.props.onTouchTap&&o.props.onTouchTap(e)},o.handleRequestClose=function(){o.setState({open:!1,anchorEl:null})},i=n,(0,m.default)(o,i)}return(0,g.default)(t,e),(0,h.default)(t,[{key:"componentDidMount",value:function(){this.applyFocusState()}},{key:"componentWillReceiveProps",value:function(e){this.state.open&&"none"===e.focusState&&this.handleRequestClose()}},{key:"shouldComponentUpdate",value:function(e,t,n){return!(0,M.default)(this.props,e)||!(0,M.default)(this.state,t)||!(0,M.default)(this.context,n)}},{key:"componentDidUpdate",value:function(){this.applyFocusState()}},{key:"componentWillUnmount",value:function(){this.state.open&&this.setState({open:!1})}},{key:"applyFocusState",value:function(){this.refs.listItem.applyFocusState(this.props.focusState)}},{key:"render",value:function(){var e=this.props,t=e.checked,n=e.children,o=e.desktop,a=e.disabled,l=(e.focusState,e.innerDivStyle),u=e.insetChildren,c=e.leftIcon,d=e.menuItems,f=e.rightIcon,p=e.secondaryText,h=e.style,y=e.animation,m=e.anchorOrigin,v=e.targetOrigin,g=(e.value,(0,s.default)(e,["checked","children","desktop","disabled","focusState","innerDivStyle","insetChildren","leftIcon","menuItems","rightIcon","secondaryText","style","animation","anchorOrigin","targetOrigin","value"])),T=this.context.muiTheme.prepareStyles,b=i(this.props,this.context),E=(0,S.default)(b.root,h),x=(0,S.default)(b.innerDivStyle,l),k=c||(t?w.default.createElement(B.default,null):null);if(k){var I=o?(0,S.default)(b.leftIconDesktop,k.props.style):k.props.style;k=w.default.cloneElement(k,{style:I})}var C=void 0;if(f){var M=o?(0,S.default)(b.rightIconDesktop,f.props.style):f.props.style;C=w.default.cloneElement(f,{style:M})}var _=void 0;if(p){var O=w.default.isValidElement(p),A=O?(0,S.default)(b.secondaryText,p.props.style):null;_=O?w.default.cloneElement(p,{style:A}):w.default.createElement("div",{style:T(b.secondaryText)},p)}var D=void 0;return d&&(D=w.default.createElement(L.default,{animation:y,anchorOrigin:m,anchorEl:this.state.anchorEl,open:this.state.open,targetOrigin:v,useLayerForClickAway:!1,onRequestClose:this.handleRequestClose},w.default.createElement(N.default,{desktop:o,disabled:a,style:F},w.default.Children.map(d,this.cloneMenuItem))),g.onTouchTap=this.handleTouchTap),w.default.createElement(R.default,(0,r.default)({},g,{disabled:a,hoverColor:this.context.muiTheme.menuItem.hoverColor,innerDivStyle:x,insetChildren:u,leftIcon:k,ref:"listItem",rightIcon:C,role:"menuitem",style:E}),n,_,D)}}]),t}(b.Component);j.muiName="MenuItem",j.defaultProps={anchorOrigin:{horizontal:"right",vertical:"top"},checked:!1,desktop:!1,disabled:!1,focusState:"none",insetChildren:!1,targetOrigin:{horizontal:"left",vertical:"top"}},j.contextTypes={muiTheme:x.default.object.isRequired},j.propTypes={},t.default=j},313:function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}function i(e,t){var n=e.desktop,o=e.maxHeight,i=e.width,a=t.muiTheme;return{root:{zIndex:a.zIndex.menu,maxHeight:o,overflowY:o?"auto":null},divider:{marginTop:7,marginBottom:8},list:{display:"table-cell",paddingBottom:n?16:8,paddingTop:n?16:8,userSelect:"none",width:i},selectedMenuItem:{color:a.menuItem.selectedTextColor}}}Object.defineProperty(t,"__esModule",{value:!0});var a=n(12),r=o(a),l=n(9),s=o(l),u=n(124),c=o(u),d=n(5),f=o(d),p=n(3),h=o(p),y=n(4),m=o(y),v=n(7),g=o(v),T=n(6),S=o(T),b=n(8),w=o(b),E=n(0),x=o(E),k=n(1),I=o(k),C=n(16),M=o(C),_=n(36),L=o(_),O=n(329),B=o(O),A=n(93),R=o(A),D=n(31),N=(o(D),n(146)),P=o(N),F=n(314),j=function(e){function t(e,n){(0,h.default)(this,t);var o=(0,g.default)(this,(t.__proto__||(0,f.default)(t)).call(this,e,n));z.call(o);var i=o.getFilteredChildren(e.children),a=o.getLastSelectedIndex(e,i),r=e.disableAutoFocus?-1:a>=0?a:0;return-1!==r&&e.onMenuItemFocusChange&&e.onMenuItemFocusChange(null,r),o.state={focusIndex:r,isKeyboardFocused:e.initiallyKeyboardFocused,keyWidth:e.desktop?64:56},o.hotKeyHolder=new F.HotKeyHolder,o}return(0,S.default)(t,e),(0,m.default)(t,[{key:"componentDidMount",value:function(){this.props.autoWidth&&this.setWidth(),this.setScollPosition()}},{key:"componentWillReceiveProps",value:function(e){var t=void 0,n=this.getFilteredChildren(e.children);t=!0!==this.props.multiple?this.getLastSelectedIndex(e,n):this.state.focusIndex;var o=e.disableAutoFocus?-1:t>=0?t:0;o!==this.state.focusIndex&&this.props.onMenuItemFocusChange&&this.props.onMenuItemFocusChange(null,o),this.setState({focusIndex:o,keyWidth:e.desktop?64:56})}},{key:"shouldComponentUpdate",value:function(e,t,n){return!(0,L.default)(this.props,e)||!(0,L.default)(this.state,t)||!(0,L.default)(this.context,n)}},{key:"componentDidUpdate",value:function(){this.props.autoWidth&&this.setWidth()}},{key:"getValueLink",value:function(e){return e.valueLink||{value:e.value,requestChange:e.onChange}}},{key:"setKeyboardFocused",value:function(e){this.setState({isKeyboardFocused:e})}},{key:"getFilteredChildren",value:function(e){var t=[];return x.default.Children.forEach(e,function(e){e&&t.push(e)}),t}},{key:"cloneMenuItem",value:function(e,t,n,o){var i=this,a=e.props.disabled,r={};if(!a){this.isChildSelected(e,this.props)&&(0,w.default)(r,n.selectedMenuItem,this.props.selectedMenuItemStyle)}var l=(0,w.default)({},e.props.style,this.props.menuItemStyle,r),s={desktop:this.props.desktop,style:l};if(!a){var u=t===this.state.focusIndex,c="none";u&&(c=this.state.isKeyboardFocused?"keyboard-focused":"focused"),(0,w.default)(s,{focusState:c,onTouchTap:function(t){i.handleMenuItemTouchTap(t,e,o),e.props.onTouchTap&&e.props.onTouchTap(t)},ref:u?"focusedMenuItem":null})}return x.default.cloneElement(e,s)}},{key:"decrementKeyboardFocusIndex",value:function(e){var t=this.state.focusIndex;t--,t<0&&(t=0),this.setFocusIndex(e,t,!0)}},{key:"getMenuItemCount",value:function(e){var t=0;return e.forEach(function(e){var n=e.type&&"Divider"===e.type.muiName,o=e.props.disabled;n||o||t++}),t}},{key:"getLastSelectedIndex",value:function(e,t){var n=this,o=-1,i=0;return t.forEach(function(t){var a=t.type&&"Divider"===t.type.muiName;n.isChildSelected(t,e)&&(o=i),a||i++}),o}},{key:"setFocusIndexStartsWith",value:function(e,t){var n=-1;return x.default.Children.forEach(this.props.children,function(e,o){if(!(n>=0)){var i=e.props.primaryText;"string"==typeof i&&i.substr(0,t.length).toLowerCase()===t.toLowerCase()&&(n=o)}}),n>=0&&(this.setFocusIndex(e,n,!0),!0)}},{key:"handleMenuItemTouchTap",value:function(e,t,n){var o=this.props.children,i=this.props.multiple,a=this.getValueLink(this.props),r=a.value,l=t.props.value,s=x.default.isValidElement(o)?0:o.indexOf(t);if(this.setFocusIndex(e,s,!1),i){r=r||[];var u=r.indexOf(l),d=r,f=(0,c.default)(d),p=f.slice(0);-1===u?p.push(l):p.splice(u,1),a.requestChange(e,p)}else i||l===r||a.requestChange(e,l);this.props.onItemTouchTap(e,t,n)}},{key:"incrementKeyboardFocusIndex",value:function(e,t){var n=this.state.focusIndex,o=this.getMenuItemCount(t)-1;n++,n>o&&(n=o),this.setFocusIndex(e,n,!0)}},{key:"isChildSelected",value:function(e,t){var n=this.getValueLink(t).value,o=e.props.value;return t.multiple?n&&n.length&&-1!==n.indexOf(o):e.props.hasOwnProperty("value")&&n===o}},{key:"setFocusIndex",value:function(e,t,n){this.props.onMenuItemFocusChange&&this.props.onMenuItemFocusChange(e,t),this.setState({focusIndex:t,isKeyboardFocused:n})}},{key:"setScollPosition",value:function(){var e=this.props.desktop,t=this.refs.focusedMenuItem,n=e?32:48;if(t){var o=M.default.findDOMNode(t).offsetTop,i=o-n;i<n&&(i=0),M.default.findDOMNode(this.refs.scrollContainer).scrollTop=i}}},{key:"cancelScrollEvent",value:function(e){return e.stopPropagation(),e.preventDefault(),!1}},{key:"setWidth",value:function(){var e=M.default.findDOMNode(this),t=M.default.findDOMNode(this.refs.list),n=e.offsetWidth,o=this.state.keyWidth,i=1.5*o,a=n/o,r=void 0;a=a<=1.5?1.5:Math.ceil(a),r=a*o,r<i&&(r=i),e.style.width=r+"px",t.style.width=r+"px"}},{key:"render",value:function(){var e=this,t=this.props,n=(t.autoWidth,t.children),o=(t.desktop,t.disableAutoFocus,t.initiallyKeyboardFocused,t.listStyle),a=(t.maxHeight,t.multiple,t.onItemTouchTap,t.onEscKeyDown,t.onMenuItemFocusChange,t.selectedMenuItemStyle,t.menuItemStyle,t.style),l=(t.value,t.valueLink,t.width,(0,s.default)(t,["autoWidth","children","desktop","disableAutoFocus","initiallyKeyboardFocused","listStyle","maxHeight","multiple","onItemTouchTap","onEscKeyDown","onMenuItemFocusChange","selectedMenuItemStyle","menuItemStyle","style","value","valueLink","width"])),u=this.context.muiTheme.prepareStyles,c=i(this.props,this.context),d=(0,w.default)(c.root,a),f=(0,w.default)(c.list,o),p=this.getFilteredChildren(n),h=0,y=x.default.Children.map(p,function(t,n){var o=t.props.disabled,i=t.type?t.type.muiName:"",a=t;switch(i){case"MenuItem":a=e.cloneMenuItem(t,h,c,n);break;case"Divider":a=x.default.cloneElement(t,{style:(0,w.default)({},c.divider,t.props.style)})}return"MenuItem"!==i||o||h++,a});return x.default.createElement(B.default,{onClickAway:this.handleClickAway},x.default.createElement("div",{onKeyDown:this.handleKeyDown,onWheel:this.handleOnWheel,style:u(d),ref:"scrollContainer",role:"presentation"},x.default.createElement(P.default,(0,r.default)({},l,{ref:"list",style:f,role:"menu"}),y)))}}]),t}(E.Component);j.defaultProps={autoWidth:!0,desktop:!1,disableAutoFocus:!1,initiallyKeyboardFocused:!1,maxHeight:null,multiple:!1,onChange:function(){},onEscKeyDown:function(){},onItemTouchTap:function(){},onKeyDown:function(){}},j.contextTypes={muiTheme:I.default.object.isRequired};var z=function(){var e=this;this.handleClickAway=function(t){t.defaultPrevented||e.setFocusIndex(t,-1,!1)},this.handleKeyDown=function(t){var n=e.getFilteredChildren(e.props.children),o=(0,R.default)(t);switch(o){case"down":t.preventDefault(),e.incrementKeyboardFocusIndex(t,n);break;case"esc":e.props.onEscKeyDown(t);break;case"tab":t.preventDefault(),t.shiftKey?e.decrementKeyboardFocusIndex(t):e.incrementKeyboardFocusIndex(t,n);break;case"up":t.preventDefault(),e.decrementKeyboardFocusIndex(t);break;default:if(o&&1===o.length){var i=e.hotKeyHolder.append(o);e.setFocusIndexStartsWith(t,i)&&t.preventDefault()}}e.props.onKeyDown(t)},this.handleOnWheel=function(t){var n=e.refs.scrollContainer;if(!(n.scrollHeight<=n.clientHeight)){var o=n.scrollTop,i=n.scrollHeight,a=n.clientHeight,r=t.deltaY,l=r>0;return l&&r>i-a-o?(n.scrollTop=i,e.cancelScrollEvent(t)):!l&&-r>o?(n.scrollTop=0,e.cancelScrollEvent(t)):void 0}}};j.propTypes={},t.default=j},314:function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0}),t.HotKeyHolder=void 0;var i=n(3),a=o(i),r=n(4),l=o(r);t.HotKeyHolder=function(){function e(){var t=this;(0,a.default)(this,e),this.clear=function(){t.timerId=null,t.lastKeys=null}}return(0,l.default)(e,[{key:"append",value:function(e){return clearTimeout(this.timerId),this.timerId=setTimeout(this.clear,500),this.lastKeys=(this.lastKeys||"")+e}}]),e}()},316:function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var i=n(12),a=o(i),r=n(9),l=o(r),s=n(5),u=o(s),c=n(3),d=o(c),f=n(4),p=o(f),h=n(7),y=o(h),m=n(6),v=o(m),g=n(8),T=o(g),S=n(0),b=o(S),w=n(1),E=o(w),x=n(16),k=o(x),I=n(113),C=o(I),M=n(332),_=o(M),L=n(31),O=(o(L),n(43)),B=o(O),A=n(294),R=o(A),D=n(317),N=o(D),P={root:{display:"none"}},F=function(e){function t(e,n){(0,d.default)(this,t);var o=(0,y.default)(this,(t.__proto__||(0,u.default)(t)).call(this,e,n));return o.timeout=null,o.renderLayer=function(){var e=o.props,t=e.animated,n=e.animation,i=(e.anchorEl,e.anchorOrigin,e.autoCloseWhenOffScreen,e.canAutoPosition,e.children),r=(e.onRequestClose,e.style),s=e.targetOrigin,u=(e.useLayerForClickAway,(0,l.default)(e,["animated","animation","anchorEl","anchorOrigin","autoCloseWhenOffScreen","canAutoPosition","children","onRequestClose","style","targetOrigin","useLayerForClickAway"])),c=r;if(!t)return c={position:"fixed",zIndex:o.context.muiTheme.zIndex.popover},o.state.open?b.default.createElement(B.default,(0,a.default)({style:(0,T.default)(c,r)},u),i):null;var d=n||N.default;return b.default.createElement(d,(0,a.default)({targetOrigin:s,style:c},u,{open:o.state.open&&!o.state.closing}),i)},o.componentClickAway=function(){o.requestClose("clickAway")},o.setPlacement=function(e){if(o.state.open&&o.refs.layer.getLayer()){var t=o.refs.layer.getLayer().children[0];if(t){var n=o.props,i=n.targetOrigin,a=n.anchorOrigin,r=o.props.anchorEl||o.anchorEl,l=o.getAnchorPosition(r),s=o.getTargetPosition(t),u={top:l[a.vertical]-s[i.vertical],left:l[a.horizontal]-s[i.horizontal]};e&&o.props.autoCloseWhenOffScreen&&o.autoCloseWhenOffScreen(l),o.props.canAutoPosition&&(s=o.getTargetPosition(t),u=o.applyAutoPositionIfNeeded(l,s,i,a,u)),t.style.top=u.top+"px",t.style.left=u.left+"px",t.style.maxHeight=window.innerHeight+"px"}}},o.handleResize=(0,R.default)(o.setPlacement,100),o.handleScroll=(0,R.default)(o.setPlacement.bind(o,!0),50),o.state={open:e.open,closing:!1},o}return(0,v.default)(t,e),(0,p.default)(t,[{key:"componentDidMount",value:function(){this.setPlacement()}},{key:"componentWillReceiveProps",value:function(e){var t=this;if(e.open!==this.props.open)if(e.open)clearTimeout(this.timeout),this.timeout=null,this.anchorEl=e.anchorEl||this.props.anchorEl,this.setState({open:!0,closing:!1});else if(e.animated){if(null!==this.timeout)return;this.setState({closing:!0}),this.timeout=setTimeout(function(){t.setState({open:!1},function(){t.timeout=null})},500)}else this.setState({open:!1})}},{key:"componentDidUpdate",value:function(){this.setPlacement()}},{key:"componentWillUnmount",value:function(){this.handleResize.cancel(),this.handleScroll.cancel(),this.timeout&&(clearTimeout(this.timeout),this.timeout=null)}},{key:"requestClose",value:function(e){this.props.onRequestClose&&this.props.onRequestClose(e)}},{key:"getAnchorPosition",value:function(e){e||(e=k.default.findDOMNode(this));var t=e.getBoundingClientRect(),n={top:t.top,left:t.left,width:e.offsetWidth,height:e.offsetHeight};return n.right=t.right||n.left+n.width,n.bottom=t.bottom||n.top+n.height,n.middle=n.left+(n.right-n.left)/2,n.center=n.top+(n.bottom-n.top)/2,n}},{key:"getTargetPosition",value:function(e){return{top:0,center:e.offsetHeight/2,bottom:e.offsetHeight,left:0,middle:e.offsetWidth/2,right:e.offsetWidth}}},{key:"autoCloseWhenOffScreen",value:function(e){(e.top<0||e.top>window.innerHeight||e.left<0||e.left>window.innerWidth)&&this.requestClose("offScreen")}},{key:"getOverlapMode",value:function(e,t,n){return[e,t].indexOf(n)>=0?"auto":e===t?"inclusive":"exclusive"}},{key:"getPositions",value:function(e,t){var n=(0,a.default)({},e),o=(0,a.default)({},t),i={x:["left","right"].filter(function(e){return e!==o.horizontal}),y:["top","bottom"].filter(function(e){return e!==o.vertical})},r={x:this.getOverlapMode(n.horizontal,o.horizontal,"middle"),y:this.getOverlapMode(n.vertical,o.vertical,"center")};return i.x.splice("auto"===r.x?0:1,0,"middle"),i.y.splice("auto"===r.y?0:1,0,"center"),"auto"!==r.y&&(n.vertical="top"===n.vertical?"bottom":"top","inclusive"===r.y&&(o.vertical=o.vertical)),"auto"!==r.x&&(n.horizontal="left"===n.horizontal?"right":"left","inclusive"===r.y&&(o.horizontal=o.horizontal)),{positions:i,anchorPos:n}}},{key:"applyAutoPositionIfNeeded",value:function(e,t,n,o,i){var a=this.getPositions(o,n),r=a.positions,l=a.anchorPos;if(i.top<0||i.top+t.bottom>window.innerHeight){var s=e[l.vertical]-t[r.y[0]];s+t.bottom<=window.innerHeight?i.top=Math.max(0,s):(s=e[l.vertical]-t[r.y[1]])+t.bottom<=window.innerHeight&&(i.top=Math.max(0,s))}if(i.left<0||i.left+t.right>window.innerWidth){var u=e[l.horizontal]-t[r.x[0]];u+t.right<=window.innerWidth?i.left=Math.max(0,u):(u=e[l.horizontal]-t[r.x[1]])+t.right<=window.innerWidth&&(i.left=Math.max(0,u))}return i}},{key:"render",value:function(){return b.default.createElement("div",{style:P.root},b.default.createElement(C.default,{target:this.props.scrollableContainer,onScroll:this.handleScroll,onResize:this.handleResize}),b.default.createElement(_.default,{ref:"layer",open:this.state.open,componentClickAway:this.componentClickAway,useLayerForClickAway:this.props.useLayerForClickAway,render:this.renderLayer}))}}]),t}(S.Component);F.defaultProps={anchorOrigin:{vertical:"bottom",horizontal:"left"},animated:!0,autoCloseWhenOffScreen:!0,canAutoPosition:!0,onRequestClose:function(){},open:!1,scrollableContainer:"window",style:{overflowY:"auto"},targetOrigin:{vertical:"top",horizontal:"left"},useLayerForClickAway:!0,zDepth:1},F.contextTypes={muiTheme:E.default.object.isRequired},F.propTypes={},t.default=F},317:function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}function i(e,t,n){var o=e.targetOrigin,i=n.open,a=t.muiTheme,r=o.horizontal.replace("middle","vertical");return{root:{position:"fixed",zIndex:a.zIndex.popover,opacity:i?1:0,transform:i?"scale(1, 1)":"scale(0, 0)",transformOrigin:r+" "+o.vertical,transition:g.default.easeOut("250ms",["transform","opacity"]),maxHeight:"100%"},horizontal:{maxHeight:"100%",overflowY:"auto",transform:i?"scaleX(1)":"scaleX(0)",opacity:i?1:0,transformOrigin:r+" "+o.vertical,transition:g.default.easeOut("250ms",["transform","opacity"])},vertical:{opacity:i?1:0,transform:i?"scaleY(1)":"scaleY(0)",transformOrigin:r+" "+o.vertical,transition:g.default.easeOut("500ms",["transform","opacity"])}}}Object.defineProperty(t,"__esModule",{value:!0});var a=n(5),r=o(a),l=n(3),s=o(l),u=n(4),c=o(u),d=n(7),f=o(d),p=n(6),h=o(p),y=n(8),m=o(y),v=n(15),g=o(v),T=n(0),S=o(T),b=n(1),w=o(b),E=n(31),x=(o(E),n(43)),k=o(x),I=function(e){function t(){var e,n,o,i;(0,s.default)(this,t);for(var a=arguments.length,l=Array(a),u=0;u<a;u++)l[u]=arguments[u];return n=o=(0,f.default)(this,(e=t.__proto__||(0,r.default)(t)).call.apply(e,[this].concat(l))),o.state={open:!1},i=n,(0,f.default)(o,i)}return(0,h.default)(t,e),(0,c.default)(t,[{key:"componentDidMount",value:function(){this.setState({open:!0})}},{key:"componentWillReceiveProps",value:function(e){this.setState({open:e.open})}},{key:"render",value:function(){var e=this.props,t=e.className,n=e.style,o=e.zDepth,a=this.context.muiTheme.prepareStyles,r=i(this.props,this.context,this.state);return S.default.createElement(k.default,{style:(0,m.default)(r.root,n),zDepth:o,className:t},S.default.createElement("div",{style:a(r.horizontal)},S.default.createElement("div",{style:a(r.vertical)},this.props.children)))}}]),t}(T.Component);I.defaultProps={style:{},zDepth:1},I.contextTypes={muiTheme:w.default.object.isRequired},I.propTypes={},t.default=I},319:function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var i=n(12),a=o(i),r=n(9),l=o(r),s=n(8),u=o(s),c=n(0),d=o(c),f=n(1),p=o(f),h=function(e,t){var n=e.children,o=e.inset,i=e.style,r=(0,l.default)(e,["children","inset","style"]),s=t.muiTheme,c=s.prepareStyles,f=s.subheader,p={root:{boxSizing:"border-box",color:f.color,fontSize:14,fontWeight:f.fontWeight,lineHeight:"48px",paddingLeft:o?72:16,width:"100%"}};return d.default.createElement("div",(0,a.default)({},r,{style:c((0,u.default)(p.root,i))}),n)};h.muiName="Subheader",h.propTypes={},h.defaultProps={inset:!1},h.contextTypes={muiTheme:p.default.object.isRequired},t.default=h},320:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=n(319),i=function(e){return e&&e.__esModule?e:{default:e}}(o);t.default=i.default},327:function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var i=n(5),a=o(i),r=n(3),l=o(r),s=n(4),u=o(s),c=n(7),d=o(c),f=n(6),p=o(f),h=n(0),y=n(1),m=(o(y),null),v=0,g=function(e){function t(){var e,n,o,i;(0,l.default)(this,t);for(var r=arguments.length,s=Array(r),u=0;u<r;u++)s[u]=arguments[u];return n=o=(0,d.default)(this,(e=t.__proto__||(0,a.default)(t)).call.apply(e,[this].concat(s))),o.locked=!1,i=n,(0,d.default)(o,i)}return(0,p.default)(t,e),(0,u.default)(t,[{key:"componentDidMount",value:function(){!0===this.props.lock&&this.preventScrolling()}},{key:"componentWillReceiveProps",value:function(e){this.props.lock!==e.lock&&(e.lock?this.preventScrolling():this.allowScrolling())}},{key:"componentWillUnmount",value:function(){this.allowScrolling()}},{key:"preventScrolling",value:function(){if(!0!==this.locked&&(v+=1,this.locked=!0,1===v)){var e=document.getElementsByTagName("body")[0];m=e.style.overflow,e.style.overflow="hidden"}}},{key:"allowScrolling",value:function(){if(!0===this.locked&&(v-=1,this.locked=!1),0===v&&null!==m){document.getElementsByTagName("body")[0].style.overflow=m||"",m=null}}},{key:"render",value:function(){return null}}]),t}(h.Component);g.propTypes={},t.default=g},329:function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var i=n(5),a=o(i),r=n(3),l=o(r),s=n(4),u=o(s),c=n(7),d=o(c),f=n(6),p=o(f),h=n(0),y=n(1),m=(o(y),n(16)),v=o(m),g=n(148),T=o(g),S=function e(t,n){return null!==n&&(t===n||e(t,n.parentNode))},b=["mouseup","touchend"],w=function(e){return b.forEach(function(t){return T.default.on(document,t,e)})},E=function(e){return b.forEach(function(t){return T.default.off(document,t,e)})},x=function(e){function t(){var e,n,o,i;(0,l.default)(this,t);for(var r=arguments.length,s=Array(r),u=0;u<r;u++)s[u]=arguments[u];return n=o=(0,d.default)(this,(e=t.__proto__||(0,a.default)(t)).call.apply(e,[this].concat(s))),o.handleClickAway=function(e){if(!e.defaultPrevented&&o.isCurrentlyMounted){var t=v.default.findDOMNode(o);document.documentElement.contains(e.target)&&!S(t,e.target)&&o.props.onClickAway(e)}},i=n,(0,d.default)(o,i)}return(0,p.default)(t,e),(0,u.default)(t,[{key:"componentDidMount",value:function(){this.isCurrentlyMounted=!0,this.props.onClickAway&&w(this.handleClickAway)}},{key:"componentDidUpdate",value:function(e){e.onClickAway!==this.props.onClickAway&&(E(this.handleClickAway),this.props.onClickAway&&w(this.handleClickAway))}},{key:"componentWillUnmount",value:function(){this.isCurrentlyMounted=!1,E(this.handleClickAway)}},{key:"render",value:function(){return this.props.children}}]),t}(h.Component);x.propTypes={},t.default=x},331:function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}function i(e,t){var n=t.muiTheme.overlay,o={root:{position:"fixed",height:"100%",width:"100%",top:0,left:"-100%",opacity:0,backgroundColor:n.backgroundColor,WebkitTapHighlightColor:"rgba(0, 0, 0, 0)",willChange:"opacity",transform:"translateZ(0)",transition:e.transitionEnabled&&I.default.easeOut("0ms","left","400ms")+", "+I.default.easeOut("400ms","opacity")}};return e.show&&(0,S.default)(o.root,{left:0,opacity:1,transition:I.default.easeOut("0ms","left")+", "+I.default.easeOut("400ms","opacity")}),o}Object.defineProperty(t,"__esModule",{value:!0});var a=n(12),r=o(a),l=n(9),s=o(l),u=n(5),c=o(u),d=n(3),f=o(d),p=n(4),h=o(p),y=n(7),m=o(y),v=n(6),g=o(v),T=n(8),S=o(T),b=n(0),w=o(b),E=n(1),x=o(E),k=n(15),I=o(k),C=n(327),M=o(C),_=function(e){function t(){return(0,f.default)(this,t),(0,m.default)(this,(t.__proto__||(0,c.default)(t)).apply(this,arguments))}return(0,g.default)(t,e),(0,h.default)(t,[{key:"setOpacity",value:function(e){this.refs.overlay.style.opacity=e}},{key:"render",value:function(){var e=this.props,t=e.autoLockScrolling,n=e.show,o=e.style,a=(e.transitionEnabled,(0,s.default)(e,["autoLockScrolling","show","style","transitionEnabled"])),l=this.context.muiTheme.prepareStyles,u=i(this.props,this.context);return w.default.createElement("div",(0,r.default)({},a,{ref:"overlay",style:l((0,S.default)(u.root,o))}),t&&w.default.createElement(M.default,{lock:n}))}}]),t}(b.Component);_.defaultProps={autoLockScrolling:!0,style:{},transitionEnabled:!0},_.contextTypes={muiTheme:x.default.object.isRequired},_.propTypes={},t.default=_},332:function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var i=n(5),a=o(i),r=n(3),l=o(r),s=n(4),u=o(s),c=n(7),d=o(c),f=n(6),p=o(f),h=n(0),y=n(1),m=o(y),v=n(16),g=n(147),T=o(g),S=function(e){function t(){var e,n,o,i;(0,l.default)(this,t);for(var r=arguments.length,s=Array(r),u=0;u<r;u++)s[u]=arguments[u];return n=o=(0,d.default)(this,(e=t.__proto__||(0,a.default)(t)).call.apply(e,[this].concat(s))),o.onClickAway=function(e){if(!e.defaultPrevented&&o.props.componentClickAway&&o.props.open){var t=o.layer;(e.target!==t&&e.target===window||document.documentElement.contains(e.target)&&!T.default.isDescendant(t,e.target))&&o.props.componentClickAway(e)}},i=n,(0,d.default)(o,i)}return(0,p.default)(t,e),(0,u.default)(t,[{key:"componentDidMount",value:function(){this.renderLayer()}},{key:"componentDidUpdate",value:function(){this.renderLayer()}},{key:"componentWillUnmount",value:function(){this.unrenderLayer()}},{key:"getLayer",value:function(){return this.layer}},{key:"unrenderLayer",value:function(){this.layer&&(this.props.useLayerForClickAway?(this.layer.style.position="relative",this.layer.removeEventListener("touchstart",this.onClickAway),this.layer.removeEventListener("click",this.onClickAway)):(window.removeEventListener("touchstart",this.onClickAway),window.removeEventListener("click",this.onClickAway)),(0,v.unmountComponentAtNode)(this.layer),document.body.removeChild(this.layer),this.layer=null)}},{key:"renderLayer",value:function(){var e=this,t=this.props,n=t.open,o=t.render;if(n){this.layer||(this.layer=document.createElement("div"),document.body.appendChild(this.layer),this.props.useLayerForClickAway?(this.layer.addEventListener("touchstart",this.onClickAway),this.layer.addEventListener("click",this.onClickAway),this.layer.style.position="fixed",this.layer.style.top=0,this.layer.style.bottom=0,this.layer.style.left=0,this.layer.style.right=0,this.layer.style.zIndex=this.context.muiTheme.zIndex.layer):setTimeout(function(){window.addEventListener("touchstart",e.onClickAway),window.addEventListener("click",e.onClickAway)},0));var i=o();this.layerElement=(0,v.unstable_renderSubtreeIntoContainer)(this,i,this.layer)}else this.unrenderLayer()}},{key:"render",value:function(){return null}}]),t}(h.Component);S.defaultProps={useLayerForClickAway:!0},S.contextTypes={muiTheme:m.default.object.isRequired},S.propTypes={},t.default=S},342:function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),a=o(i),r=n(27),l=o(r),s=n(24),u=o(s),c=function(e){return a.default.createElement(u.default,e,a.default.createElement("path",{d:"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 14.5c-2.49 0-4.5-2.01-4.5-4.5S9.51 7.5 12 7.5s4.5 2.01 4.5 4.5-2.01 4.5-4.5 4.5zm0-5.5c-.55 0-1 .45-1 1s.45 1 1 1 1-.45 1-1-.45-1-1-1z"}))};c=(0,l.default)(c),c.displayName="AvAlbum",c.muiName="SvgIcon",t.default=c},343:function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),a=o(i),r=n(27),l=o(r),s=n(24),u=o(s),c=function(e){return a.default.createElement(u.default,e,a.default.createElement("path",{d:"M6 18l8.5-6L6 6v12zM16 6v12h2V6h-2z"}))};c=(0,l.default)(c),c.displayName="AvSkipNext",c.muiName="SvgIcon",t.default=c},344:function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),a=o(i),r=n(27),l=o(r),s=n(24),u=o(s),c=function(e){return a.default.createElement(u.default,e,a.default.createElement("path",{d:"M6 6h2v12H6zm3.5 6l8.5 6V6z"}))};c=(0,l.default)(c),c.displayName="AvSkipPrevious",c.muiName="SvgIcon",t.default=c},347:function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),a=o(i),r=n(27),l=o(r),s=n(24),u=o(s),c=function(e){return a.default.createElement(u.default,e,a.default.createElement("path",{d:"M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"}))};c=(0,l.default)(c),c.displayName="NavigationCheck",c.muiName="SvgIcon",t.default=c},348:function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),a=o(i),r=n(27),l=o(r),s=n(24),u=o(s),c=function(e){return a.default.createElement(u.default,e,a.default.createElement("path",{d:"M12 8l-6 6 1.41 1.41L12 10.83l4.59 4.58L18 14z"}))};c=(0,l.default)(c),c.displayName="NavigationExpandLess",c.muiName="SvgIcon",t.default=c},349:function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),a=o(i),r=n(27),l=o(r),s=n(24),u=o(s),c=function(e){return a.default.createElement(u.default,e,a.default.createElement("path",{d:"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z"}))};c=(0,l.default)(c),c.displayName="NavigationExpandMore",c.muiName="SvgIcon",t.default=c},350:function(e,t,n){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),a=o(i),r=n(27),l=o(r),s=n(24),u=o(s),c=function(e){return a.default.createElement(u.default,e,a.default.createElement("path",{d:"M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"}))};c=(0,l.default)(c),c.displayName="NavigationMenu",c.muiName="SvgIcon",t.default=c},74:function(e,t,n){"use strict";(function(t){function o(e,t){!i.isUndefined(e)&&i.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var i=n(18),a=n(203),r={"Content-Type":"application/x-www-form-urlencoded"},l={adapter:function(){var e;return"undefined"!=typeof XMLHttpRequest?e=n(116):void 0!==t&&(e=n(116)),e}(),transformRequest:[function(e,t){return a(t,"Content-Type"),i.isFormData(e)||i.isArrayBuffer(e)||i.isBuffer(e)||i.isStream(e)||i.isFile(e)||i.isBlob(e)?e:i.isArrayBufferView(e)?e.buffer:i.isURLSearchParams(e)?(o(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):i.isObject(e)?(o(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};l.headers={common:{Accept:"application/json, text/plain, */*"}},i.forEach(["delete","get","head"],function(e){l.headers[e]={}}),i.forEach(["post","put","patch"],function(e){l.headers[e]=i.merge(r)}),e.exports=l}).call(t,n(96))}},[207]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vbWFpbmFwcC5idW5kbGUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9heGlvcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9hZGFwdGVycy94aHIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9heGlvcy9saWIvY2FuY2VsL0NhbmNlbC5qcyIsIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9jYW5jZWwvaXNDYW5jZWwuanMiLCJ3ZWJwYWNrOi8vLy4vfi9heGlvcy9saWIvY29yZS9jcmVhdGVFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9oZWxwZXJzL2JpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9tYXRlcmlhbC11aS9MaXN0L0xpc3QuanMiLCJ3ZWJwYWNrOi8vLy4vfi9heGlvcy9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9JbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL3NvbmdzL1NvbmdQbGF5ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9zb25ncy9Tb25nc0FwcC5qcyIsIndlYnBhY2s6Ly8vLi9+L21hdGVyaWFsLXVpL0FwcEJhci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9+L21hdGVyaWFsLXVpL0RyYXdlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9+L21hdGVyaWFsLXVpL01lbnVJdGVtL2luZGV4LmpzIiwid2VicGFjazovLy8uL34vYXhpb3MvbGliL2F4aW9zLmpzIiwid2VicGFjazovLy8uL34vYXhpb3MvbGliL2NhbmNlbC9DYW5jZWxUb2tlbi5qcyIsIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9jb3JlL0F4aW9zLmpzIiwid2VicGFjazovLy8uL34vYXhpb3MvbGliL2NvcmUvSW50ZXJjZXB0b3JNYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL34vYXhpb3MvbGliL2NvcmUvZGlzcGF0Y2hSZXF1ZXN0LmpzIiwid2VicGFjazovLy8uL34vYXhpb3MvbGliL2NvcmUvZW5oYW5jZUVycm9yLmpzIiwid2VicGFjazovLy8uL34vYXhpb3MvbGliL2NvcmUvc2V0dGxlLmpzIiwid2VicGFjazovLy8uL34vYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9oZWxwZXJzL2J0b2EuanMiLCJ3ZWJwYWNrOi8vLy4vfi9heGlvcy9saWIvaGVscGVycy9idWlsZFVSTC5qcyIsIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9oZWxwZXJzL2NvbWJpbmVVUkxzLmpzIiwid2VicGFjazovLy8uL34vYXhpb3MvbGliL2hlbHBlcnMvY29va2llcy5qcyIsIndlYnBhY2s6Ly8vLi9+L2F4aW9zL2xpYi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwuanMiLCJ3ZWJwYWNrOi8vLy4vfi9heGlvcy9saWIvaGVscGVycy9pc1VSTFNhbWVPcmlnaW4uanMiLCJ3ZWJwYWNrOi8vLy4vfi9heGlvcy9saWIvaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lLmpzIiwid2VicGFjazovLy8uL34vYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzIiwid2VicGFjazovLy8uL34vYXhpb3MvbGliL2hlbHBlcnMvc3ByZWFkLmpzIiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvTWFpbkFwcC5qcyIsIndlYnBhY2s6Ly8vLi9+L2lzLWJ1ZmZlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9+L2xvZGFzaC50aHJvdHRsZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9+L21hdGVyaWFsLXVpL0FwcEJhci9BcHBCYXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9tYXRlcmlhbC11aS9EcmF3ZXIvRHJhd2VyLmpzIiwid2VicGFjazovLy8uL34vbWF0ZXJpYWwtdWkvTGlzdC9MaXN0SXRlbS5qcyIsIndlYnBhY2s6Ly8vLi9+L21hdGVyaWFsLXVpL0xpc3QvTmVzdGVkTGlzdC5qcyIsIndlYnBhY2s6Ly8vLi9+L21hdGVyaWFsLXVpL01lbnVJdGVtL01lbnVJdGVtLmpzIiwid2VicGFjazovLy8uL34vbWF0ZXJpYWwtdWkvTWVudS9NZW51LmpzIiwid2VicGFjazovLy8uL34vbWF0ZXJpYWwtdWkvTWVudS9tZW51VXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9tYXRlcmlhbC11aS9Qb3BvdmVyL1BvcG92ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9tYXRlcmlhbC11aS9Qb3BvdmVyL1BvcG92ZXJBbmltYXRpb25EZWZhdWx0LmpzIiwid2VicGFjazovLy8uL34vbWF0ZXJpYWwtdWkvU3ViaGVhZGVyL1N1YmhlYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9+L21hdGVyaWFsLXVpL1N1YmhlYWRlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9+L21hdGVyaWFsLXVpL2ludGVybmFsL0F1dG9Mb2NrU2Nyb2xsaW5nLmpzIiwid2VicGFjazovLy8uL34vbWF0ZXJpYWwtdWkvaW50ZXJuYWwvQ2xpY2tBd2F5TGlzdGVuZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9tYXRlcmlhbC11aS9pbnRlcm5hbC9PdmVybGF5LmpzIiwid2VicGFjazovLy8uL34vbWF0ZXJpYWwtdWkvaW50ZXJuYWwvUmVuZGVyVG9MYXllci5qcyIsIndlYnBhY2s6Ly8vLi9+L21hdGVyaWFsLXVpL3N2Zy1pY29ucy9hdi9hbGJ1bS5qcyIsIndlYnBhY2s6Ly8vLi9+L21hdGVyaWFsLXVpL3N2Zy1pY29ucy9hdi9za2lwLW5leHQuanMiLCJ3ZWJwYWNrOi8vLy4vfi9tYXRlcmlhbC11aS9zdmctaWNvbnMvYXYvc2tpcC1wcmV2aW91cy5qcyIsIndlYnBhY2s6Ly8vLi9+L21hdGVyaWFsLXVpL3N2Zy1pY29ucy9uYXZpZ2F0aW9uL2NoZWNrLmpzIiwid2VicGFjazovLy8uL34vbWF0ZXJpYWwtdWkvc3ZnLWljb25zL25hdmlnYXRpb24vZXhwYW5kLWxlc3MuanMiLCJ3ZWJwYWNrOi8vLy4vfi9tYXRlcmlhbC11aS9zdmctaWNvbnMvbmF2aWdhdGlvbi9leHBhbmQtbW9yZS5qcyIsIndlYnBhY2s6Ly8vLi9+L21hdGVyaWFsLXVpL3N2Zy1pY29ucy9uYXZpZ2F0aW9uL21lbnUuanMiLCJ3ZWJwYWNrOi8vLy4vfi9heGlvcy9saWIvZGVmYXVsdHMuanMiXSwibmFtZXMiOlsid2VicGFja0pzb25wIiwiMTE0IiwibW9kdWxlIiwiZXhwb3J0cyIsIl9fd2VicGFja19yZXF1aXJlX18iLCIxMTYiLCJ1dGlscyIsInNldHRsZSIsImJ1aWxkVVJMIiwicGFyc2VIZWFkZXJzIiwiaXNVUkxTYW1lT3JpZ2luIiwiY3JlYXRlRXJyb3IiLCJidG9hIiwid2luZG93IiwiYmluZCIsImNvbmZpZyIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwicmVxdWVzdERhdGEiLCJkYXRhIiwicmVxdWVzdEhlYWRlcnMiLCJoZWFkZXJzIiwiaXNGb3JtRGF0YSIsInJlcXVlc3QiLCJYTUxIdHRwUmVxdWVzdCIsImxvYWRFdmVudCIsInhEb21haW4iLCJYRG9tYWluUmVxdWVzdCIsInVybCIsIm9ucHJvZ3Jlc3MiLCJvbnRpbWVvdXQiLCJhdXRoIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsIkF1dGhvcml6YXRpb24iLCJvcGVuIiwibWV0aG9kIiwidG9VcHBlckNhc2UiLCJwYXJhbXMiLCJwYXJhbXNTZXJpYWxpemVyIiwidGltZW91dCIsInJlYWR5U3RhdGUiLCJzdGF0dXMiLCJyZXNwb25zZVVSTCIsImluZGV4T2YiLCJyZXNwb25zZUhlYWRlcnMiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJyZXNwb25zZURhdGEiLCJyZXNwb25zZVR5cGUiLCJyZXNwb25zZSIsInJlc3BvbnNlVGV4dCIsInN0YXR1c1RleHQiLCJvbmVycm9yIiwiaXNTdGFuZGFyZEJyb3dzZXJFbnYiLCJjb29raWVzIiwieHNyZlZhbHVlIiwid2l0aENyZWRlbnRpYWxzIiwieHNyZkNvb2tpZU5hbWUiLCJyZWFkIiwidW5kZWZpbmVkIiwieHNyZkhlYWRlck5hbWUiLCJmb3JFYWNoIiwidmFsIiwia2V5IiwidG9Mb3dlckNhc2UiLCJzZXRSZXF1ZXN0SGVhZGVyIiwiZSIsIm9uRG93bmxvYWRQcm9ncmVzcyIsImFkZEV2ZW50TGlzdGVuZXIiLCJvblVwbG9hZFByb2dyZXNzIiwidXBsb2FkIiwiY2FuY2VsVG9rZW4iLCJwcm9taXNlIiwidGhlbiIsImNhbmNlbCIsImFib3J0Iiwic2VuZCIsIjExNyIsIkNhbmNlbCIsIm1lc3NhZ2UiLCJ0aGlzIiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJfX0NBTkNFTF9fIiwiMTE4IiwidmFsdWUiLCIxMTkiLCJlbmhhbmNlRXJyb3IiLCJjb2RlIiwiZXJyb3IiLCJFcnJvciIsIjEyMCIsImZuIiwidGhpc0FyZyIsImFyZ3MiLCJBcnJheSIsImFyZ3VtZW50cyIsImxlbmd0aCIsImkiLCJhcHBseSIsIjE0NiIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiX2V4dGVuZHMyIiwiX2V4dGVuZHMzIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllczMiLCJfZ2V0UHJvdG90eXBlT2YiLCJfZ2V0UHJvdG90eXBlT2YyIiwiX2NsYXNzQ2FsbENoZWNrMiIsIl9jbGFzc0NhbGxDaGVjazMiLCJfY3JlYXRlQ2xhc3MyIiwiX2NyZWF0ZUNsYXNzMyIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMyIsIl9pbmhlcml0czIiLCJfaW5oZXJpdHMzIiwiX3NpbXBsZUFzc2lnbiIsIl9zaW1wbGVBc3NpZ24yIiwiX3JlYWN0IiwiX3JlYWN0MiIsIl9wcm9wVHlwZXMiLCJfcHJvcFR5cGVzMiIsIl9TdWJoZWFkZXIiLCJfU3ViaGVhZGVyMiIsIkxpc3QiLCJfQ29tcG9uZW50IiwiX19wcm90b19fIiwiX3Byb3BzIiwicHJvcHMiLCJjaGlsZHJlbiIsInN0eWxlIiwib3RoZXIiLCJwcmVwYXJlU3R5bGVzIiwiY29udGV4dCIsIm11aVRoZW1lIiwiaGFzU3ViaGVhZGVyIiwiZmlyc3RDaGlsZCIsIkNoaWxkcmVuIiwidG9BcnJheSIsImlzVmFsaWRFbGVtZW50IiwidHlwZSIsInN0eWxlcyIsInJvb3QiLCJwYWRkaW5nIiwiY3JlYXRlRWxlbWVudCIsIkNvbXBvbmVudCIsImNvbnRleHRUeXBlcyIsIm9iamVjdCIsImlzUmVxdWlyZWQiLCJwcm9wVHlwZXMiLCIxOCIsImlzQXJyYXkiLCJjYWxsIiwiaXNBcnJheUJ1ZmZlciIsIkZvcm1EYXRhIiwiaXNBcnJheUJ1ZmZlclZpZXciLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsImJ1ZmZlciIsImlzU3RyaW5nIiwiaXNOdW1iZXIiLCJpc1VuZGVmaW5lZCIsImlzT2JqZWN0IiwiaXNEYXRlIiwiaXNGaWxlIiwiaXNCbG9iIiwiaXNGdW5jdGlvbiIsImlzU3RyZWFtIiwicGlwZSIsImlzVVJMU2VhcmNoUGFyYW1zIiwiVVJMU2VhcmNoUGFyYW1zIiwidHJpbSIsInN0ciIsInJlcGxhY2UiLCJuYXZpZ2F0b3IiLCJwcm9kdWN0IiwiZG9jdW1lbnQiLCJsIiwiaGFzT3duUHJvcGVydHkiLCJtZXJnZSIsImFzc2lnblZhbHVlIiwicmVzdWx0IiwiZXh0ZW5kIiwiYSIsImIiLCJpc0J1ZmZlciIsIjE4MSIsIkluZGV4IiwiY3JlYXRlQ2xhc3MiLCJkaXNwbGF5TmFtZSIsInJlbmRlciIsIjE4MiIsIl9yZWFjdERvbSIsIl9GbGF0QnV0dG9uIiwiX0ZsYXRCdXR0b24yIiwiX3NraXBOZXh0IiwiX3NraXBOZXh0MiIsIl9za2lwUHJldmlvdXMiLCJfc2tpcFByZXZpb3VzMiIsIlNvbmdQbGF5ZXIiLCJsb2FkaW5nU29uZyIsInNvbmdMb2FkV2FpdCIsImdldERlZmF1bHRQcm9wcyIsInNvbmciLCJuZXh0U29uZyIsInByZXZTb25nIiwib25Tb25nRW5kIiwiY29uc29sZSIsImxvZyIsImdldFNvbmdTcmMiLCJjb21wb25lbnREaWRVcGRhdGUiLCJwcmV2UHJvcHMiLCJwcmV2U3RhdGUiLCJjdXJyU29uZyIsInZhbHVlT2YiLCJhdWRpbyIsInNyYyIsImxvYWQiLCJwbGF5IiwiX3RoaXMiLCJzZXRUaW1lb3V0IiwiX3RoaXMyIiwiY3VycmVudFRpbWUiLCJjb21wb25lbnREaWRNb3VudCIsIl90aGlzMyIsImlzRmlyZWZveCIsIkluc3RhbGxUcmlnZ2VyIiwiYXVkaW9DdHJsU3R5bGUiLCJ3aWR0aCIsImJvcmRlclJhZGl1cyIsImJhY2tncm91bmRDb2xvciIsImNvbG9yIiwicmVmIiwib25FbmRlZCIsImNvbnRyb2xzIiwiaWNvbiIsIm9uQ2xpY2siLCIxODMiLCJfYXhpb3MiLCJfYXhpb3MyIiwiX2FsYnVtIiwiX2FsYnVtMiIsIl9UZXh0RmllbGQiLCJfVGV4dEZpZWxkMiIsIlNvbmdzQXBwIiwiZ2V0SW5pdGlhbFN0YXRlIiwiYmFuZCIsInVwbG9hZFN1Y2NNc2ciLCJ1cGxvYWRFcnJNc2ciLCJ1cGxvYWRGaWxlIiwiZmQiLCJmaWxlIiwiZmlsZUlucHV0IiwiZmlsZXMiLCJhcHBlbmQiLCJzdGF0ZSIsInByb2dyZXNzRXZlbnQiLCJwZXJjZW50Q29tcGxldGVkIiwiTWF0aCIsInJvdW5kIiwibG9hZGVkIiwidG90YWwiLCJwb3N0IiwicmVzIiwic2V0U3RhdGUiLCJjYXRjaCIsImVyciIsInByZXZlbnREZWZhdWx0Iiwib25CYW5kQ2hhbmdlIiwidGFyZ2V0IiwidXBsb2FkQnV0dG9uIiwidmVydGljYWxBbGlnbiIsInVwbG9hZElucHV0IiwiY3Vyc29yIiwicG9zaXRpb24iLCJ0b3AiLCJib3R0b20iLCJyaWdodCIsImxlZnQiLCJvcGFjaXR5IiwidXBsb2FkQnV0dG9uRGlzYWJsZWQiLCJzdWNjTXNnRWxlbSIsImVyck1zZ0VsZW0iLCJoaW50VGV4dCIsIm9uQ2hhbmdlIiwibGFiZWwiLCJsYWJlbFBvc2l0aW9uIiwiY29udGFpbmVyRWxlbWVudCIsImRpc2FibGVkIiwiZmkiLCJuYW1lIiwiY2xhc3NOYW1lIiwiMTg0IiwiX0FwcEJhciIsIl9BcHBCYXIyIiwiMTg2IiwiX0RyYXdlciIsIl9EcmF3ZXIyIiwiMTg3IiwiX01lbnVJdGVtIiwiX01lbnVJdGVtMiIsIjE4OSIsImNyZWF0ZUluc3RhbmNlIiwiZGVmYXVsdENvbmZpZyIsIkF4aW9zIiwiaW5zdGFuY2UiLCJkZWZhdWx0cyIsImF4aW9zIiwiY3JlYXRlIiwiaW5zdGFuY2VDb25maWciLCJDYW5jZWxUb2tlbiIsImlzQ2FuY2VsIiwiYWxsIiwicHJvbWlzZXMiLCJzcHJlYWQiLCIxOTAiLCJleGVjdXRvciIsIlR5cGVFcnJvciIsInJlc29sdmVQcm9taXNlIiwidG9rZW4iLCJyZWFzb24iLCJ0aHJvd0lmUmVxdWVzdGVkIiwic291cmNlIiwiYyIsIjE5MSIsImludGVyY2VwdG9ycyIsIkludGVyY2VwdG9yTWFuYWdlciIsImRpc3BhdGNoUmVxdWVzdCIsImlzQWJzb2x1dGVVUkwiLCJjb21iaW5lVVJMcyIsImJhc2VVUkwiLCJjaGFpbiIsImludGVyY2VwdG9yIiwidW5zaGlmdCIsImZ1bGZpbGxlZCIsInJlamVjdGVkIiwicHVzaCIsInNoaWZ0IiwiMTkyIiwiaGFuZGxlcnMiLCJ1c2UiLCJlamVjdCIsImlkIiwiaCIsIjE5MyIsInRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQiLCJ0cmFuc2Zvcm1EYXRhIiwidHJhbnNmb3JtUmVxdWVzdCIsImNvbW1vbiIsImFkYXB0ZXIiLCJ0cmFuc2Zvcm1SZXNwb25zZSIsIjE5NCIsIjE5NSIsInZhbGlkYXRlU3RhdHVzIiwiMTk2IiwiZm5zIiwiMTk3IiwiRSIsImlucHV0IiwiYmxvY2siLCJjaGFyQ29kZSIsIlN0cmluZyIsIm91dHB1dCIsImlkeCIsIm1hcCIsImNoYXJzIiwiY2hhckF0IiwiY2hhckNvZGVBdCIsIjE5OCIsImVuY29kZSIsImVuY29kZVVSSUNvbXBvbmVudCIsInNlcmlhbGl6ZWRQYXJhbXMiLCJwYXJ0cyIsInYiLCJ0b0lTT1N0cmluZyIsIkpTT04iLCJzdHJpbmdpZnkiLCJqb2luIiwiMTk5IiwicmVsYXRpdmVVUkwiLCIyMDAiLCJ3cml0ZSIsImV4cGlyZXMiLCJwYXRoIiwiZG9tYWluIiwic2VjdXJlIiwiY29va2llIiwiRGF0ZSIsInRvR01UU3RyaW5nIiwibWF0Y2giLCJSZWdFeHAiLCJkZWNvZGVVUklDb21wb25lbnQiLCJyZW1vdmUiLCJub3ciLCIyMDEiLCJ0ZXN0IiwiMjAyIiwicmVzb2x2ZVVSTCIsImhyZWYiLCJtc2llIiwidXJsUGFyc2luZ05vZGUiLCJzZXRBdHRyaWJ1dGUiLCJwcm90b2NvbCIsImhvc3QiLCJzZWFyY2giLCJoYXNoIiwiaG9zdG5hbWUiLCJwb3J0IiwicGF0aG5hbWUiLCJvcmlnaW5VUkwiLCJ1c2VyQWdlbnQiLCJsb2NhdGlvbiIsInJlcXVlc3RVUkwiLCJwYXJzZWQiLCIyMDMiLCJub3JtYWxpemVkTmFtZSIsIjIwNCIsInNwbGl0IiwibGluZSIsInN1YnN0ciIsIjIwNSIsImNhbGxiYWNrIiwiYXJyIiwiMjA3IiwiX3JlYWN0RG9tMiIsIl9NdWlUaGVtZVByb3ZpZGVyIiwiX011aVRoZW1lUHJvdmlkZXIyIiwiX0luZGV4IiwiX0luZGV4MiIsIl9Tb25nc0FwcCIsIl9Tb25nc0FwcDIiLCJfU29uZ1BsYXllciIsIl9Tb25nUGxheWVyMiIsIlBBR0VTIiwiaW5kZXgiLCJzb25ncyIsIk1haW5BcHAiLCJjdXJyUGFnZSIsImRyYXdlck9wZW4iLCJzb25nSW5kZXgiLCJwbGF5bGlzdCIsImFwcEJhckxlZnRUYXAiLCJvbkRyYXdlclJlcXVlc3RDaGFuZ2UiLCJnb3RvUGFnZSIsInBhZ2UiLCJjdXJyZW50UGFnZSIsInNvbmdQbGF5ZXIiLCJvbkxlZnRJY29uQnV0dG9uVG91Y2hUYXAiLCJ0aXRsZSIsImRvY2tlZCIsIm9uUmVxdWVzdENoYW5nZSIsIm9uVG91Y2hUYXAiLCJnZXRFbGVtZW50QnlJZCIsIjI5MiIsImNvbnN0cnVjdG9yIiwiaXNTbG93QnVmZmVyIiwicmVhZEZsb2F0TEUiLCJzbGljZSIsIl9pc0J1ZmZlciIsIjI5NCIsImdsb2JhbCIsImRlYm91bmNlIiwiZnVuYyIsIndhaXQiLCJvcHRpb25zIiwiaW52b2tlRnVuYyIsInRpbWUiLCJsYXN0QXJncyIsImxhc3RUaGlzIiwibGFzdEludm9rZVRpbWUiLCJsZWFkaW5nRWRnZSIsInRpbWVySWQiLCJ0aW1lckV4cGlyZWQiLCJsZWFkaW5nIiwicmVtYWluaW5nV2FpdCIsInRpbWVTaW5jZUxhc3RDYWxsIiwibGFzdENhbGxUaW1lIiwidGltZVNpbmNlTGFzdEludm9rZSIsIm1heGluZyIsIm5hdGl2ZU1pbiIsIm1heFdhaXQiLCJzaG91bGRJbnZva2UiLCJ0cmFpbGluZ0VkZ2UiLCJ0cmFpbGluZyIsImNsZWFyVGltZW91dCIsImZsdXNoIiwiZGVib3VuY2VkIiwiaXNJbnZva2luZyIsIkZVTkNfRVJST1JfVEVYVCIsInRvTnVtYmVyIiwibmF0aXZlTWF4IiwidGhyb3R0bGUiLCJpc09iamVjdExpa2UiLCJpc1N5bWJvbCIsIm9iamVjdFRvU3RyaW5nIiwic3ltYm9sVGFnIiwiTkFOIiwicmVUcmltIiwiaXNCaW5hcnkiLCJyZUlzQmluYXJ5IiwicmVJc09jdGFsIiwiZnJlZVBhcnNlSW50IiwicmVJc0JhZEhleCIsInBhcnNlSW50IiwiZnJlZUdsb2JhbCIsImZyZWVTZWxmIiwic2VsZiIsIkZ1bmN0aW9uIiwib2JqZWN0UHJvdG8iLCJtYXgiLCJtaW4iLCIyOTUiLCJnZXRTdHlsZXMiLCJfY29udGV4dCRtdWlUaGVtZSIsImFwcEJhciIsImljb25CdXR0b25TaXplIiwiYnV0dG9uIiwiekluZGV4IiwiZGlzcGxheSIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0Iiwid2hpdGVTcGFjZSIsIm92ZXJmbG93IiwidGV4dE92ZXJmbG93IiwibWFyZ2luIiwicGFkZGluZ1RvcCIsImxldHRlclNwYWNpbmciLCJmb250U2l6ZSIsImZvbnRXZWlnaHQiLCJ0aXRsZUZvbnRXZWlnaHQiLCJ0ZXh0Q29sb3IiLCJoZWlnaHQiLCJsaW5lSGVpZ2h0IiwibWFpbkVsZW1lbnQiLCJib3hGbGV4IiwiZmxleCIsImljb25CdXR0b25TdHlsZSIsIm1hcmdpblRvcCIsIm1hcmdpblJpZ2h0IiwibWFyZ2luTGVmdCIsImljb25CdXR0b25JY29uU3R5bGUiLCJmaWxsIiwiZmxhdEJ1dHRvbiIsIl9rZXlzIiwiX2tleXMyIiwiX0ljb25CdXR0b24iLCJfSWNvbkJ1dHRvbjIiLCJfbWVudSIsIl9tZW51MiIsIl9QYXBlciIsIl9QYXBlcjIiLCJfcHJvcFR5cGVzMyIsIl93YXJuaW5nIiwiQXBwQmFyIiwiX3JlZiIsIl90ZW1wIiwiX3JldCIsIl9sZW4iLCJfa2V5IiwiY29uY2F0IiwiaGFuZGxlVG91Y2hUYXBMZWZ0SWNvbkJ1dHRvbiIsImV2ZW50IiwiaGFuZGxlVG91Y2hUYXBSaWdodEljb25CdXR0b24iLCJvblJpZ2h0SWNvbkJ1dHRvblRvdWNoVGFwIiwiaGFuZGxlVGl0bGVUb3VjaFRhcCIsIm9uVGl0bGVUb3VjaFRhcCIsInRpdGxlU3R5bGUiLCJpY29uU3R5bGVMZWZ0IiwiaWNvblN0eWxlUmlnaHQiLCJzaG93TWVudUljb25CdXR0b24iLCJpY29uRWxlbWVudExlZnQiLCJpY29uRWxlbWVudFJpZ2h0IiwiaWNvbkNsYXNzTmFtZUxlZnQiLCJpY29uQ2xhc3NOYW1lUmlnaHQiLCJ6RGVwdGgiLCJtZW51RWxlbWVudExlZnQiLCJtZW51RWxlbWVudFJpZ2h0IiwidGl0bGVDb21wb25lbnQiLCJ0aXRsZUVsZW1lbnQiLCJpY29uTGVmdFN0eWxlIiwiaWNvbkVsZW1lbnRMZWZ0UHJvcHMiLCJtdWlOYW1lIiwiaWNvbkVsZW1MZWZ0Q2hpbGRyZW4iLCJpY29uU3R5bGUiLCJjbG9uZUVsZW1lbnQiLCJpY29uQ2xhc3NOYW1lIiwiaWNvblJpZ2h0U3R5bGUiLCJpY29uRWxlbWVudFJpZ2h0UHJvcHMiLCJpY29uRWxlbVJpZ2h0Q2hpbGRyZW4iLCJfaWNvbkJ1dHRvbkljb25TdHlsZSIsInJvdW5kZWQiLCJkZWZhdWx0UHJvcHMiLCIzMDQiLCJfcmVhY3RFdmVudExpc3RlbmVyIiwiX3JlYWN0RXZlbnRMaXN0ZW5lcjIiLCJfa2V5Y29kZSIsIl9rZXljb2RlMiIsIl9hdXRvUHJlZml4IiwiX2F1dG9QcmVmaXgyIiwiX3RyYW5zaXRpb25zIiwiX3RyYW5zaXRpb25zMiIsIl9PdmVybGF5IiwiX092ZXJsYXkyIiwib3Blbk5hdkV2ZW50SGFuZGxlciIsIkRyYXdlciIsImhhbmRsZVRvdWNoVGFwT3ZlcmxheSIsImNsb3NlIiwiaGFuZGxlS2V5VXAiLCJvbkJvZHlUb3VjaFN0YXJ0Iiwic3dpcGVBcmVhV2lkdGgiLCJ0b3VjaFN0YXJ0WCIsImlzUnRsIiwiYm9keSIsIm9mZnNldFdpZHRoIiwidG91Y2hlcyIsInBhZ2VYIiwidG91Y2hTdGFydFkiLCJwYWdlWSIsIm9wZW5TZWNvbmRhcnkiLCJkaXNhYmxlU3dpcGVUb09wZW4iLCJtYXliZVN3aXBpbmciLCJvbkJvZHlUb3VjaE1vdmUiLCJvbkJvZHlUb3VjaEVuZCIsImN1cnJlbnRYIiwiY3VycmVudFkiLCJzd2lwaW5nIiwic2V0UG9zaXRpb24iLCJnZXRUcmFuc2xhdGVYIiwiZFhBYnMiLCJhYnMiLCJkWUFicyIsInN3aXBlU3RhcnRYIiwiY2hhbmdlZFRvdWNoZXMiLCJ0cmFuc2xhdGVSYXRpbyIsImdldE1heFRyYW5zbGF0ZVgiLCJyZW1vdmVCb2R5VG91Y2hMaXN0ZW5lcnMiLCJlbmFibGVTd2lwZUhhbmRsaW5nIiwibmV4dFByb3BzIiwiZGlzYWJsZVN3aXBlSGFuZGxpbmciLCJ0aGVtZSIsImRyYXdlciIsIngiLCJnZXRUcmFuc2xhdGVNdWx0aXBsaWVyIiwiZ2V0VHJhbnNsYXRlZFdpZHRoIiwidHJhbnNmb3JtIiwidHJhbnNpdGlvbiIsImVhc2VPdXQiLCJXZWJraXRPdmVyZmxvd1Njcm9sbGluZyIsIm92ZXJsYXkiLCJkcmF3ZXJPdmVybGF5IiwicG9pbnRlckV2ZW50cyIsInJvb3RXaGVuT3BlblJpZ2h0IiwicGFyc2VGbG9hdCIsImlubmVyV2lkdGgiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwidHJhbnNsYXRlWCIsInJ0bFRyYW5zbGF0ZU11bHRpcGxpZXIiLCJmaW5kRE9NTm9kZSIsInJlZnMiLCJjbGlja0F3YXlhYmxlRWxlbWVudCIsInRyYW5zZm9ybUNTUyIsInNldE9wYWNpdHkiLCJzZXQiLCJjb250YWluZXJDbGFzc05hbWUiLCJjb250YWluZXJTdHlsZSIsIm92ZXJsYXlDbGFzc05hbWUiLCJvdmVybGF5U3R5bGUiLCJzaG93Iiwic2hvdWxkU2hvdyIsInRyYW5zaXRpb25FbmFibGVkIiwib25LZXlVcCIsIjMxMCIsImF1dG9HZW5lcmF0ZU5lc3RlZEluZGljYXRvciIsImluc2V0Q2hpbGRyZW4iLCJsZWZ0QXZhdGFyIiwibGVmdENoZWNrYm94IiwibGVmdEljb24iLCJuZXN0ZWRJdGVtcyIsIm5lc3RlZExldmVsIiwicmlnaHRBdmF0YXIiLCJyaWdodEljb24iLCJyaWdodEljb25CdXR0b24iLCJyaWdodFRvZ2dsZSIsInNlY29uZGFyeVRleHQiLCJzZWNvbmRhcnlUZXh0TGluZXMiLCJsaXN0SXRlbSIsImJhc2VUaGVtZSIsInBhbGV0dGUiLCJob3ZlckNvbG9yIiwiX2NvbG9yTWFuaXB1bGF0b3IiLCJmYWRlIiwic2luZ2xlQXZhdGFyIiwic2luZ2xlTm9BdmF0YXIiLCJ0d29MaW5lIiwidGhyZWVMaW5lIiwiaXNLZXlib2FyZEZvY3VzZWQiLCJob3ZlcmVkIiwicmlnaHRJY29uQnV0dG9uSG92ZXJlZCIsInJpZ2h0SWNvbkJ1dHRvbktleWJvYXJkRm9jdXNlZCIsImlubmVyRGl2IiwibmVzdGVkTGV2ZWxEZXB0aCIsInBhZGRpbmdCb3R0b20iLCJpY29ucyIsImF2YXRhcnMiLCJwcmltYXJ5VGV4dCIsInNlY29uZGFyeVRleHRDb2xvciIsIldlYmtpdExpbmVDbGFtcCIsIldlYmtpdEJveE9yaWVudCIsIl9zaGFsbG93RXF1YWwiLCJfc2hhbGxvd0VxdWFsMiIsIl9FbmhhbmNlZEJ1dHRvbiIsIl9FbmhhbmNlZEJ1dHRvbjIiLCJfZXhwYW5kTGVzcyIsIl9leHBhbmRMZXNzMiIsIl9leHBhbmRNb3JlIiwiX2V4cGFuZE1vcmUyIiwiX05lc3RlZExpc3QiLCJfTmVzdGVkTGlzdDIiLCJMaXN0SXRlbSIsInRvdWNoIiwiaGFuZGxlS2V5Ym9hcmRGb2N1cyIsIm9uS2V5Ym9hcmRGb2N1cyIsImhhbmRsZU1vdXNlRW50ZXIiLCJvbk1vdXNlRW50ZXIiLCJoYW5kbGVNb3VzZUxlYXZlIiwib25Nb3VzZUxlYXZlIiwiaGFuZGxlVG91Y2hUYXAiLCJwcmltYXJ5VG9nZ2xlc05lc3RlZExpc3QiLCJoYW5kbGVOZXN0ZWRMaXN0VG9nZ2xlIiwic3RvcFByb3BhZ2F0aW9uIiwib25OZXN0ZWRMaXN0VG9nZ2xlIiwiaGFuZGxlUmlnaHRJY29uQnV0dG9uS2V5Ym9hcmRGb2N1cyIsImljb25CdXR0b24iLCJoYW5kbGVSaWdodEljb25CdXR0b25Nb3VzZUxlYXZlIiwiaGFuZGxlUmlnaHRJY29uQnV0dG9uTW91c2VFbnRlciIsImhhbmRsZVJpZ2h0SWNvbkJ1dHRvbk1vdXNlVXAiLCJvbk1vdXNlVXAiLCJoYW5kbGVSaWdodEljb25CdXR0b25Ub3VjaFRhcCIsImhhbmRsZVRvdWNoU3RhcnQiLCJvblRvdWNoU3RhcnQiLCJoYW5kbGVUb3VjaEVuZCIsIm9uVG91Y2hFbmQiLCJpbml0aWFsbHlPcGVuIiwibmV4dFN0YXRlIiwibmV4dENvbnRleHQiLCJmb2N1c1N0YXRlIiwiYnV0dG9uRWwiLCJibHVyIiwiZm9jdXMiLCJzZXRLZXlib2FyZEZvY3VzIiwiY29udGVudENoaWxkcmVuIiwiYWRkaXRpb25hbFByb3BzIiwiaW5uZXJEaXZTdHlsZSIsIm1lcmdlZERpdlN0eWxlcyIsIl9wcm9wczIiLCJtZXJnZWRMYWJlbFN0eWxlcyIsImVsZW1lbnQiLCJiYXNlU3R5bGVzIiwiX3Byb3BzMyIsImRpc2FibGVLZXlib2FyZEZvY3VzIiwibmVzdGVkTGlzdFN0eWxlIiwibGVmdEljb25Db2xvciIsInB1c2hFbGVtZW50IiwiX2FkZGl0aW9uYWxQcm9wcyIsInJpZ2h0SWNvbkNvbG9yIiwiaGFzTmVzdExpc3RJdGVtcyIsImhhc1JpZ2h0RWxlbWVudCIsIm5lZWRzTmVzdGVkSW5kaWNhdG9yIiwicmlnaHRJY29uQnV0dG9uRWxlbWVudCIsInJpZ2h0SWNvbkJ1dHRvbkhhbmRsZXJzIiwib25Nb3VzZURvd24iLCJwcmltYXJ5VGV4dEVsZW1lbnQiLCJjcmVhdGVUZXh0RWxlbWVudCIsInNlY29uZGFyeVRleHRFbGVtZW50IiwibmVzdGVkTGlzdCIsInNpbXBsZUxhYmVsIiwiY3JlYXRlTGFiZWxFbGVtZW50IiwiY3JlYXRlRGlzYWJsZWRFbGVtZW50Iiwibm9kZSIsIjMxMSIsIl9MaXN0IiwiX0xpc3QyIiwiTmVzdGVkTGlzdCIsImNoaWxkIiwiMzEyIiwiZGlzYWJsZWRDb2xvciIsImluZGVudCIsImRlc2t0b3AiLCJzaWRlUGFkZGluZyIsIm1pbkhlaWdodCIsImNoZWNrZWQiLCJmbG9hdCIsImxlZnRJY29uRGVza3RvcCIsInJpZ2h0SWNvbkRlc2t0b3AiLCJtZW51SXRlbSIsInJpZ2h0SWNvbkRlc2t0b3BGaWxsIiwiX1BvcG92ZXIiLCJfUG9wb3ZlcjIiLCJfY2hlY2siLCJfY2hlY2syIiwiX0xpc3RJdGVtIiwiX0xpc3RJdGVtMiIsIl9NZW51IiwiX01lbnUyIiwibmVzdGVkTWVudVN0eWxlIiwiTWVudUl0ZW0iLCJjbG9uZU1lbnVJdGVtIiwiaXRlbSIsIm1lbnVJdGVtcyIsImhhbmRsZVJlcXVlc3RDbG9zZSIsImFuY2hvckVsIiwiYXBwbHlGb2N1c1N0YXRlIiwiYW5pbWF0aW9uIiwiYW5jaG9yT3JpZ2luIiwidGFyZ2V0T3JpZ2luIiwibWVyZ2VkUm9vdFN0eWxlcyIsIm1lcmdlZElubmVyRGl2U3R5bGVzIiwibGVmdEljb25FbGVtZW50IiwibWVyZ2VkTGVmdEljb25TdHlsZXMiLCJyaWdodEljb25FbGVtZW50IiwibWVyZ2VkUmlnaHRJY29uU3R5bGVzIiwic2Vjb25kYXJ5VGV4dElzQW5FbGVtZW50IiwibWVyZ2VkU2Vjb25kYXJ5VGV4dFN0eWxlcyIsImNoaWxkTWVudVBvcG92ZXIiLCJ1c2VMYXllckZvckNsaWNrQXdheSIsIm9uUmVxdWVzdENsb3NlIiwicm9sZSIsImhvcml6b250YWwiLCJ2ZXJ0aWNhbCIsIjMxMyIsIm1heEhlaWdodCIsIm1lbnUiLCJvdmVyZmxvd1kiLCJkaXZpZGVyIiwibWFyZ2luQm90dG9tIiwibGlzdCIsInVzZXJTZWxlY3QiLCJzZWxlY3RlZE1lbnVJdGVtIiwic2VsZWN0ZWRUZXh0Q29sb3IiLCJfdG9BcnJheTIiLCJfdG9BcnJheTMiLCJfQ2xpY2tBd2F5TGlzdGVuZXIiLCJfQ2xpY2tBd2F5TGlzdGVuZXIyIiwiX21lbnVVdGlscyIsIk1lbnUiLCJfaW5pdGlhbGlzZVByb3BzIiwiZmlsdGVyZWRDaGlsZHJlbiIsImdldEZpbHRlcmVkQ2hpbGRyZW4iLCJzZWxlY3RlZEluZGV4IiwiZ2V0TGFzdFNlbGVjdGVkSW5kZXgiLCJuZXdGb2N1c0luZGV4IiwiZGlzYWJsZUF1dG9Gb2N1cyIsIm9uTWVudUl0ZW1Gb2N1c0NoYW5nZSIsImZvY3VzSW5kZXgiLCJpbml0aWFsbHlLZXlib2FyZEZvY3VzZWQiLCJrZXlXaWR0aCIsImhvdEtleUhvbGRlciIsIkhvdEtleUhvbGRlciIsImF1dG9XaWR0aCIsInNldFdpZHRoIiwic2V0U2NvbGxQb3NpdGlvbiIsIm11bHRpcGxlIiwidmFsdWVMaW5rIiwicmVxdWVzdENoYW5nZSIsImtleWJvYXJkRm9jdXNlZCIsImNoaWxkSW5kZXgiLCJjaGlsZElzRGlzYWJsZWQiLCJzZWxlY3RlZENoaWxkU3R5bGVzIiwiaXNDaGlsZFNlbGVjdGVkIiwic2VsZWN0ZWRNZW51SXRlbVN0eWxlIiwibWVyZ2VkQ2hpbGRTdHlsZXMiLCJtZW51SXRlbVN0eWxlIiwiZXh0cmFQcm9wcyIsImlzRm9jdXNlZCIsImhhbmRsZU1lbnVJdGVtVG91Y2hUYXAiLCJzZXRGb2N1c0luZGV4IiwibWVudUl0ZW1Db3VudCIsImNoaWxkSXNBRGl2aWRlciIsIm1lbnVJdGVtSW5kZXgiLCJrZXlzIiwiZm91bmRJbmRleCIsImdldFZhbHVlTGluayIsIm1lbnVWYWx1ZSIsIml0ZW1WYWx1ZSIsIml0ZW1JbmRleCIsIl9tZW51VmFsdWUiLCJfbWVudVZhbHVlMiIsIm5ld01lbnVWYWx1ZSIsInNwbGljZSIsIm9uSXRlbVRvdWNoVGFwIiwibWF4SW5kZXgiLCJnZXRNZW51SXRlbUNvdW50IiwiY2hpbGRWYWx1ZSIsIm5ld0luZGV4IiwiZm9jdXNlZE1lbnVJdGVtIiwibWVudUl0ZW1IZWlnaHQiLCJzZWxlY3RlZE9mZlNldCIsIm9mZnNldFRvcCIsInNjcm9sbFRvcCIsInNjcm9sbENvbnRhaW5lciIsImVsIiwibGlzdEVsIiwiZWxXaWR0aCIsIm1pbldpZHRoIiwia2V5SW5jcmVtZW50cyIsIm5ld1dpZHRoIiwiY2VpbCIsIl90aGlzNCIsImxpc3RTdHlsZSIsIm9uRXNjS2V5RG93biIsIm1lcmdlZExpc3RTdHlsZXMiLCJuZXdDaGlsZHJlbiIsImNoaWxkTmFtZSIsIm5ld0NoaWxkIiwib25DbGlja0F3YXkiLCJoYW5kbGVDbGlja0F3YXkiLCJvbktleURvd24iLCJoYW5kbGVLZXlEb3duIiwib25XaGVlbCIsImhhbmRsZU9uV2hlZWwiLCJfdGhpczUiLCJkZWZhdWx0UHJldmVudGVkIiwiaW5jcmVtZW50S2V5Ym9hcmRGb2N1c0luZGV4Iiwic2hpZnRLZXkiLCJkZWNyZW1lbnRLZXlib2FyZEZvY3VzSW5kZXgiLCJob3RLZXlzIiwic2V0Rm9jdXNJbmRleFN0YXJ0c1dpdGgiLCJzY3JvbGxIZWlnaHQiLCJjbGllbnRIZWlnaHQiLCJ3aGVlbERlbHRhIiwiZGVsdGFZIiwiaXNEZWx0YVBvc2l0aXZlIiwiY2FuY2VsU2Nyb2xsRXZlbnQiLCIzMTQiLCJjbGVhciIsImxhc3RLZXlzIiwiMzE2IiwiX1JlbmRlclRvTGF5ZXIiLCJfUmVuZGVyVG9MYXllcjIiLCJfbG9kYXNoIiwiX2xvZGFzaDIiLCJfUG9wb3ZlckFuaW1hdGlvbkRlZmF1bHQiLCJfUG9wb3ZlckFuaW1hdGlvbkRlZmF1bHQyIiwiUG9wb3ZlciIsInJlbmRlckxheWVyIiwiX3RoaXMkcHJvcHMiLCJhbmltYXRlZCIsImF1dG9DbG9zZVdoZW5PZmZTY3JlZW4iLCJjYW5BdXRvUG9zaXRpb24iLCJzdHlsZVJvb3QiLCJwb3BvdmVyIiwiQW5pbWF0aW9uIiwiY2xvc2luZyIsImNvbXBvbmVudENsaWNrQXdheSIsInJlcXVlc3RDbG9zZSIsInNldFBsYWNlbWVudCIsInNjcm9sbGluZyIsImxheWVyIiwiZ2V0TGF5ZXIiLCJ0YXJnZXRFbCIsIl90aGlzJHByb3BzMiIsImFuY2hvciIsImdldEFuY2hvclBvc2l0aW9uIiwiZ2V0VGFyZ2V0UG9zaXRpb24iLCJ0YXJnZXRQb3NpdGlvbiIsImFwcGx5QXV0b1Bvc2l0aW9uSWZOZWVkZWQiLCJpbm5lckhlaWdodCIsImhhbmRsZVJlc2l6ZSIsImhhbmRsZVNjcm9sbCIsInJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJvZmZzZXRIZWlnaHQiLCJtaWRkbGUiLCJjZW50ZXIiLCJhbmNob3JQb3NpdGlvbiIsIm1lZGlhbiIsInQiLCJwb3NpdGlvbnMiLCJmaWx0ZXIiLCJwIiwieSIsIm92ZXJsYXAiLCJnZXRPdmVybGFwTW9kZSIsImFuY2hvclBvcyIsIl9nZXRQb3NpdGlvbnMiLCJnZXRQb3NpdGlvbnMiLCJuZXdUb3AiLCJuZXdMZWZ0Iiwic2Nyb2xsYWJsZUNvbnRhaW5lciIsIm9uU2Nyb2xsIiwib25SZXNpemUiLCIzMTciLCJ0cmFuc2Zvcm1PcmlnaW4iLCJQb3BvdmVyQW5pbWF0aW9uRGVmYXVsdCIsIjMxOSIsIlN1YmhlYWRlciIsImluc2V0Iiwic3ViaGVhZGVyIiwiYm94U2l6aW5nIiwiMzIwIiwiMzI3Iiwib3JpZ2luYWxCb2R5T3ZlcmZsb3ciLCJsb2NraW5nQ291bnRlciIsIkF1dG9Mb2NrU2Nyb2xsaW5nIiwibG9ja2VkIiwibG9jayIsInByZXZlbnRTY3JvbGxpbmciLCJhbGxvd1Njcm9sbGluZyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiMzI5IiwiX2V2ZW50cyIsIl9ldmVudHMyIiwiaXNEZXNjZW5kYW50IiwicGFyZW50Tm9kZSIsImNsaWNrQXdheUV2ZW50cyIsIm9uIiwidW5iaW5kIiwib2ZmIiwiQ2xpY2tBd2F5TGlzdGVuZXIiLCJpc0N1cnJlbnRseU1vdW50ZWQiLCJkb2N1bWVudEVsZW1lbnQiLCJjb250YWlucyIsIjMzMSIsIldlYmtpdFRhcEhpZ2hsaWdodENvbG9yIiwid2lsbENoYW5nZSIsIl9BdXRvTG9ja1Njcm9sbGluZyIsIl9BdXRvTG9ja1Njcm9sbGluZzIiLCJPdmVybGF5IiwiYXV0b0xvY2tTY3JvbGxpbmciLCIzMzIiLCJfZG9tIiwiX2RvbTIiLCJSZW5kZXJUb0xheWVyIiwidW5yZW5kZXJMYXllciIsInVubW91bnRDb21wb25lbnRBdE5vZGUiLCJyZW1vdmVDaGlsZCIsImFwcGVuZENoaWxkIiwibGF5ZXJFbGVtZW50IiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCIzNDIiLCJfcHVyZSIsIl9wdXJlMiIsIl9TdmdJY29uIiwiX1N2Z0ljb24yIiwiQXZBbGJ1bSIsImQiLCIzNDMiLCJBdlNraXBOZXh0IiwiMzQ0IiwiQXZTa2lwUHJldmlvdXMiLCIzNDciLCJOYXZpZ2F0aW9uQ2hlY2siLCIzNDgiLCJOYXZpZ2F0aW9uRXhwYW5kTGVzcyIsIjM0OSIsIk5hdmlnYXRpb25FeHBhbmRNb3JlIiwiMzUwIiwiTmF2aWdhdGlvbk1lbnUiLCI3NCIsInByb2Nlc3MiLCJzZXRDb250ZW50VHlwZUlmVW5zZXQiLCJub3JtYWxpemVIZWFkZXJOYW1lIiwiREVGQVVMVF9DT05URU5UX1RZUEUiLCJDb250ZW50LVR5cGUiLCJwYXJzZSIsIm1heENvbnRlbnRMZW5ndGgiLCJBY2NlcHQiXSwibWFwcGluZ3MiOiJBQUFBQSxjQUFjLElBRVJDLElBQ0EsU0FBVUMsRUFBUUMsRUFBU0MsR0NIakNGLEVBQUFDLFFBQUFDLEVBQUEsTURTTUMsSUFDQSxTQUFVSCxFQUFRQyxFQUFTQyxHQUVqQyxZRVZBLElBQUFFLEdBQUFGLEVBQUEsSUFDQUcsRUFBQUgsRUFBQSxLQUNBSSxFQUFBSixFQUFBLEtBQ0FLLEVBQUFMLEVBQUEsS0FDQU0sRUFBQU4sRUFBQSxLQUNBTyxFQUFBUCxFQUFBLEtBQ0FRLEVBQUEsbUJBQUFD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QUF6SixJQUNBZCxFQUFBb0ssT0FBQXRKLElBQ0FkLEVBQUFxSyxPQUFBdkosR0FFQUEsRUFFQWQsRUFBQTJKLGtCQUFBN0ksR0FDQUEsRUFBQWdKLE9BRUE5SixFQUFBeUssa0JBQUEzSixJQUNBc2hDLEVBQUFwaEMsRUFBQSxtREFDQUYsRUFBQStELFlBRUE3RSxFQUFBa0ssU0FBQXBKLElBQ0FzaEMsRUFBQXBoQyxFQUFBLGtDQUNBdVcsS0FBQUMsVUFBQTFXLElBRUFBLElBR0FnVixtQkFBQSxTQUFBaFYsR0FFQSxtQkFBQUEsR0FDQSxJQUNBQSxFQUFBeVcsS0FBQWlyQixNQUFBMWhDLEdBQ08sTUFBQStDLElBRVAsTUFBQS9DLEtBR0FxQixRQUFBLEVBRUFpQixlQUFBLGFBQ0FHLGVBQUEsZUFFQWsvQixrQkFBQSxFQUVBeHNCLGVBQUEsU0FBQTVULEdBQ0EsTUFBQUEsSUFBQSxLQUFBQSxFQUFBLEtBSUE2USxHQUFBbFMsU0FDQTRVLFFBQ0E4c0IsT0FBQSxzQ0FJQTFpQyxFQUFBd0QsU0FBQSxnQ0FBQXpCLEdBQ0FtUixFQUFBbFMsUUFBQWUsUUFHQS9CLEVBQUF3RCxTQUFBLCtCQUFBekIsR0FDQW1SLEVBQUFsUyxRQUFBZSxHQUFBL0IsRUFBQW1MLE1BQUFtM0IsS0FHQTFpQyxFQUFBQyxRQUFBcVQsSXpEMmpPNkIxSixLQUFLM0osRUFBU0MsRUFBb0IsUUFJNUQiLCJmaWxlIjoibWFpbmFwcC5idW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ3ZWJwYWNrSnNvbnAoWzBdLHtcblxuLyoqKi8gMTE0OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMTg5KTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDExNjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIHV0aWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOCk7XG52YXIgc2V0dGxlID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOTUpO1xudmFyIGJ1aWxkVVJMID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOTgpO1xudmFyIHBhcnNlSGVhZGVycyA9IF9fd2VicGFja19yZXF1aXJlX18oMjA0KTtcbnZhciBpc1VSTFNhbWVPcmlnaW4gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIwMik7XG52YXIgY3JlYXRlRXJyb3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExOSk7XG52YXIgYnRvYSA9ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuYnRvYSAmJiB3aW5kb3cuYnRvYS5iaW5kKHdpbmRvdykpIHx8IF9fd2VicGFja19yZXF1aXJlX18oMTk3KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB4aHJBZGFwdGVyKGNvbmZpZykge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gZGlzcGF0Y2hYaHJSZXF1ZXN0KHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciByZXF1ZXN0RGF0YSA9IGNvbmZpZy5kYXRhO1xuICAgIHZhciByZXF1ZXN0SGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzO1xuXG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEocmVxdWVzdERhdGEpKSB7XG4gICAgICBkZWxldGUgcmVxdWVzdEhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddOyAvLyBMZXQgdGhlIGJyb3dzZXIgc2V0IGl0XG4gICAgfVxuXG4gICAgdmFyIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICB2YXIgbG9hZEV2ZW50ID0gJ29ucmVhZHlzdGF0ZWNoYW5nZSc7XG4gICAgdmFyIHhEb21haW4gPSBmYWxzZTtcblxuICAgIC8vIEZvciBJRSA4LzkgQ09SUyBzdXBwb3J0XG4gICAgLy8gT25seSBzdXBwb3J0cyBQT1NUIGFuZCBHRVQgY2FsbHMgYW5kIGRvZXNuJ3QgcmV0dXJucyB0aGUgcmVzcG9uc2UgaGVhZGVycy5cbiAgICAvLyBET04nVCBkbyB0aGlzIGZvciB0ZXN0aW5nIGIvYyBYTUxIdHRwUmVxdWVzdCBpcyBtb2NrZWQsIG5vdCBYRG9tYWluUmVxdWVzdC5cbiAgICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09ICd0ZXN0JyAmJlxuICAgICAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICB3aW5kb3cuWERvbWFpblJlcXVlc3QgJiYgISgnd2l0aENyZWRlbnRpYWxzJyBpbiByZXF1ZXN0KSAmJlxuICAgICAgICAhaXNVUkxTYW1lT3JpZ2luKGNvbmZpZy51cmwpKSB7XG4gICAgICByZXF1ZXN0ID0gbmV3IHdpbmRvdy5YRG9tYWluUmVxdWVzdCgpO1xuICAgICAgbG9hZEV2ZW50ID0gJ29ubG9hZCc7XG4gICAgICB4RG9tYWluID0gdHJ1ZTtcbiAgICAgIHJlcXVlc3Qub25wcm9ncmVzcyA9IGZ1bmN0aW9uIGhhbmRsZVByb2dyZXNzKCkge307XG4gICAgICByZXF1ZXN0Lm9udGltZW91dCA9IGZ1bmN0aW9uIGhhbmRsZVRpbWVvdXQoKSB7fTtcbiAgICB9XG5cbiAgICAvLyBIVFRQIGJhc2ljIGF1dGhlbnRpY2F0aW9uXG4gICAgaWYgKGNvbmZpZy5hdXRoKSB7XG4gICAgICB2YXIgdXNlcm5hbWUgPSBjb25maWcuYXV0aC51c2VybmFtZSB8fCAnJztcbiAgICAgIHZhciBwYXNzd29yZCA9IGNvbmZpZy5hdXRoLnBhc3N3b3JkIHx8ICcnO1xuICAgICAgcmVxdWVzdEhlYWRlcnMuQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgYnRvYSh1c2VybmFtZSArICc6JyArIHBhc3N3b3JkKTtcbiAgICB9XG5cbiAgICByZXF1ZXN0Lm9wZW4oY29uZmlnLm1ldGhvZC50b1VwcGVyQ2FzZSgpLCBidWlsZFVSTChjb25maWcudXJsLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplciksIHRydWUpO1xuXG4gICAgLy8gU2V0IHRoZSByZXF1ZXN0IHRpbWVvdXQgaW4gTVNcbiAgICByZXF1ZXN0LnRpbWVvdXQgPSBjb25maWcudGltZW91dDtcblxuICAgIC8vIExpc3RlbiBmb3IgcmVhZHkgc3RhdGVcbiAgICByZXF1ZXN0W2xvYWRFdmVudF0gPSBmdW5jdGlvbiBoYW5kbGVMb2FkKCkge1xuICAgICAgaWYgKCFyZXF1ZXN0IHx8IChyZXF1ZXN0LnJlYWR5U3RhdGUgIT09IDQgJiYgIXhEb21haW4pKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gVGhlIHJlcXVlc3QgZXJyb3JlZCBvdXQgYW5kIHdlIGRpZG4ndCBnZXQgYSByZXNwb25zZSwgdGhpcyB3aWxsIGJlXG4gICAgICAvLyBoYW5kbGVkIGJ5IG9uZXJyb3IgaW5zdGVhZFxuICAgICAgLy8gV2l0aCBvbmUgZXhjZXB0aW9uOiByZXF1ZXN0IHRoYXQgdXNpbmcgZmlsZTogcHJvdG9jb2wsIG1vc3QgYnJvd3NlcnNcbiAgICAgIC8vIHdpbGwgcmV0dXJuIHN0YXR1cyBhcyAwIGV2ZW4gdGhvdWdoIGl0J3MgYSBzdWNjZXNzZnVsIHJlcXVlc3RcbiAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMCAmJiAhKHJlcXVlc3QucmVzcG9uc2VVUkwgJiYgcmVxdWVzdC5yZXNwb25zZVVSTC5pbmRleE9mKCdmaWxlOicpID09PSAwKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFByZXBhcmUgdGhlIHJlc3BvbnNlXG4gICAgICB2YXIgcmVzcG9uc2VIZWFkZXJzID0gJ2dldEFsbFJlc3BvbnNlSGVhZGVycycgaW4gcmVxdWVzdCA/IHBhcnNlSGVhZGVycyhyZXF1ZXN0LmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSA6IG51bGw7XG4gICAgICB2YXIgcmVzcG9uc2VEYXRhID0gIWNvbmZpZy5yZXNwb25zZVR5cGUgfHwgY29uZmlnLnJlc3BvbnNlVHlwZSA9PT0gJ3RleHQnID8gcmVxdWVzdC5yZXNwb25zZVRleHQgOiByZXF1ZXN0LnJlc3BvbnNlO1xuICAgICAgdmFyIHJlc3BvbnNlID0ge1xuICAgICAgICBkYXRhOiByZXNwb25zZURhdGEsXG4gICAgICAgIC8vIElFIHNlbmRzIDEyMjMgaW5zdGVhZCBvZiAyMDQgKGh0dHBzOi8vZ2l0aHViLmNvbS9temFicmlza2llL2F4aW9zL2lzc3Vlcy8yMDEpXG4gICAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMgPT09IDEyMjMgPyAyMDQgOiByZXF1ZXN0LnN0YXR1cyxcbiAgICAgICAgc3RhdHVzVGV4dDogcmVxdWVzdC5zdGF0dXMgPT09IDEyMjMgPyAnTm8gQ29udGVudCcgOiByZXF1ZXN0LnN0YXR1c1RleHQsXG4gICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlSGVhZGVycyxcbiAgICAgICAgY29uZmlnOiBjb25maWcsXG4gICAgICAgIHJlcXVlc3Q6IHJlcXVlc3RcbiAgICAgIH07XG5cbiAgICAgIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSBsb3cgbGV2ZWwgbmV0d29yayBlcnJvcnNcbiAgICByZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbiBoYW5kbGVFcnJvcigpIHtcbiAgICAgIC8vIFJlYWwgZXJyb3JzIGFyZSBoaWRkZW4gZnJvbSB1cyBieSB0aGUgYnJvd3NlclxuICAgICAgLy8gb25lcnJvciBzaG91bGQgb25seSBmaXJlIGlmIGl0J3MgYSBuZXR3b3JrIGVycm9yXG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoJ05ldHdvcmsgRXJyb3InLCBjb25maWcsIG51bGwsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSB0aW1lb3V0XG4gICAgcmVxdWVzdC5vbnRpbWVvdXQgPSBmdW5jdGlvbiBoYW5kbGVUaW1lb3V0KCkge1xuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCd0aW1lb3V0IG9mICcgKyBjb25maWcudGltZW91dCArICdtcyBleGNlZWRlZCcsIGNvbmZpZywgJ0VDT05OQUJPUlRFRCcsXG4gICAgICAgIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgIC8vIFRoaXMgaXMgb25seSBkb25lIGlmIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50LlxuICAgIC8vIFNwZWNpZmljYWxseSBub3QgaWYgd2UncmUgaW4gYSB3ZWIgd29ya2VyLCBvciByZWFjdC1uYXRpdmUuXG4gICAgaWYgKHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkpIHtcbiAgICAgIHZhciBjb29raWVzID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMDApO1xuXG4gICAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAgIHZhciB4c3JmVmFsdWUgPSAoY29uZmlnLndpdGhDcmVkZW50aWFscyB8fCBpc1VSTFNhbWVPcmlnaW4oY29uZmlnLnVybCkpICYmIGNvbmZpZy54c3JmQ29va2llTmFtZSA/XG4gICAgICAgICAgY29va2llcy5yZWFkKGNvbmZpZy54c3JmQ29va2llTmFtZSkgOlxuICAgICAgICAgIHVuZGVmaW5lZDtcblxuICAgICAgaWYgKHhzcmZWYWx1ZSkge1xuICAgICAgICByZXF1ZXN0SGVhZGVyc1tjb25maWcueHNyZkhlYWRlck5hbWVdID0geHNyZlZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEFkZCBoZWFkZXJzIHRvIHRoZSByZXF1ZXN0XG4gICAgaWYgKCdzZXRSZXF1ZXN0SGVhZGVyJyBpbiByZXF1ZXN0KSB7XG4gICAgICB1dGlscy5mb3JFYWNoKHJlcXVlc3RIZWFkZXJzLCBmdW5jdGlvbiBzZXRSZXF1ZXN0SGVhZGVyKHZhbCwga2V5KSB7XG4gICAgICAgIGlmICh0eXBlb2YgcmVxdWVzdERhdGEgPT09ICd1bmRlZmluZWQnICYmIGtleS50b0xvd2VyQ2FzZSgpID09PSAnY29udGVudC10eXBlJykge1xuICAgICAgICAgIC8vIFJlbW92ZSBDb250ZW50LVR5cGUgaWYgZGF0YSBpcyB1bmRlZmluZWRcbiAgICAgICAgICBkZWxldGUgcmVxdWVzdEhlYWRlcnNba2V5XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBPdGhlcndpc2UgYWRkIGhlYWRlciB0byB0aGUgcmVxdWVzdFxuICAgICAgICAgIHJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcihrZXksIHZhbCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIEFkZCB3aXRoQ3JlZGVudGlhbHMgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAoY29uZmlnLndpdGhDcmVkZW50aWFscykge1xuICAgICAgcmVxdWVzdC53aXRoQ3JlZGVudGlhbHMgPSB0cnVlO1xuICAgIH1cblxuICAgIC8vIEFkZCByZXNwb25zZVR5cGUgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAoY29uZmlnLnJlc3BvbnNlVHlwZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmVxdWVzdC5yZXNwb25zZVR5cGUgPSBjb25maWcucmVzcG9uc2VUeXBlO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBFeHBlY3RlZCBET01FeGNlcHRpb24gdGhyb3duIGJ5IGJyb3dzZXJzIG5vdCBjb21wYXRpYmxlIFhNTEh0dHBSZXF1ZXN0IExldmVsIDIuXG4gICAgICAgIC8vIEJ1dCwgdGhpcyBjYW4gYmUgc3VwcHJlc3NlZCBmb3IgJ2pzb24nIHR5cGUgYXMgaXQgY2FuIGJlIHBhcnNlZCBieSBkZWZhdWx0ICd0cmFuc2Zvcm1SZXNwb25zZScgZnVuY3Rpb24uXG4gICAgICAgIGlmIChjb25maWcucmVzcG9uc2VUeXBlICE9PSAnanNvbicpIHtcbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHByb2dyZXNzIGlmIG5lZWRlZFxuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIC8vIE5vdCBhbGwgYnJvd3NlcnMgc3VwcG9ydCB1cGxvYWQgZXZlbnRzXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25VcGxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJyAmJiByZXF1ZXN0LnVwbG9hZCkge1xuICAgICAgcmVxdWVzdC51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25VcGxvYWRQcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgICAgLy8gSGFuZGxlIGNhbmNlbGxhdGlvblxuICAgICAgY29uZmlnLmNhbmNlbFRva2VuLnByb21pc2UudGhlbihmdW5jdGlvbiBvbkNhbmNlbGVkKGNhbmNlbCkge1xuICAgICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICByZXF1ZXN0LmFib3J0KCk7XG4gICAgICAgIHJlamVjdChjYW5jZWwpO1xuICAgICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHJlcXVlc3REYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJlcXVlc3REYXRhID0gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBTZW5kIHRoZSByZXF1ZXN0XG4gICAgcmVxdWVzdC5zZW5kKHJlcXVlc3REYXRhKTtcbiAgfSk7XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyAxMTc6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8qKlxuICogQSBgQ2FuY2VsYCBpcyBhbiBvYmplY3QgdGhhdCBpcyB0aHJvd24gd2hlbiBhbiBvcGVyYXRpb24gaXMgY2FuY2VsZWQuXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge3N0cmluZz19IG1lc3NhZ2UgVGhlIG1lc3NhZ2UuXG4gKi9cbmZ1bmN0aW9uIENhbmNlbChtZXNzYWdlKSB7XG4gIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG59XG5cbkNhbmNlbC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuICdDYW5jZWwnICsgKHRoaXMubWVzc2FnZSA/ICc6ICcgKyB0aGlzLm1lc3NhZ2UgOiAnJyk7XG59O1xuXG5DYW5jZWwucHJvdG90eXBlLl9fQ0FOQ0VMX18gPSB0cnVlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbDtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMTE4OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQ2FuY2VsKHZhbHVlKSB7XG4gIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5fX0NBTkNFTF9fKTtcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDExOTpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIGVuaGFuY2VFcnJvciA9IF9fd2VicGFja19yZXF1aXJlX18oMTk0KTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIG1lc3NhZ2UsIGNvbmZpZywgZXJyb3IgY29kZSwgcmVxdWVzdCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgVGhlIGVycm9yIG1lc3NhZ2UuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGNyZWF0ZWQgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlRXJyb3IobWVzc2FnZSwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIHJldHVybiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpO1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMTIwOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJpbmQoZm4sIHRoaXNBcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpc0FyZywgYXJncyk7XG4gIH07XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyAxNDY6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kczIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKTtcblxudmFyIF9leHRlbmRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4dGVuZHMyKTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMik7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFByb3RvdHlwZU9mKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblxudmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yKTtcblxudmFyIF9pbmhlcml0czIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpO1xuXG52YXIgX2luaGVyaXRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2luaGVyaXRzMik7XG5cbnZhciBfc2ltcGxlQXNzaWduID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblxudmFyIF9zaW1wbGVBc3NpZ24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2ltcGxlQXNzaWduKTtcblxudmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfU3ViaGVhZGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMjApO1xuXG52YXIgX1N1YmhlYWRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TdWJoZWFkZXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgTGlzdCA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHMzLmRlZmF1bHQpKExpc3QsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIExpc3QoKSB7XG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgTGlzdCk7XG4gICAgcmV0dXJuICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMuZGVmYXVsdCkodGhpcywgKExpc3QuX19wcm90b19fIHx8ICgwLCBfZ2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKExpc3QpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKExpc3QsIFt7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgc3R5bGUgPSBfcHJvcHMuc3R5bGUsXG4gICAgICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMy5kZWZhdWx0KShfcHJvcHMsIFsnY2hpbGRyZW4nLCAnc3R5bGUnXSk7XG4gICAgICB2YXIgcHJlcGFyZVN0eWxlcyA9IHRoaXMuY29udGV4dC5tdWlUaGVtZS5wcmVwYXJlU3R5bGVzO1xuXG5cbiAgICAgIHZhciBoYXNTdWJoZWFkZXIgPSBmYWxzZTtcblxuICAgICAgdmFyIGZpcnN0Q2hpbGQgPSBfcmVhY3QuQ2hpbGRyZW4udG9BcnJheShjaGlsZHJlbilbMF07XG4gICAgICBpZiAoKDAsIF9yZWFjdC5pc1ZhbGlkRWxlbWVudCkoZmlyc3RDaGlsZCkgJiYgZmlyc3RDaGlsZC50eXBlID09PSBfU3ViaGVhZGVyMi5kZWZhdWx0KSB7XG4gICAgICAgIGhhc1N1YmhlYWRlciA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBzdHlsZXMgPSB7XG4gICAgICAgIHJvb3Q6IHtcbiAgICAgICAgICBwYWRkaW5nOiAoaGFzU3ViaGVhZGVyID8gMCA6IDgpICsgJ3B4IDBweCA4cHggMHB4J1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICAoMCwgX2V4dGVuZHMzLmRlZmF1bHQpKHt9LCBvdGhlciwgeyBzdHlsZTogcHJlcGFyZVN0eWxlcygoMCwgX3NpbXBsZUFzc2lnbjIuZGVmYXVsdCkoc3R5bGVzLnJvb3QsIHN0eWxlKSkgfSksXG4gICAgICAgIGNoaWxkcmVuXG4gICAgICApO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gTGlzdDtcbn0oX3JlYWN0LkNvbXBvbmVudCk7XG5cbkxpc3QuY29udGV4dFR5cGVzID0ge1xuICBtdWlUaGVtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZFxufTtcbkxpc3QucHJvcFR5cGVzID0gIGZhbHNlID8ge1xuICAvKipcbiAgICogVGhlc2UgYXJlIHVzdWFsbHkgYExpc3RJdGVtYHMgdGhhdCBhcmUgcGFzc2VkIHRvXG4gICAqIGJlIHBhcnQgb2YgdGhlIGxpc3QuXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlczIuZGVmYXVsdC5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgdGhlIGlubGluZS1zdHlsZXMgb2YgdGhlIHJvb3QgZWxlbWVudC5cbiAgICovXG4gIHN0eWxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdFxufSA6IHt9O1xuZXhwb3J0cy5kZWZhdWx0ID0gTGlzdDtcblxuLyoqKi8gfSksXG5cbi8qKiovIDE4OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgYmluZCA9IF9fd2VicGFja19yZXF1aXJlX18oMTIwKTtcbnZhciBpc0J1ZmZlciA9IF9fd2VicGFja19yZXF1aXJlX18oMjkyKTtcblxuLypnbG9iYWwgdG9TdHJpbmc6dHJ1ZSovXG5cbi8vIHV0aWxzIGlzIGEgbGlicmFyeSBvZiBnZW5lcmljIGhlbHBlciBmdW5jdGlvbnMgbm9uLXNwZWNpZmljIHRvIGF4aW9zXG5cbnZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXkodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEFycmF5XSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXIodmFsKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEFycmF5QnVmZmVyXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGb3JtRGF0YVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEZvcm1EYXRhLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGb3JtRGF0YSh2YWwpIHtcbiAgcmV0dXJuICh0eXBlb2YgRm9ybURhdGEgIT09ICd1bmRlZmluZWQnKSAmJiAodmFsIGluc3RhbmNlb2YgRm9ybURhdGEpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXJWaWV3KHZhbCkge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpICYmIChBcnJheUJ1ZmZlci5pc1ZpZXcpKSB7XG4gICAgcmVzdWx0ID0gQXJyYXlCdWZmZXIuaXNWaWV3KHZhbCk7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gKHZhbCkgJiYgKHZhbC5idWZmZXIpICYmICh2YWwuYnVmZmVyIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJpbmdcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmluZywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyaW5nKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZyc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBOdW1iZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIE51bWJlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTnVtYmVyKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ251bWJlcic7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgdW5kZWZpbmVkXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHZhbHVlIGlzIHVuZGVmaW5lZCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IG51bGwgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBEYXRlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBEYXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNEYXRlKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBEYXRlXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGaWxlXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGaWxlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGaWxlKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBGaWxlXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCbG9iXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCbG9iLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNCbG9iKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBCbG9iXSc7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGdW5jdGlvblxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRnVuY3Rpb24sIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyZWFtXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJlYW0sIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmVhbSh2YWwpIHtcbiAgcmV0dXJuIGlzT2JqZWN0KHZhbCkgJiYgaXNGdW5jdGlvbih2YWwucGlwZSk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNVUkxTZWFyY2hQYXJhbXModmFsKSB7XG4gIHJldHVybiB0eXBlb2YgVVJMU2VhcmNoUGFyYW1zICE9PSAndW5kZWZpbmVkJyAmJiB2YWwgaW5zdGFuY2VvZiBVUkxTZWFyY2hQYXJhbXM7XG59XG5cbi8qKlxuICogVHJpbSBleGNlc3Mgd2hpdGVzcGFjZSBvZmYgdGhlIGJlZ2lubmluZyBhbmQgZW5kIG9mIGEgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgU3RyaW5nIHRvIHRyaW1cbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBTdHJpbmcgZnJlZWQgb2YgZXhjZXNzIHdoaXRlc3BhY2VcbiAqL1xuZnVuY3Rpb24gdHJpbShzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzKi8sICcnKS5yZXBsYWNlKC9cXHMqJC8sICcnKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgd2UncmUgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnRcbiAqXG4gKiBUaGlzIGFsbG93cyBheGlvcyB0byBydW4gaW4gYSB3ZWIgd29ya2VyLCBhbmQgcmVhY3QtbmF0aXZlLlxuICogQm90aCBlbnZpcm9ubWVudHMgc3VwcG9ydCBYTUxIdHRwUmVxdWVzdCwgYnV0IG5vdCBmdWxseSBzdGFuZGFyZCBnbG9iYWxzLlxuICpcbiAqIHdlYiB3b3JrZXJzOlxuICogIHR5cGVvZiB3aW5kb3cgLT4gdW5kZWZpbmVkXG4gKiAgdHlwZW9mIGRvY3VtZW50IC0+IHVuZGVmaW5lZFxuICpcbiAqIHJlYWN0LW5hdGl2ZTpcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnUmVhY3ROYXRpdmUnXG4gKi9cbmZ1bmN0aW9uIGlzU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICBpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnByb2R1Y3QgPT09ICdSZWFjdE5hdGl2ZScpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIChcbiAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCdcbiAgKTtcbn1cblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYW4gQXJyYXkgb3IgYW4gT2JqZWN0IGludm9raW5nIGEgZnVuY3Rpb24gZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiBgb2JqYCBpcyBhbiBBcnJheSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGluZGV4LCBhbmQgY29tcGxldGUgYXJyYXkgZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiAnb2JqJyBpcyBhbiBPYmplY3QgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBrZXksIGFuZCBjb21wbGV0ZSBvYmplY3QgZm9yIGVhY2ggcHJvcGVydHkuXG4gKlxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IG9iaiBUaGUgb2JqZWN0IHRvIGl0ZXJhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBjYWxsYmFjayB0byBpbnZva2UgZm9yIGVhY2ggaXRlbVxuICovXG5mdW5jdGlvbiBmb3JFYWNoKG9iaiwgZm4pIHtcbiAgLy8gRG9uJ3QgYm90aGVyIGlmIG5vIHZhbHVlIHByb3ZpZGVkXG4gIGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBGb3JjZSBhbiBhcnJheSBpZiBub3QgYWxyZWFkeSBzb21ldGhpbmcgaXRlcmFibGVcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnICYmICFpc0FycmF5KG9iaikpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBvYmogPSBbb2JqXTtcbiAgfVxuXG4gIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgYXJyYXkgdmFsdWVzXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBvYmoubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIG9ialtpXSwgaSwgb2JqKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIG9iamVjdCBrZXlzXG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgZm4uY2FsbChudWxsLCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEFjY2VwdHMgdmFyYXJncyBleHBlY3RpbmcgZWFjaCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3QsIHRoZW5cbiAqIGltbXV0YWJseSBtZXJnZXMgdGhlIHByb3BlcnRpZXMgb2YgZWFjaCBvYmplY3QgYW5kIHJldHVybnMgcmVzdWx0LlxuICpcbiAqIFdoZW4gbXVsdGlwbGUgb2JqZWN0cyBjb250YWluIHRoZSBzYW1lIGtleSB0aGUgbGF0ZXIgb2JqZWN0IGluXG4gKiB0aGUgYXJndW1lbnRzIGxpc3Qgd2lsbCB0YWtlIHByZWNlZGVuY2UuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGBqc1xuICogdmFyIHJlc3VsdCA9IG1lcmdlKHtmb286IDEyM30sIHtmb286IDQ1Nn0pO1xuICogY29uc29sZS5sb2cocmVzdWx0LmZvbyk7IC8vIG91dHB1dHMgNDU2XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqMSBPYmplY3QgdG8gbWVyZ2VcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJlc3VsdCBvZiBhbGwgbWVyZ2UgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBtZXJnZSgvKiBvYmoxLCBvYmoyLCBvYmozLCAuLi4gKi8pIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0eXBlb2YgcmVzdWx0W2tleV0gPT09ICdvYmplY3QnICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXN1bHRba2V5XSA9IG1lcmdlKHJlc3VsdFtrZXldLCB2YWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbDtcbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBmb3JFYWNoKGFyZ3VtZW50c1tpXSwgYXNzaWduVmFsdWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRXh0ZW5kcyBvYmplY3QgYSBieSBtdXRhYmx5IGFkZGluZyB0byBpdCB0aGUgcHJvcGVydGllcyBvZiBvYmplY3QgYi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYSBUaGUgb2JqZWN0IHRvIGJlIGV4dGVuZGVkXG4gKiBAcGFyYW0ge09iamVjdH0gYiBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tXG4gKiBAcGFyYW0ge09iamVjdH0gdGhpc0FyZyBUaGUgb2JqZWN0IHRvIGJpbmQgZnVuY3Rpb24gdG9cbiAqIEByZXR1cm4ge09iamVjdH0gVGhlIHJlc3VsdGluZyB2YWx1ZSBvZiBvYmplY3QgYVxuICovXG5mdW5jdGlvbiBleHRlbmQoYSwgYiwgdGhpc0FyZykge1xuICBmb3JFYWNoKGIsIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKHRoaXNBcmcgJiYgdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgYVtrZXldID0gYmluZCh2YWwsIHRoaXNBcmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhW2tleV0gPSB2YWw7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGE7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpc0FycmF5OiBpc0FycmF5LFxuICBpc0FycmF5QnVmZmVyOiBpc0FycmF5QnVmZmVyLFxuICBpc0J1ZmZlcjogaXNCdWZmZXIsXG4gIGlzRm9ybURhdGE6IGlzRm9ybURhdGEsXG4gIGlzQXJyYXlCdWZmZXJWaWV3OiBpc0FycmF5QnVmZmVyVmlldyxcbiAgaXNTdHJpbmc6IGlzU3RyaW5nLFxuICBpc051bWJlcjogaXNOdW1iZXIsXG4gIGlzT2JqZWN0OiBpc09iamVjdCxcbiAgaXNVbmRlZmluZWQ6IGlzVW5kZWZpbmVkLFxuICBpc0RhdGU6IGlzRGF0ZSxcbiAgaXNGaWxlOiBpc0ZpbGUsXG4gIGlzQmxvYjogaXNCbG9iLFxuICBpc0Z1bmN0aW9uOiBpc0Z1bmN0aW9uLFxuICBpc1N0cmVhbTogaXNTdHJlYW0sXG4gIGlzVVJMU2VhcmNoUGFyYW1zOiBpc1VSTFNlYXJjaFBhcmFtcyxcbiAgaXNTdGFuZGFyZEJyb3dzZXJFbnY6IGlzU3RhbmRhcmRCcm93c2VyRW52LFxuICBmb3JFYWNoOiBmb3JFYWNoLFxuICBtZXJnZTogbWVyZ2UsXG4gIGV4dGVuZDogZXh0ZW5kLFxuICB0cmltOiB0cmltXG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyAxODE6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgSW5kZXggPSBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlQ2xhc3Moe1xuICAgIGRpc3BsYXlOYW1lOiAnSW5kZXgnLFxuXG4gICAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICdoMScsXG4gICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAnQmllbnZlbmlkbyBhIEJpbmRpZSEnXG4gICAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgfVxufSk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IEluZGV4O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMTgyOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9yZWFjdERvbSA9IF9fd2VicGFja19yZXF1aXJlX18oMTYpO1xuXG52YXIgX3JlYWN0RG9tMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0RG9tKTtcblxudmFyIF9GbGF0QnV0dG9uID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MSk7XG5cbnZhciBfRmxhdEJ1dHRvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9GbGF0QnV0dG9uKTtcblxudmFyIF9za2lwTmV4dCA9IF9fd2VicGFja19yZXF1aXJlX18oMzQzKTtcblxudmFyIF9za2lwTmV4dDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9za2lwTmV4dCk7XG5cbnZhciBfc2tpcFByZXZpb3VzID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNDQpO1xuXG52YXIgX3NraXBQcmV2aW91czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9za2lwUHJldmlvdXMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgU29uZ1BsYXllciA9IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVDbGFzcyh7XG4gICAgZGlzcGxheU5hbWU6ICdTb25nUGxheWVyJyxcblxuICAgIC8qKlxyXG4gICAgICogSW5kaWNhIHNpIGFjYXNvIHNlIGVzdGEgY2FyZ2FuZG8gbGEgc2lndWllbnRlL2FudGVyaW9yIGNhbmNpb24uXHJcbiAgICAgKi9cbiAgICBsb2FkaW5nU29uZzogZmFsc2UsXG5cbiAgICAvKipcclxuICAgICAqIFRpZW1wbyBkZSBlc3BlcmEgcGFyYSBjYXJnYXIgbGEgc2lndWllbnRlIC8gYW50ZXJpb3IgY2FuY2lvbi5cclxuICAgICAqL1xuICAgIHNvbmdMb2FkV2FpdDogMTAwMCxcblxuICAgIC8qKiBcclxuICAgICAqIHNvbmc6IGNhbmNpb24gYSByZXByb2R1Y2lyLlxyXG4gICAgICogbmV4dFNvbmc6IGNhbGxiYWNrIGRlIHNpZ3VpZW50ZSBjYW5jaW9uXHJcbiAgICAgKiBwcmV2U29uZzogY2FsbGJhY2sgZGUgYW50ZXJpb3IgY2FuY2lvblxyXG4gICAgICovXG4gICAgZ2V0RGVmYXVsdFByb3BzOiBmdW5jdGlvbiBnZXREZWZhdWx0UHJvcHMoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzb25nOiBudWxsLFxuICAgICAgICAgICAgbmV4dFNvbmc6IGZ1bmN0aW9uIG5leHRTb25nKCkge30sXG4gICAgICAgICAgICBwcmV2U29uZzogZnVuY3Rpb24gcHJldlNvbmcoKSB7fVxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICBvblNvbmdFbmQ6IGZ1bmN0aW9uIG9uU29uZ0VuZChlKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiU09ORyBFTkRFRCFcIik7XG4gICAgICAgIHRoaXMucHJvcHMubmV4dFNvbmcoKTtcbiAgICB9LFxuXG4gICAgZ2V0U29uZ1NyYzogZnVuY3Rpb24gZ2V0U29uZ1NyYyhzb25nKSB7XG4gICAgICAgIHJldHVybiAnL2FwaS9zb25nLycgKyBzb25nO1xuICAgIH0sXG5cbiAgICBjb21wb25lbnREaWRVcGRhdGU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMsIHByZXZTdGF0ZSkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIlNvbmdQbGF5ZXIgRElEIFVQREFURSFcIik7XG4gICAgICAgIHZhciBwcmV2U29uZyA9IHByZXZQcm9wcy5zb25nIHx8IFwiXCI7XG4gICAgICAgIHZhciBjdXJyU29uZyA9IHRoaXMucHJvcHMuc29uZyB8fCBcIlwiO1xuICAgICAgICBpZiAocHJldlNvbmcudmFsdWVPZigpICE9IGN1cnJTb25nLnZhbHVlT2YoKSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ3ByZXZTb25nOiAnICsgcHJldlNvbmcgKyAnIHwgY3VyclNvbmc6ICcgKyBjdXJyU29uZyk7XG4gICAgICAgICAgICB0aGlzLmF1ZGlvLnNyYyA9IHRoaXMuZ2V0U29uZ1NyYyhjdXJyU29uZyk7XG4gICAgICAgICAgICB0aGlzLmF1ZGlvLmxvYWQoKTtcbiAgICAgICAgICAgIHRoaXMuYXVkaW8ucGxheSgpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIG5leHRTb25nOiBmdW5jdGlvbiBuZXh0U29uZygpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICBpZiAodGhpcy5sb2FkaW5nU29uZykgcmV0dXJuO1xuXG4gICAgICAgIHRoaXMubG9hZGluZ1NvbmcgPSB0cnVlO1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBfdGhpcy5sb2FkaW5nU29uZyA9IGZhbHNlO1xuICAgICAgICAgICAgX3RoaXMucHJvcHMubmV4dFNvbmcoKTtcbiAgICAgICAgfSwgdGhpcy5zb25nTG9hZFdhaXQpO1xuICAgIH0sXG5cbiAgICBwcmV2U29uZzogZnVuY3Rpb24gcHJldlNvbmcoKSB7XG4gICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgIGNvbnNvbGUubG9nKCd0aGlzLmF1ZGlvLmN1cnJlbnRUaW1lOiAnICsgdGhpcy5hdWRpby5jdXJyZW50VGltZSk7XG4gICAgICAgIGlmICh0aGlzLmF1ZGlvLmN1cnJlbnRUaW1lIDwgMykge1xuICAgICAgICAgICAgaWYgKHRoaXMubG9hZGluZ1NvbmcpIHJldHVybjtcblxuICAgICAgICAgICAgdGhpcy5sb2FkaW5nU29uZyA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIF90aGlzMi5sb2FkaW5nU29uZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIF90aGlzMi5wcm9wcy5wcmV2U29uZygpO1xuICAgICAgICAgICAgfSwgdGhpcy5zb25nTG9hZFdhaXQpO1xuICAgICAgICB9IGVsc2UgdGhpcy5hdWRpby5jdXJyZW50VGltZSA9IDA7XG4gICAgfSxcblxuICAgIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJTb25nUGxheWVyIERJRCBNT1VOVCFcIik7XG4gICAgfSxcblxuICAgIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgICBpZiAodGhpcy5wcm9wcy5zb25nKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIlJFTkRFUklORyBTb25nUGxheWVyIVwiKTtcbiAgICAgICAgICAgIHZhciBzcmMgPSB0aGlzLmdldFNvbmdTcmModGhpcy5wcm9wcy5zb25nKTtcblxuICAgICAgICAgICAgdmFyIGlzRmlyZWZveCA9IHR5cGVvZiBJbnN0YWxsVHJpZ2dlciAhPT0gJ3VuZGVmaW5lZCc7XG4gICAgICAgICAgICB2YXIgYXVkaW9DdHJsU3R5bGUgPSB7XG4gICAgICAgICAgICAgICAgd2lkdGg6IFwiNTAlXCIsXG4gICAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiAwXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKGlzRmlyZWZveCkge1xuICAgICAgICAgICAgICAgIGF1ZGlvQ3RybFN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwiIzQ4NDg0OFwiO1xuICAgICAgICAgICAgICAgIGF1ZGlvQ3RybFN0eWxlLmNvbG9yID0gXCIjRkZGRkZGXCI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGF1ZGlvQ3RybFN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwiI2ZhZmFmYVwiO1xuICAgICAgICAgICAgICAgIGF1ZGlvQ3RybFN0eWxlLmNvbG9yID0gXCIjNWE1YTVhXCI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgICB7IHN0eWxlOiB7IHdpZHRoOiBcIjEwMCVcIiB9IH0sXG4gICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgICdhdWRpbycsXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZjogZnVuY3Rpb24gcmVmKGF1ZGlvKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMy5hdWRpbyA9IGF1ZGlvO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uRW5kZWQ6IHRoaXMub25Tb25nRW5kLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHsgd2lkdGg6IFwiMTAwJVwiIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sczogdHJ1ZSB9LFxuICAgICAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnc291cmNlJywgeyBzcmM6IHNyYywgdHlwZTogJ2F1ZGlvL21wZWcnIH0pLFxuICAgICAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgICdwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAnWW91ciBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgdGhlIGF1ZGlvIGVsZW1lbnQuJ1xuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgIHsgc3R5bGU6IHsgd2lkdGg6IFwiMTAwJVwiIH0gfSxcbiAgICAgICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0ZsYXRCdXR0b24yLmRlZmF1bHQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb246IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9za2lwUHJldmlvdXMyLmRlZmF1bHQsIG51bGwpLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IGF1ZGlvQ3RybFN0eWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljazogdGhpcy5wcmV2U29uZyB9KSxcbiAgICAgICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0ZsYXRCdXR0b24yLmRlZmF1bHQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb246IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9za2lwTmV4dDIuZGVmYXVsdCwgbnVsbCksXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogYXVkaW9DdHJsU3R5bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrOiB0aGlzLm5leHRTb25nIH0pXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cbn0pO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBTb25nUGxheWVyO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMTgzOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9yZWFjdERvbSA9IF9fd2VicGFja19yZXF1aXJlX18oMTYpO1xuXG52YXIgX3JlYWN0RG9tMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0RG9tKTtcblxudmFyIF9heGlvcyA9IF9fd2VicGFja19yZXF1aXJlX18oMTE0KTtcblxudmFyIF9heGlvczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9heGlvcyk7XG5cbnZhciBfRmxhdEJ1dHRvbiA9IF9fd2VicGFja19yZXF1aXJlX18oNzEpO1xuXG52YXIgX0ZsYXRCdXR0b24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfRmxhdEJ1dHRvbik7XG5cbnZhciBfYWxidW0gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM0Mik7XG5cbnZhciBfYWxidW0yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYWxidW0pO1xuXG52YXIgX1RleHRGaWVsZCA9IF9fd2VicGFja19yZXF1aXJlX18oMTE1KTtcblxudmFyIF9UZXh0RmllbGQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfVGV4dEZpZWxkKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIFNvbmdzQXBwID0gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUNsYXNzKHtcbiAgICBkaXNwbGF5TmFtZTogJ1NvbmdzQXBwJyxcblxuICAgIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24gZ2V0SW5pdGlhbFN0YXRlKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYmFuZDogbnVsbCxcbiAgICAgICAgICAgIHVwbG9hZFN1Y2NNc2c6IG51bGwsXG4gICAgICAgICAgICB1cGxvYWRFcnJNc2c6IG51bGxcbiAgICAgICAgfTtcbiAgICB9LFxuXG4gICAgdXBsb2FkRmlsZTogZnVuY3Rpb24gdXBsb2FkRmlsZShlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgdmFyIGZkID0gbmV3IEZvcm1EYXRhKCk7XG4gICAgICAgIHZhciBmaWxlID0gdGhpcy5maWxlSW5wdXQuZmlsZXNbMF07XG5cbiAgICAgICAgaWYgKGZpbGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQVJDSElWTyBBIFNVQklSOlwiKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGZpbGUpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1RJUE8gREVMIEFSQ0hJVk9cIjogJyArIGZpbGUudHlwZSk7XG5cbiAgICAgICAgICAgIC8qIFNJIEVMIFRJUE8gREUgQVJDSElWTyBFUyBNVVNJQ0EgRU5UT05DRVMgUFJPQ0VETyBBIFNVQklSIEVMIEFSQ0hJVk8gKi9cbiAgICAgICAgICAgIGlmIChmaWxlLnR5cGUgPT0gXCJhdWRpby9tcGVnXCIgfHwgZmlsZS50eXBlID09IFwiYXVkaW8vbXAzXCIpIHtcbiAgICAgICAgICAgICAgICBmZC5hcHBlbmQoJ2ZpbGUnLCBmaWxlKTtcbiAgICAgICAgICAgICAgICBmZC5hcHBlbmQoJ2ZvbycsICdiYXInKTtcblxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiVVBMT0FESU5HIEZJTEVcIik7XG5cbiAgICAgICAgICAgICAgICB2YXIgYmFuZCA9IHRoaXMuc3RhdGUuYmFuZDtcblxuICAgICAgICAgICAgICAgIHZhciBjb25maWcgPSB7XG4gICAgICAgICAgICAgICAgICAgIG9uVXBsb2FkUHJvZ3Jlc3M6IGZ1bmN0aW9uIG9uVXBsb2FkUHJvZ3Jlc3MocHJvZ3Jlc3NFdmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBlcmNlbnRDb21wbGV0ZWQgPSBNYXRoLnJvdW5kKHByb2dyZXNzRXZlbnQubG9hZGVkICogMTAwIC8gcHJvZ3Jlc3NFdmVudC50b3RhbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygncGVyY2VudGFnZTogJyArIHBlcmNlbnRDb21wbGV0ZWQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIF9heGlvczIuZGVmYXVsdC5wb3N0KCcvYXBpL3NvbmcvdXBsb2FkLycgKyBiYW5kLCBmZCwgY29uZmlnKS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cocmVzKTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgdXBsb2FkU3VjY01zZzogXCJDYW5jaW9uIHN1YmlkYSBleGl0b3NhbWVudGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwbG9hZEVyck1zZzogXCJcIlxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgdXBsb2FkU3VjY01zZzogXCJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwbG9hZEVyck1zZzogXCJFcnJvciBhbCBzdWJpciBjYW5jaW9uXCJcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8qIFNJIEVMIEFSQ0hJVk8gTk8gRVMgREUgTVVTSUNBIElORElDTyBVTiBNRU5TQUpFIERFIEVSUk9SICovXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIHVwbG9hZFN1Y2NNc2c6IFwiXCIsXG4gICAgICAgICAgICAgICAgICAgIHVwbG9hZEVyck1zZzogXCJFbCB0aXBvIGRlIGFyY2hpdm8gbm8gZXMgbXAzXCJcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGNvbnNvbGUubG9nKFwiTk8gU0UgSU5ESUNPIFVOIEFSQ0hJVk8gQSBTVUJJUlwiKTtcblxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfSxcblxuICAgIG9uQmFuZENoYW5nZTogZnVuY3Rpb24gb25CYW5kQ2hhbmdlKGUpIHtcbiAgICAgICAgdmFyIGJhbmQgPSBlLnRhcmdldC52YWx1ZTtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGJhbmQ6IGJhbmQgfSk7XG4gICAgfSxcblxuICAgIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgICB2YXIgc3R5bGVzID0ge1xuICAgICAgICAgICAgdXBsb2FkQnV0dG9uOiB7XG4gICAgICAgICAgICAgICAgdmVydGljYWxBbGlnbjogJ21pZGRsZSdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB1cGxvYWRJbnB1dDoge1xuICAgICAgICAgICAgICAgIGN1cnNvcjogJ3BvaW50ZXInLFxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgICAgICBib3R0b206IDAsXG4gICAgICAgICAgICAgICAgcmlnaHQ6IDAsXG4gICAgICAgICAgICAgICAgbGVmdDogMCxcbiAgICAgICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAvKiBTSSBOTyBTRSBJTkdSRVNPIFVOQSBCQU5EQSwgU0UgREVTSEFCSUxJVEEgRUwgQk9UT04gREUgU1VCSURBIERFIENBTkNJT05FUyAqL1xuICAgICAgICB2YXIgdXBsb2FkQnV0dG9uRGlzYWJsZWQgPSB0aGlzLnN0YXRlLmJhbmQgPyBmYWxzZSA6IHRydWU7XG5cbiAgICAgICAgdmFyIHN1Y2NNc2dFbGVtID0gdGhpcy5zdGF0ZS51cGxvYWRTdWNjTXNnID8gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAncCcsXG4gICAgICAgICAgICB7IHN0eWxlOiB7IGNvbG9yOiBcImdyZWVuXCIgfSB9LFxuICAgICAgICAgICAgdGhpcy5zdGF0ZS51cGxvYWRTdWNjTXNnXG4gICAgICAgICkgOiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgbnVsbCk7XG5cbiAgICAgICAgdmFyIGVyck1zZ0VsZW0gPSB0aGlzLnN0YXRlLnVwbG9hZEVyck1zZyA/IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ3AnLFxuICAgICAgICAgICAgeyBzdHlsZTogeyBjb2xvcjogXCJyZWRcIiB9IH0sXG4gICAgICAgICAgICB0aGlzLnN0YXRlLnVwbG9hZEVyck1zZ1xuICAgICAgICApIDogX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIG51bGwpO1xuXG4gICAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIHN1Y2NNc2dFbGVtLFxuICAgICAgICAgICAgZXJyTXNnRWxlbSxcbiAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9UZXh0RmllbGQyLmRlZmF1bHQsIHtcbiAgICAgICAgICAgICAgICBoaW50VGV4dDogJ0JhbmRhJyxcbiAgICAgICAgICAgICAgICBvbkNoYW5nZTogdGhpcy5vbkJhbmRDaGFuZ2UgfSksXG4gICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICBfRmxhdEJ1dHRvbjIuZGVmYXVsdCxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiAnU3ViaXIgdW5hIGNhbmNpb24nLFxuICAgICAgICAgICAgICAgICAgICBsYWJlbFBvc2l0aW9uOiAnYmVmb3JlJyxcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHN0eWxlcy51cGxvYWRCdXR0b24sXG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lckVsZW1lbnQ6ICdsYWJlbCcsXG4gICAgICAgICAgICAgICAgICAgIGljb246IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9hbGJ1bTIuZGVmYXVsdCwgbnVsbCksXG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVkOiB1cGxvYWRCdXR0b25EaXNhYmxlZCB9LFxuICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdpbnB1dCcsIHtcbiAgICAgICAgICAgICAgICAgICAgcmVmOiBmdW5jdGlvbiByZWYoZmkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzMi5maWxlSW5wdXQgPSBmaTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2ZpbGUnLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnc29uZycsXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ3VwbG9hZC1maWxlJyxcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHN0eWxlcy51cGxvYWRJbnB1dCxcbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U6IHRoaXMudXBsb2FkRmlsZSxcbiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ6IHVwbG9hZEJ1dHRvbkRpc2FibGVkIH0pXG4gICAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgfVxufSk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFNvbmdzQXBwO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMTg0OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdW5kZWZpbmVkO1xuXG52YXIgX0FwcEJhciA9IF9fd2VicGFja19yZXF1aXJlX18oMjk1KTtcblxudmFyIF9BcHBCYXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQXBwQmFyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gX0FwcEJhcjIuZGVmYXVsdDtcblxuLyoqKi8gfSksXG5cbi8qKiovIDE4Njpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHVuZGVmaW5lZDtcblxudmFyIF9EcmF3ZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMwNCk7XG5cbnZhciBfRHJhd2VyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0RyYXdlcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9EcmF3ZXIyLmRlZmF1bHQ7XG5cbi8qKiovIH0pLFxuXG4vKioqLyAxODc6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB1bmRlZmluZWQ7XG5cbnZhciBfTWVudUl0ZW0gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMxMik7XG5cbnZhciBfTWVudUl0ZW0yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTWVudUl0ZW0pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBfTWVudUl0ZW0yLmRlZmF1bHQ7XG5cbi8qKiovIH0pLFxuXG4vKioqLyAxODk6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciB1dGlscyA9IF9fd2VicGFja19yZXF1aXJlX18oMTgpO1xudmFyIGJpbmQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyMCk7XG52YXIgQXhpb3MgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE5MSk7XG52YXIgZGVmYXVsdHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDc0KTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZGVmYXVsdENvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICogQHJldHVybiB7QXhpb3N9IEEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRDb25maWcpIHtcbiAgdmFyIGNvbnRleHQgPSBuZXcgQXhpb3MoZGVmYXVsdENvbmZpZyk7XG4gIHZhciBpbnN0YW5jZSA9IGJpbmQoQXhpb3MucHJvdG90eXBlLnJlcXVlc3QsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgYXhpb3MucHJvdG90eXBlIHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgQXhpb3MucHJvdG90eXBlLCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGNvbnRleHQgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBjb250ZXh0KTtcblxuICByZXR1cm4gaW5zdGFuY2U7XG59XG5cbi8vIENyZWF0ZSB0aGUgZGVmYXVsdCBpbnN0YW5jZSB0byBiZSBleHBvcnRlZFxudmFyIGF4aW9zID0gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdHMpO1xuXG4vLyBFeHBvc2UgQXhpb3MgY2xhc3MgdG8gYWxsb3cgY2xhc3MgaW5oZXJpdGFuY2VcbmF4aW9zLkF4aW9zID0gQXhpb3M7XG5cbi8vIEZhY3RvcnkgZm9yIGNyZWF0aW5nIG5ldyBpbnN0YW5jZXNcbmF4aW9zLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpbnN0YW5jZUNvbmZpZykge1xuICByZXR1cm4gY3JlYXRlSW5zdGFuY2UodXRpbHMubWVyZ2UoZGVmYXVsdHMsIGluc3RhbmNlQ29uZmlnKSk7XG59O1xuXG4vLyBFeHBvc2UgQ2FuY2VsICYgQ2FuY2VsVG9rZW5cbmF4aW9zLkNhbmNlbCA9IF9fd2VicGFja19yZXF1aXJlX18oMTE3KTtcbmF4aW9zLkNhbmNlbFRva2VuID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOTApO1xuYXhpb3MuaXNDYW5jZWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExOCk7XG5cbi8vIEV4cG9zZSBhbGwvc3ByZWFkXG5heGlvcy5hbGwgPSBmdW5jdGlvbiBhbGwocHJvbWlzZXMpIHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbn07XG5heGlvcy5zcHJlYWQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIwNSk7XG5cbm1vZHVsZS5leHBvcnRzID0gYXhpb3M7XG5cbi8vIEFsbG93IHVzZSBvZiBkZWZhdWx0IGltcG9ydCBzeW50YXggaW4gVHlwZVNjcmlwdFxubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGF4aW9zO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyAxOTA6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBDYW5jZWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExNyk7XG5cbi8qKlxuICogQSBgQ2FuY2VsVG9rZW5gIGlzIGFuIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlcXVlc3QgY2FuY2VsbGF0aW9uIG9mIGFuIG9wZXJhdGlvbi5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGV4ZWN1dG9yIFRoZSBleGVjdXRvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsVG9rZW4oZXhlY3V0b3IpIHtcbiAgaWYgKHR5cGVvZiBleGVjdXRvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2V4ZWN1dG9yIG11c3QgYmUgYSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIHZhciByZXNvbHZlUHJvbWlzZTtcbiAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gcHJvbWlzZUV4ZWN1dG9yKHJlc29sdmUpIHtcbiAgICByZXNvbHZlUHJvbWlzZSA9IHJlc29sdmU7XG4gIH0pO1xuXG4gIHZhciB0b2tlbiA9IHRoaXM7XG4gIGV4ZWN1dG9yKGZ1bmN0aW9uIGNhbmNlbChtZXNzYWdlKSB7XG4gICAgaWYgKHRva2VuLnJlYXNvbikge1xuICAgICAgLy8gQ2FuY2VsbGF0aW9uIGhhcyBhbHJlYWR5IGJlZW4gcmVxdWVzdGVkXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdG9rZW4ucmVhc29uID0gbmV3IENhbmNlbChtZXNzYWdlKTtcbiAgICByZXNvbHZlUHJvbWlzZSh0b2tlbi5yZWFzb24pO1xuICB9KTtcbn1cblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5DYW5jZWxUb2tlbi5wcm90b3R5cGUudGhyb3dJZlJlcXVlc3RlZCA9IGZ1bmN0aW9uIHRocm93SWZSZXF1ZXN0ZWQoKSB7XG4gIGlmICh0aGlzLnJlYXNvbikge1xuICAgIHRocm93IHRoaXMucmVhc29uO1xuICB9XG59O1xuXG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IHRoYXQgY29udGFpbnMgYSBuZXcgYENhbmNlbFRva2VuYCBhbmQgYSBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCxcbiAqIGNhbmNlbHMgdGhlIGBDYW5jZWxUb2tlbmAuXG4gKi9cbkNhbmNlbFRva2VuLnNvdXJjZSA9IGZ1bmN0aW9uIHNvdXJjZSgpIHtcbiAgdmFyIGNhbmNlbDtcbiAgdmFyIHRva2VuID0gbmV3IENhbmNlbFRva2VuKGZ1bmN0aW9uIGV4ZWN1dG9yKGMpIHtcbiAgICBjYW5jZWwgPSBjO1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICB0b2tlbjogdG9rZW4sXG4gICAgY2FuY2VsOiBjYW5jZWxcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsVG9rZW47XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDE5MTpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIGRlZmF1bHRzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3NCk7XG52YXIgdXRpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4KTtcbnZhciBJbnRlcmNlcHRvck1hbmFnZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE5Mik7XG52YXIgZGlzcGF0Y2hSZXF1ZXN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOTMpO1xudmFyIGlzQWJzb2x1dGVVUkwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIwMSk7XG52YXIgY29tYmluZVVSTHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE5OSk7XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGluc3RhbmNlQ29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIEF4aW9zKGluc3RhbmNlQ29uZmlnKSB7XG4gIHRoaXMuZGVmYXVsdHMgPSBpbnN0YW5jZUNvbmZpZztcbiAgdGhpcy5pbnRlcmNlcHRvcnMgPSB7XG4gICAgcmVxdWVzdDogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpLFxuICAgIHJlc3BvbnNlOiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKClcbiAgfTtcbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcgc3BlY2lmaWMgZm9yIHRoaXMgcmVxdWVzdCAobWVyZ2VkIHdpdGggdGhpcy5kZWZhdWx0cylcbiAqL1xuQXhpb3MucHJvdG90eXBlLnJlcXVlc3QgPSBmdW5jdGlvbiByZXF1ZXN0KGNvbmZpZykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgLy8gQWxsb3cgZm9yIGF4aW9zKCdleGFtcGxlL3VybCdbLCBjb25maWddKSBhIGxhIGZldGNoIEFQSVxuICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25maWcgPSB1dGlscy5tZXJnZSh7XG4gICAgICB1cmw6IGFyZ3VtZW50c1swXVxuICAgIH0sIGFyZ3VtZW50c1sxXSk7XG4gIH1cblxuICBjb25maWcgPSB1dGlscy5tZXJnZShkZWZhdWx0cywgdGhpcy5kZWZhdWx0cywgeyBtZXRob2Q6ICdnZXQnIH0sIGNvbmZpZyk7XG4gIGNvbmZpZy5tZXRob2QgPSBjb25maWcubWV0aG9kLnRvTG93ZXJDYXNlKCk7XG5cbiAgLy8gU3VwcG9ydCBiYXNlVVJMIGNvbmZpZ1xuICBpZiAoY29uZmlnLmJhc2VVUkwgJiYgIWlzQWJzb2x1dGVVUkwoY29uZmlnLnVybCkpIHtcbiAgICBjb25maWcudXJsID0gY29tYmluZVVSTHMoY29uZmlnLmJhc2VVUkwsIGNvbmZpZy51cmwpO1xuICB9XG5cbiAgLy8gSG9vayB1cCBpbnRlcmNlcHRvcnMgbWlkZGxld2FyZVxuICB2YXIgY2hhaW4gPSBbZGlzcGF0Y2hSZXF1ZXN0LCB1bmRlZmluZWRdO1xuICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShjb25maWcpO1xuXG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlcXVlc3QuZm9yRWFjaChmdW5jdGlvbiB1bnNoaWZ0UmVxdWVzdEludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGNoYWluLnVuc2hpZnQoaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLmZvckVhY2goZnVuY3Rpb24gcHVzaFJlc3BvbnNlSW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgY2hhaW4ucHVzaChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgd2hpbGUgKGNoYWluLmxlbmd0aCkge1xuICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oY2hhaW4uc2hpZnQoKSwgY2hhaW4uc2hpZnQoKSk7XG4gIH1cblxuICByZXR1cm4gcHJvbWlzZTtcbn07XG5cbi8vIFByb3ZpZGUgYWxpYXNlcyBmb3Igc3VwcG9ydGVkIHJlcXVlc3QgbWV0aG9kc1xudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdvcHRpb25zJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHV0aWxzLm1lcmdlKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybFxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgZGF0YSwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh1dGlscy5tZXJnZShjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmwsXG4gICAgICBkYXRhOiBkYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQXhpb3M7XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDE5Mjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIHV0aWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOCk7XG5cbmZ1bmN0aW9uIEludGVyY2VwdG9yTWFuYWdlcigpIHtcbiAgdGhpcy5oYW5kbGVycyA9IFtdO1xufVxuXG4vKipcbiAqIEFkZCBhIG5ldyBpbnRlcmNlcHRvciB0byB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdWxmaWxsZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgdGhlbmAgZm9yIGEgYFByb21pc2VgXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3RlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGByZWplY3RgIGZvciBhIGBQcm9taXNlYFxuICpcbiAqIEByZXR1cm4ge051bWJlcn0gQW4gSUQgdXNlZCB0byByZW1vdmUgaW50ZXJjZXB0b3IgbGF0ZXJcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS51c2UgPSBmdW5jdGlvbiB1c2UoZnVsZmlsbGVkLCByZWplY3RlZCkge1xuICB0aGlzLmhhbmRsZXJzLnB1c2goe1xuICAgIGZ1bGZpbGxlZDogZnVsZmlsbGVkLFxuICAgIHJlamVjdGVkOiByZWplY3RlZFxuICB9KTtcbiAgcmV0dXJuIHRoaXMuaGFuZGxlcnMubGVuZ3RoIC0gMTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIGFuIGludGVyY2VwdG9yIGZyb20gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGlkIFRoZSBJRCB0aGF0IHdhcyByZXR1cm5lZCBieSBgdXNlYFxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmVqZWN0ID0gZnVuY3Rpb24gZWplY3QoaWQpIHtcbiAgaWYgKHRoaXMuaGFuZGxlcnNbaWRdKSB7XG4gICAgdGhpcy5oYW5kbGVyc1tpZF0gPSBudWxsO1xuICB9XG59O1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbGwgdGhlIHJlZ2lzdGVyZWQgaW50ZXJjZXB0b3JzXG4gKlxuICogVGhpcyBtZXRob2QgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3Igc2tpcHBpbmcgb3ZlciBhbnlcbiAqIGludGVyY2VwdG9ycyB0aGF0IG1heSBoYXZlIGJlY29tZSBgbnVsbGAgY2FsbGluZyBgZWplY3RgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGludGVyY2VwdG9yXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIGZvckVhY2goZm4pIHtcbiAgdXRpbHMuZm9yRWFjaCh0aGlzLmhhbmRsZXJzLCBmdW5jdGlvbiBmb3JFYWNoSGFuZGxlcihoKSB7XG4gICAgaWYgKGggIT09IG51bGwpIHtcbiAgICAgIGZuKGgpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEludGVyY2VwdG9yTWFuYWdlcjtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMTkzOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgdXRpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4KTtcbnZhciB0cmFuc2Zvcm1EYXRhID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOTYpO1xudmFyIGlzQ2FuY2VsID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMTgpO1xudmFyIGRlZmF1bHRzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3NCk7XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuZnVuY3Rpb24gdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpIHtcbiAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgIGNvbmZpZy5jYW5jZWxUb2tlbi50aHJvd0lmUmVxdWVzdGVkKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB1c2luZyB0aGUgY29uZmlndXJlZCBhZGFwdGVyLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIHRoZSByZXF1ZXN0XG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGlzcGF0Y2hSZXF1ZXN0KGNvbmZpZykge1xuICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgLy8gRW5zdXJlIGhlYWRlcnMgZXhpc3RcbiAgY29uZmlnLmhlYWRlcnMgPSBjb25maWcuaGVhZGVycyB8fCB7fTtcblxuICAvLyBUcmFuc2Zvcm0gcmVxdWVzdCBkYXRhXG4gIGNvbmZpZy5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICBjb25maWcuZGF0YSxcbiAgICBjb25maWcuaGVhZGVycyxcbiAgICBjb25maWcudHJhbnNmb3JtUmVxdWVzdFxuICApO1xuXG4gIC8vIEZsYXR0ZW4gaGVhZGVyc1xuICBjb25maWcuaGVhZGVycyA9IHV0aWxzLm1lcmdlKFxuICAgIGNvbmZpZy5oZWFkZXJzLmNvbW1vbiB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1tjb25maWcubWV0aG9kXSB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVycyB8fCB7fVxuICApO1xuXG4gIHV0aWxzLmZvckVhY2goXG4gICAgWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAncG9zdCcsICdwdXQnLCAncGF0Y2gnLCAnY29tbW9uJ10sXG4gICAgZnVuY3Rpb24gY2xlYW5IZWFkZXJDb25maWcobWV0aG9kKSB7XG4gICAgICBkZWxldGUgY29uZmlnLmhlYWRlcnNbbWV0aG9kXTtcbiAgICB9XG4gICk7XG5cbiAgdmFyIGFkYXB0ZXIgPSBjb25maWcuYWRhcHRlciB8fCBkZWZhdWx0cy5hZGFwdGVyO1xuXG4gIHJldHVybiBhZGFwdGVyKGNvbmZpZykudGhlbihmdW5jdGlvbiBvbkFkYXB0ZXJSZXNvbHV0aW9uKHJlc3BvbnNlKSB7XG4gICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICByZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICAgIHJlc3BvbnNlLmRhdGEsXG4gICAgICByZXNwb25zZS5oZWFkZXJzLFxuICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgKTtcblxuICAgIHJldHVybiByZXNwb25zZTtcbiAgfSwgZnVuY3Rpb24gb25BZGFwdGVyUmVqZWN0aW9uKHJlYXNvbikge1xuICAgIGlmICghaXNDYW5jZWwocmVhc29uKSkge1xuICAgICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgICAgaWYgKHJlYXNvbiAmJiByZWFzb24ucmVzcG9uc2UpIHtcbiAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhLFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5oZWFkZXJzLFxuICAgICAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChyZWFzb24pO1xuICB9KTtcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDE5NDpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuLyoqXG4gKiBVcGRhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIGNvbmZpZywgZXJyb3IgY29kZSwgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7RXJyb3J9IGVycm9yIFRoZSBlcnJvciB0byB1cGRhdGUuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICBlcnJvci5jb25maWcgPSBjb25maWc7XG4gIGlmIChjb2RlKSB7XG4gICAgZXJyb3IuY29kZSA9IGNvZGU7XG4gIH1cbiAgZXJyb3IucmVxdWVzdCA9IHJlcXVlc3Q7XG4gIGVycm9yLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gIHJldHVybiBlcnJvcjtcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDE5NTpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxudmFyIGNyZWF0ZUVycm9yID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMTkpO1xuXG4vKipcbiAqIFJlc29sdmUgb3IgcmVqZWN0IGEgUHJvbWlzZSBiYXNlZCBvbiByZXNwb25zZSBzdGF0dXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVzb2x2ZSBBIGZ1bmN0aW9uIHRoYXQgcmVzb2x2ZXMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3QgQSBmdW5jdGlvbiB0aGF0IHJlamVjdHMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKSB7XG4gIHZhciB2YWxpZGF0ZVN0YXR1cyA9IHJlc3BvbnNlLmNvbmZpZy52YWxpZGF0ZVN0YXR1cztcbiAgLy8gTm90ZTogc3RhdHVzIGlzIG5vdCBleHBvc2VkIGJ5IFhEb21haW5SZXF1ZXN0XG4gIGlmICghcmVzcG9uc2Uuc3RhdHVzIHx8ICF2YWxpZGF0ZVN0YXR1cyB8fCB2YWxpZGF0ZVN0YXR1cyhyZXNwb25zZS5zdGF0dXMpKSB7XG4gICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gIH0gZWxzZSB7XG4gICAgcmVqZWN0KGNyZWF0ZUVycm9yKFxuICAgICAgJ1JlcXVlc3QgZmFpbGVkIHdpdGggc3RhdHVzIGNvZGUgJyArIHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgIHJlc3BvbnNlLmNvbmZpZyxcbiAgICAgIG51bGwsXG4gICAgICByZXNwb25zZS5yZXF1ZXN0LFxuICAgICAgcmVzcG9uc2VcbiAgICApKTtcbiAgfVxufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMTk2OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgdXRpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4KTtcblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGhlIGRhdGEgZm9yIGEgcmVxdWVzdCBvciBhIHJlc3BvbnNlXG4gKlxuICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSBkYXRhIFRoZSBkYXRhIHRvIGJlIHRyYW5zZm9ybWVkXG4gKiBAcGFyYW0ge0FycmF5fSBoZWFkZXJzIFRoZSBoZWFkZXJzIGZvciB0aGUgcmVxdWVzdCBvciByZXNwb25zZVxuICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbn0gZm5zIEEgc2luZ2xlIGZ1bmN0aW9uIG9yIEFycmF5IG9mIGZ1bmN0aW9uc1xuICogQHJldHVybnMgeyp9IFRoZSByZXN1bHRpbmcgdHJhbnNmb3JtZWQgZGF0YVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHRyYW5zZm9ybURhdGEoZGF0YSwgaGVhZGVycywgZm5zKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICB1dGlscy5mb3JFYWNoKGZucywgZnVuY3Rpb24gdHJhbnNmb3JtKGZuKSB7XG4gICAgZGF0YSA9IGZuKGRhdGEsIGhlYWRlcnMpO1xuICB9KTtcblxuICByZXR1cm4gZGF0YTtcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDE5Nzpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuLy8gYnRvYSBwb2x5ZmlsbCBmb3IgSUU8MTAgY291cnRlc3kgaHR0cHM6Ly9naXRodWIuY29tL2RhdmlkY2hhbWJlcnMvQmFzZTY0LmpzXG5cbnZhciBjaGFycyA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPSc7XG5cbmZ1bmN0aW9uIEUoKSB7XG4gIHRoaXMubWVzc2FnZSA9ICdTdHJpbmcgY29udGFpbnMgYW4gaW52YWxpZCBjaGFyYWN0ZXInO1xufVxuRS5wcm90b3R5cGUgPSBuZXcgRXJyb3I7XG5FLnByb3RvdHlwZS5jb2RlID0gNTtcbkUucHJvdG90eXBlLm5hbWUgPSAnSW52YWxpZENoYXJhY3RlckVycm9yJztcblxuZnVuY3Rpb24gYnRvYShpbnB1dCkge1xuICB2YXIgc3RyID0gU3RyaW5nKGlucHV0KTtcbiAgdmFyIG91dHB1dCA9ICcnO1xuICBmb3IgKFxuICAgIC8vIGluaXRpYWxpemUgcmVzdWx0IGFuZCBjb3VudGVyXG4gICAgdmFyIGJsb2NrLCBjaGFyQ29kZSwgaWR4ID0gMCwgbWFwID0gY2hhcnM7XG4gICAgLy8gaWYgdGhlIG5leHQgc3RyIGluZGV4IGRvZXMgbm90IGV4aXN0OlxuICAgIC8vICAgY2hhbmdlIHRoZSBtYXBwaW5nIHRhYmxlIHRvIFwiPVwiXG4gICAgLy8gICBjaGVjayBpZiBkIGhhcyBubyBmcmFjdGlvbmFsIGRpZ2l0c1xuICAgIHN0ci5jaGFyQXQoaWR4IHwgMCkgfHwgKG1hcCA9ICc9JywgaWR4ICUgMSk7XG4gICAgLy8gXCI4IC0gaWR4ICUgMSAqIDhcIiBnZW5lcmF0ZXMgdGhlIHNlcXVlbmNlIDIsIDQsIDYsIDhcbiAgICBvdXRwdXQgKz0gbWFwLmNoYXJBdCg2MyAmIGJsb2NrID4+IDggLSBpZHggJSAxICogOClcbiAgKSB7XG4gICAgY2hhckNvZGUgPSBzdHIuY2hhckNvZGVBdChpZHggKz0gMyAvIDQpO1xuICAgIGlmIChjaGFyQ29kZSA+IDB4RkYpIHtcbiAgICAgIHRocm93IG5ldyBFKCk7XG4gICAgfVxuICAgIGJsb2NrID0gYmxvY2sgPDwgOCB8IGNoYXJDb2RlO1xuICB9XG4gIHJldHVybiBvdXRwdXQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYnRvYTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMTk4OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgdXRpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4KTtcblxuZnVuY3Rpb24gZW5jb2RlKHZhbCkge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkuXG4gICAgcmVwbGFjZSgvJTQwL2dpLCAnQCcpLlxuICAgIHJlcGxhY2UoLyUzQS9naSwgJzonKS5cbiAgICByZXBsYWNlKC8lMjQvZywgJyQnKS5cbiAgICByZXBsYWNlKC8lMkMvZ2ksICcsJykuXG4gICAgcmVwbGFjZSgvJTIwL2csICcrJykuXG4gICAgcmVwbGFjZSgvJTVCL2dpLCAnWycpLlxuICAgIHJlcGxhY2UoLyU1RC9naSwgJ10nKTtcbn1cblxuLyoqXG4gKiBCdWlsZCBhIFVSTCBieSBhcHBlbmRpbmcgcGFyYW1zIHRvIHRoZSBlbmRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBiYXNlIG9mIHRoZSB1cmwgKGUuZy4sIGh0dHA6Ly93d3cuZ29vZ2xlLmNvbSlcbiAqIEBwYXJhbSB7b2JqZWN0fSBbcGFyYW1zXSBUaGUgcGFyYW1zIHRvIGJlIGFwcGVuZGVkXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZm9ybWF0dGVkIHVybFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJ1aWxkVVJMKHVybCwgcGFyYW1zLCBwYXJhbXNTZXJpYWxpemVyKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICBpZiAoIXBhcmFtcykge1xuICAgIHJldHVybiB1cmw7XG4gIH1cblxuICB2YXIgc2VyaWFsaXplZFBhcmFtcztcbiAgaWYgKHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zU2VyaWFsaXplcihwYXJhbXMpO1xuICB9IGVsc2UgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKHBhcmFtcykpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zLnRvU3RyaW5nKCk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHBhcnRzID0gW107XG5cbiAgICB1dGlscy5mb3JFYWNoKHBhcmFtcywgZnVuY3Rpb24gc2VyaWFsaXplKHZhbCwga2V5KSB7XG4gICAgICBpZiAodmFsID09PSBudWxsIHx8IHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHV0aWxzLmlzQXJyYXkodmFsKSkge1xuICAgICAgICBrZXkgPSBrZXkgKyAnW10nO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXV0aWxzLmlzQXJyYXkodmFsKSkge1xuICAgICAgICB2YWwgPSBbdmFsXTtcbiAgICAgIH1cblxuICAgICAgdXRpbHMuZm9yRWFjaCh2YWwsIGZ1bmN0aW9uIHBhcnNlVmFsdWUodikge1xuICAgICAgICBpZiAodXRpbHMuaXNEYXRlKHYpKSB7XG4gICAgICAgICAgdiA9IHYudG9JU09TdHJpbmcoKTtcbiAgICAgICAgfSBlbHNlIGlmICh1dGlscy5pc09iamVjdCh2KSkge1xuICAgICAgICAgIHYgPSBKU09OLnN0cmluZ2lmeSh2KTtcbiAgICAgICAgfVxuICAgICAgICBwYXJ0cy5wdXNoKGVuY29kZShrZXkpICsgJz0nICsgZW5jb2RlKHYpKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcnRzLmpvaW4oJyYnKTtcbiAgfVxuXG4gIGlmIChzZXJpYWxpemVkUGFyYW1zKSB7XG4gICAgdXJsICs9ICh1cmwuaW5kZXhPZignPycpID09PSAtMSA/ICc/JyA6ICcmJykgKyBzZXJpYWxpemVkUGFyYW1zO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn07XG5cblxuLyoqKi8gfSksXG5cbi8qKiovIDE5OTpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIHNwZWNpZmllZCBVUkxzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVsYXRpdmVVUkwgVGhlIHJlbGF0aXZlIFVSTFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIFVSTFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlbGF0aXZlVVJMKSB7XG4gIHJldHVybiByZWxhdGl2ZVVSTFxuICAgID8gYmFzZVVSTC5yZXBsYWNlKC9cXC8rJC8sICcnKSArICcvJyArIHJlbGF0aXZlVVJMLnJlcGxhY2UoL15cXC8rLywgJycpXG4gICAgOiBiYXNlVVJMO1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMjAwOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgdXRpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4KTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBzdXBwb3J0IGRvY3VtZW50LmNvb2tpZVxuICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIHJldHVybiB7XG4gICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUobmFtZSwgdmFsdWUsIGV4cGlyZXMsIHBhdGgsIGRvbWFpbiwgc2VjdXJlKSB7XG4gICAgICAgIHZhciBjb29raWUgPSBbXTtcbiAgICAgICAgY29va2llLnB1c2gobmFtZSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpO1xuXG4gICAgICAgIGlmICh1dGlscy5pc051bWJlcihleHBpcmVzKSkge1xuICAgICAgICAgIGNvb2tpZS5wdXNoKCdleHBpcmVzPScgKyBuZXcgRGF0ZShleHBpcmVzKS50b0dNVFN0cmluZygpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhwYXRoKSkge1xuICAgICAgICAgIGNvb2tpZS5wdXNoKCdwYXRoPScgKyBwYXRoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhkb21haW4pKSB7XG4gICAgICAgICAgY29va2llLnB1c2goJ2RvbWFpbj0nICsgZG9tYWluKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzZWN1cmUgPT09IHRydWUpIHtcbiAgICAgICAgICBjb29raWUucHVzaCgnc2VjdXJlJyk7XG4gICAgICAgIH1cblxuICAgICAgICBkb2N1bWVudC5jb29raWUgPSBjb29raWUuam9pbignOyAnKTtcbiAgICAgIH0sXG5cbiAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQobmFtZSkge1xuICAgICAgICB2YXIgbWF0Y2ggPSBkb2N1bWVudC5jb29raWUubWF0Y2gobmV3IFJlZ0V4cCgnKF58O1xcXFxzKikoJyArIG5hbWUgKyAnKT0oW147XSopJykpO1xuICAgICAgICByZXR1cm4gKG1hdGNoID8gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzNdKSA6IG51bGwpO1xuICAgICAgfSxcblxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUobmFtZSkge1xuICAgICAgICB0aGlzLndyaXRlKG5hbWUsICcnLCBEYXRlLm5vdygpIC0gODY0MDAwMDApO1xuICAgICAgfVxuICAgIH07XG4gIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudiAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKCkge30sXG4gICAgICByZWFkOiBmdW5jdGlvbiByZWFkKCkgeyByZXR1cm4gbnVsbDsgfSxcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICB9O1xuICB9KSgpXG4pO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyAyMDE6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgVVJMIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0Fic29sdXRlVVJMKHVybCkge1xuICAvLyBBIFVSTCBpcyBjb25zaWRlcmVkIGFic29sdXRlIGlmIGl0IGJlZ2lucyB3aXRoIFwiPHNjaGVtZT46Ly9cIiBvciBcIi8vXCIgKHByb3RvY29sLXJlbGF0aXZlIFVSTCkuXG4gIC8vIFJGQyAzOTg2IGRlZmluZXMgc2NoZW1lIG5hbWUgYXMgYSBzZXF1ZW5jZSBvZiBjaGFyYWN0ZXJzIGJlZ2lubmluZyB3aXRoIGEgbGV0dGVyIGFuZCBmb2xsb3dlZFxuICAvLyBieSBhbnkgY29tYmluYXRpb24gb2YgbGV0dGVycywgZGlnaXRzLCBwbHVzLCBwZXJpb2QsIG9yIGh5cGhlbi5cbiAgcmV0dXJuIC9eKFthLXpdW2EtelxcZFxcK1xcLVxcLl0qOik/XFwvXFwvL2kudGVzdCh1cmwpO1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMjAyOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG52YXIgdXRpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4KTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBoYXZlIGZ1bGwgc3VwcG9ydCBvZiB0aGUgQVBJcyBuZWVkZWQgdG8gdGVzdFxuICAvLyB3aGV0aGVyIHRoZSByZXF1ZXN0IFVSTCBpcyBvZiB0aGUgc2FtZSBvcmlnaW4gYXMgY3VycmVudCBsb2NhdGlvbi5cbiAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICB2YXIgbXNpZSA9IC8obXNpZXx0cmlkZW50KS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgdmFyIHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgIHZhciBvcmlnaW5VUkw7XG5cbiAgICAvKipcbiAgICAqIFBhcnNlIGEgVVJMIHRvIGRpc2NvdmVyIGl0J3MgY29tcG9uZW50c1xuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgVGhlIFVSTCB0byBiZSBwYXJzZWRcbiAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgKi9cbiAgICBmdW5jdGlvbiByZXNvbHZlVVJMKHVybCkge1xuICAgICAgdmFyIGhyZWYgPSB1cmw7XG5cbiAgICAgIGlmIChtc2llKSB7XG4gICAgICAgIC8vIElFIG5lZWRzIGF0dHJpYnV0ZSBzZXQgdHdpY2UgdG8gbm9ybWFsaXplIHByb3BlcnRpZXNcbiAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG4gICAgICAgIGhyZWYgPSB1cmxQYXJzaW5nTm9kZS5ocmVmO1xuICAgICAgfVxuXG4gICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcblxuICAgICAgLy8gdXJsUGFyc2luZ05vZGUgcHJvdmlkZXMgdGhlIFVybFV0aWxzIGludGVyZmFjZSAtIGh0dHA6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmx1dGlsc1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaHJlZjogdXJsUGFyc2luZ05vZGUuaHJlZixcbiAgICAgICAgcHJvdG9jb2w6IHVybFBhcnNpbmdOb2RlLnByb3RvY29sID8gdXJsUGFyc2luZ05vZGUucHJvdG9jb2wucmVwbGFjZSgvOiQvLCAnJykgOiAnJyxcbiAgICAgICAgaG9zdDogdXJsUGFyc2luZ05vZGUuaG9zdCxcbiAgICAgICAgc2VhcmNoOiB1cmxQYXJzaW5nTm9kZS5zZWFyY2ggPyB1cmxQYXJzaW5nTm9kZS5zZWFyY2gucmVwbGFjZSgvXlxcPy8sICcnKSA6ICcnLFxuICAgICAgICBoYXNoOiB1cmxQYXJzaW5nTm9kZS5oYXNoID8gdXJsUGFyc2luZ05vZGUuaGFzaC5yZXBsYWNlKC9eIy8sICcnKSA6ICcnLFxuICAgICAgICBob3N0bmFtZTogdXJsUGFyc2luZ05vZGUuaG9zdG5hbWUsXG4gICAgICAgIHBvcnQ6IHVybFBhcnNpbmdOb2RlLnBvcnQsXG4gICAgICAgIHBhdGhuYW1lOiAodXJsUGFyc2luZ05vZGUucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycpID9cbiAgICAgICAgICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lIDpcbiAgICAgICAgICAgICAgICAgICcvJyArIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lXG4gICAgICB9O1xuICAgIH1cblxuICAgIG9yaWdpblVSTCA9IHJlc29sdmVVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuXG4gICAgLyoqXG4gICAgKiBEZXRlcm1pbmUgaWYgYSBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiBhcyB0aGUgY3VycmVudCBsb2NhdGlvblxuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0VVJMIFRoZSBVUkwgdG8gdGVzdFxuICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4sIG90aGVyd2lzZSBmYWxzZVxuICAgICovXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbihyZXF1ZXN0VVJMKSB7XG4gICAgICB2YXIgcGFyc2VkID0gKHV0aWxzLmlzU3RyaW5nKHJlcXVlc3RVUkwpKSA/IHJlc29sdmVVUkwocmVxdWVzdFVSTCkgOiByZXF1ZXN0VVJMO1xuICAgICAgcmV0dXJuIChwYXJzZWQucHJvdG9jb2wgPT09IG9yaWdpblVSTC5wcm90b2NvbCAmJlxuICAgICAgICAgICAgcGFyc2VkLmhvc3QgPT09IG9yaWdpblVSTC5ob3N0KTtcbiAgICB9O1xuICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnZzICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4oKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICB9KSgpXG4pO1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyAyMDM6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciB1dGlscyA9IF9fd2VicGFja19yZXF1aXJlX18oMTgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgbm9ybWFsaXplZE5hbWUpIHtcbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLCBmdW5jdGlvbiBwcm9jZXNzSGVhZGVyKHZhbHVlLCBuYW1lKSB7XG4gICAgaWYgKG5hbWUgIT09IG5vcm1hbGl6ZWROYW1lICYmIG5hbWUudG9VcHBlckNhc2UoKSA9PT0gbm9ybWFsaXplZE5hbWUudG9VcHBlckNhc2UoKSkge1xuICAgICAgaGVhZGVyc1tub3JtYWxpemVkTmFtZV0gPSB2YWx1ZTtcbiAgICAgIGRlbGV0ZSBoZWFkZXJzW25hbWVdO1xuICAgIH1cbiAgfSk7XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyAyMDQ6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciB1dGlscyA9IF9fd2VicGFja19yZXF1aXJlX18oMTgpO1xuXG4vKipcbiAqIFBhcnNlIGhlYWRlcnMgaW50byBhbiBvYmplY3RcbiAqXG4gKiBgYGBcbiAqIERhdGU6IFdlZCwgMjcgQXVnIDIwMTQgMDg6NTg6NDkgR01UXG4gKiBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25cbiAqIENvbm5lY3Rpb246IGtlZXAtYWxpdmVcbiAqIFRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gaGVhZGVycyBIZWFkZXJzIG5lZWRpbmcgdG8gYmUgcGFyc2VkXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBIZWFkZXJzIHBhcnNlZCBpbnRvIGFuIG9iamVjdFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhcnNlSGVhZGVycyhoZWFkZXJzKSB7XG4gIHZhciBwYXJzZWQgPSB7fTtcbiAgdmFyIGtleTtcbiAgdmFyIHZhbDtcbiAgdmFyIGk7XG5cbiAgaWYgKCFoZWFkZXJzKSB7IHJldHVybiBwYXJzZWQ7IH1cblxuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMuc3BsaXQoJ1xcbicpLCBmdW5jdGlvbiBwYXJzZXIobGluZSkge1xuICAgIGkgPSBsaW5lLmluZGV4T2YoJzonKTtcbiAgICBrZXkgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKDAsIGkpKS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhbCA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoaSArIDEpKTtcblxuICAgIGlmIChrZXkpIHtcbiAgICAgIHBhcnNlZFtrZXldID0gcGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSArICcsICcgKyB2YWwgOiB2YWw7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcGFyc2VkO1xufTtcblxuXG4vKioqLyB9KSxcblxuLyoqKi8gMjA1OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG4vKipcbiAqIFN5bnRhY3RpYyBzdWdhciBmb3IgaW52b2tpbmcgYSBmdW5jdGlvbiBhbmQgZXhwYW5kaW5nIGFuIGFycmF5IGZvciBhcmd1bWVudHMuXG4gKlxuICogQ29tbW9uIHVzZSBjYXNlIHdvdWxkIGJlIHRvIHVzZSBgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5YC5cbiAqXG4gKiAgYGBganNcbiAqICBmdW5jdGlvbiBmKHgsIHksIHopIHt9XG4gKiAgdmFyIGFyZ3MgPSBbMSwgMiwgM107XG4gKiAgZi5hcHBseShudWxsLCBhcmdzKTtcbiAqICBgYGBcbiAqXG4gKiBXaXRoIGBzcHJlYWRgIHRoaXMgZXhhbXBsZSBjYW4gYmUgcmUtd3JpdHRlbi5cbiAqXG4gKiAgYGBganNcbiAqICBzcHJlYWQoZnVuY3Rpb24oeCwgeSwgeikge30pKFsxLCAyLCAzXSk7XG4gKiAgYGBgXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzcHJlYWQoY2FsbGJhY2spIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoYXJyKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFycik7XG4gIH07XG59O1xuXG5cbi8qKiovIH0pLFxuXG4vKioqLyAyMDc6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbnZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9yZWFjdERvbSA9IF9fd2VicGFja19yZXF1aXJlX18oMTYpO1xuXG52YXIgX3JlYWN0RG9tMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0RG9tKTtcblxudmFyIF9NdWlUaGVtZVByb3ZpZGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3Mik7XG5cbnZhciBfTXVpVGhlbWVQcm92aWRlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9NdWlUaGVtZVByb3ZpZGVyKTtcblxudmFyIF9BcHBCYXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4NCk7XG5cbnZhciBfQXBwQmFyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0FwcEJhcik7XG5cbnZhciBfRHJhd2VyID0gX193ZWJwYWNrX3JlcXVpcmVfXygxODYpO1xuXG52YXIgX0RyYXdlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9EcmF3ZXIpO1xuXG52YXIgX01lbnVJdGVtID0gX193ZWJwYWNrX3JlcXVpcmVfXygxODcpO1xuXG52YXIgX01lbnVJdGVtMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX01lbnVJdGVtKTtcblxudmFyIF9heGlvcyA9IF9fd2VicGFja19yZXF1aXJlX18oMTE0KTtcblxudmFyIF9heGlvczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9heGlvcyk7XG5cbnZhciBfSW5kZXggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4MSk7XG5cbnZhciBfSW5kZXgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfSW5kZXgpO1xuXG52YXIgX1NvbmdzQXBwID0gX193ZWJwYWNrX3JlcXVpcmVfXygxODMpO1xuXG52YXIgX1NvbmdzQXBwMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1NvbmdzQXBwKTtcblxudmFyIF9Tb25nUGxheWVyID0gX193ZWJwYWNrX3JlcXVpcmVfXygxODIpO1xuXG52YXIgX1NvbmdQbGF5ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU29uZ1BsYXllcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8qIEVTVEUgRlJBR01FTlRPIERFIENPRElHTyBFUyBSRVFVRVJJRE8gUEFSQSBMT1MgRVZFTlRPUyBERSBUSVBPIFRPVUNIIE8gQ0xJQ0sgRU4gQ09NUE9ORU5URVMgTUFURVJJQUwtVUkgKi9cbnZhciBpbmplY3RUYXBFdmVudFBsdWdpbiA9IF9fd2VicGFja19yZXF1aXJlX18oNzMpO1xuaW5qZWN0VGFwRXZlbnRQbHVnaW4oKTtcbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cbi8qIFBBR0lOQVMgVVNBREFTIFBBUkEgRUwgRU5SVVRBTUlFTlRPICovXG52YXIgUEFHRVMgPSB7XG4gICAgaW5kZXg6IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9JbmRleDIuZGVmYXVsdCwgbnVsbCksXG4gICAgc29uZ3M6IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9Tb25nc0FwcDIuZGVmYXVsdCwgbnVsbClcbn07XG5cbnZhciBNYWluQXBwID0gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUNsYXNzKHtcbiAgICBkaXNwbGF5TmFtZTogJ01haW5BcHAnLFxuXG4gICAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbiBnZXRJbml0aWFsU3RhdGUoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjdXJyUGFnZTogJ2luZGV4JyxcbiAgICAgICAgICAgIGRyYXdlck9wZW46IGZhbHNlLFxuICAgICAgICAgICAgc29uZ0luZGV4OiAwLFxuICAgICAgICAgICAgcGxheWxpc3Q6IFtdXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIGFwcEJhckxlZnRUYXA6IGZ1bmN0aW9uIGFwcEJhckxlZnRUYXAoKSB7XG4gICAgICAgIHZhciBkcmF3ZXJPcGVuID0gdGhpcy5zdGF0ZS5kcmF3ZXJPcGVuO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgZHJhd2VyT3BlbjogIWRyYXdlck9wZW4gfSk7XG4gICAgfSxcblxuICAgIC8qIEVzdGEgZnVuY2lvbiBzZSBlamVjdXRhcmEgY2FkYSB2ZXogcXVlIHNlIHNvbGljaXRlIGNhbWJpYXIgZWwgZXN0YWRvIGRlIGxhIGJhcnJhLiAqL1xuICAgIG9uRHJhd2VyUmVxdWVzdENoYW5nZTogZnVuY3Rpb24gb25EcmF3ZXJSZXF1ZXN0Q2hhbmdlKG9wZW4pIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGRyYXdlck9wZW46IG9wZW4gfSk7XG4gICAgfSxcblxuICAgIGdvdG9QYWdlOiBmdW5jdGlvbiBnb3RvUGFnZShwYWdlKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiR09JTkcgVE8gUEFHRTogXCIgKyBwYWdlKTtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGN1cnJQYWdlOiBwYWdlLCBkcmF3ZXJPcGVuOiBmYWxzZSB9KTtcbiAgICB9LFxuXG4gICAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgIC8qIFNFIENBUkdBTiBMQVMgQ0FOQ0lPTkVTIERFU1BVRVMgUVVFIEVMIENPTVBPTkVOVEUgSEFZQSBTSURPIE1PTlRBRE8gKi9cbiAgICAgICAgY29uc29sZS5sb2coXCJNYWluQXBwIERJRCBNT1VOVCFcIik7XG5cbiAgICAgICAgX2F4aW9zMi5kZWZhdWx0LnBvc3QoJy9hcGkvYWxsU29uZ3MnKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgdmFyIGRhdGEgPSByZXNwb25zZS5kYXRhO1xuICAgICAgICAgICAgaWYgKGRhdGEuZXJyKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGFsIG9idGVuZXIgbGFzIGNhbmNpb25lc1wiKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0NBUkdBTkRPIFBMQVlMSVNUOiBbJyArIGRhdGEuc29uZ3MgKyAnXScpO1xuICAgICAgICAgICAgICAgIF90aGlzLnNldFN0YXRlKHsgcGxheWxpc3Q6IGRhdGEuc29uZ3MgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICBuZXh0U29uZzogZnVuY3Rpb24gbmV4dFNvbmcoKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlLnBsYXlsaXN0Lmxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIHNvbmdJbmRleCA9ICh0aGlzLnN0YXRlLnNvbmdJbmRleCArIDEpICUgdGhpcy5zdGF0ZS5wbGF5bGlzdC5sZW5ndGg7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgc29uZ0luZGV4OiBzb25nSW5kZXggfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgc29uZ0luZGV4OiAwIH0pO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIHByZXZTb25nOiBmdW5jdGlvbiBwcmV2U29uZygpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUucGxheWxpc3QubGVuZ3RoKSB7XG4gICAgICAgICAgICB2YXIgc29uZ0luZGV4ID0gdGhpcy5zdGF0ZS5zb25nSW5kZXggLSAxO1xuICAgICAgICAgICAgc29uZ0luZGV4ID0gc29uZ0luZGV4IDwgMCA/IHRoaXMuc3RhdGUucGxheWxpc3QubGVuZ3RoIC0gMSA6IHNvbmdJbmRleDtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBzb25nSW5kZXg6IHNvbmdJbmRleCB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBzb25nSW5kZXg6IDAgfSk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgIGNvbnNvbGUubG9nKFwiUkVOREVSSU5HIE1haW5BcHAhXCIpO1xuICAgICAgICB2YXIgY3VycmVudFBhZ2UgPSBQQUdFU1t0aGlzLnN0YXRlLmN1cnJQYWdlXTtcblxuICAgICAgICB2YXIgc29uZyA9IHRoaXMuc3RhdGUucGxheWxpc3RbdGhpcy5zdGF0ZS5zb25nSW5kZXhdO1xuICAgICAgICB2YXIgc29uZ1BsYXllciA9IHNvbmcgPyBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfU29uZ1BsYXllcjIuZGVmYXVsdCwge1xuICAgICAgICAgICAgbmV4dFNvbmc6IHRoaXMubmV4dFNvbmcsXG4gICAgICAgICAgICBwcmV2U29uZzogdGhpcy5wcmV2U29uZyxcbiAgICAgICAgICAgIHNvbmc6IHNvbmcgfSkgOiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JywgbnVsbCk7XG5cbiAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgX011aVRoZW1lUHJvdmlkZXIyLmRlZmF1bHQsXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfQXBwQmFyMi5kZWZhdWx0LCB7XG4gICAgICAgICAgICAgICAgICAgIG9uTGVmdEljb25CdXR0b25Ub3VjaFRhcDogdGhpcy5hcHBCYXJMZWZ0VGFwLFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ0JpbmRpZScgfSksXG4gICAgICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgICAgIF9EcmF3ZXIyLmRlZmF1bHQsXG4gICAgICAgICAgICAgICAgICAgIHsgb3BlbjogdGhpcy5zdGF0ZS5kcmF3ZXJPcGVuLCBkb2NrZWQ6IGZhbHNlLCBvblJlcXVlc3RDaGFuZ2U6IHRoaXMub25EcmF3ZXJSZXF1ZXN0Q2hhbmdlIH0sXG4gICAgICAgICAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgX01lbnVJdGVtMi5kZWZhdWx0LFxuICAgICAgICAgICAgICAgICAgICAgICAgeyBvblRvdWNoVGFwOiBmdW5jdGlvbiBvblRvdWNoVGFwKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzMi5nb3RvUGFnZSgnaW5kZXgnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAnUHJpbmNpcGFsJ1xuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICAgICAgIF9NZW51SXRlbTIuZGVmYXVsdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgb25Ub3VjaFRhcDogZnVuY3Rpb24gb25Ub3VjaFRhcChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpczIuZ290b1BhZ2UoJ3NvbmdzJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgJ0NhbmNpb25lcydcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgc29uZ1BsYXllcixcbiAgICAgICAgICAgICAgICBjdXJyZW50UGFnZVxuICAgICAgICAgICAgKVxuICAgICAgICApO1xuICAgIH1cbn0pO1xuXG5fcmVhY3REb20yLmRlZmF1bHQucmVuZGVyKF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KE1haW5BcHAsIG51bGwpLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncm9vdCcpKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDI5Mjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuLyohXG4gKiBEZXRlcm1pbmUgaWYgYW4gb2JqZWN0IGlzIGEgQnVmZmVyXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGZlcm9zc0BmZXJvc3Mub3JnPiA8aHR0cDovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cblxuLy8gVGhlIF9pc0J1ZmZlciBjaGVjayBpcyBmb3IgU2FmYXJpIDUtNyBzdXBwb3J0LCBiZWNhdXNlIGl0J3MgbWlzc2luZ1xuLy8gT2JqZWN0LnByb3RvdHlwZS5jb25zdHJ1Y3Rvci4gUmVtb3ZlIHRoaXMgZXZlbnR1YWxseVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiBvYmogIT0gbnVsbCAmJiAoaXNCdWZmZXIob2JqKSB8fCBpc1Nsb3dCdWZmZXIob2JqKSB8fCAhIW9iai5faXNCdWZmZXIpXG59XG5cbmZ1bmN0aW9uIGlzQnVmZmVyIChvYmopIHtcbiAgcmV0dXJuICEhb2JqLmNvbnN0cnVjdG9yICYmIHR5cGVvZiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyKG9iailcbn1cblxuLy8gRm9yIE5vZGUgdjAuMTAgc3VwcG9ydC4gUmVtb3ZlIHRoaXMgZXZlbnR1YWxseS5cbmZ1bmN0aW9uIGlzU2xvd0J1ZmZlciAob2JqKSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqLnJlYWRGbG9hdExFID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBvYmouc2xpY2UgPT09ICdmdW5jdGlvbicgJiYgaXNCdWZmZXIob2JqLnNsaWNlKDAsIDApKVxufVxuXG5cbi8qKiovIH0pLFxuXG4vKioqLyAyOTQ6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihnbG9iYWwpIHsvKipcbiAqIGxvZGFzaCAoQ3VzdG9tIEJ1aWxkKSA8aHR0cHM6Ly9sb2Rhc2guY29tLz5cbiAqIEJ1aWxkOiBgbG9kYXNoIG1vZHVsYXJpemUgZXhwb3J0cz1cIm5wbVwiIC1vIC4vYFxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMgPGh0dHBzOi8vanF1ZXJ5Lm9yZy8+XG4gKiBSZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZSA8aHR0cHM6Ly9sb2Rhc2guY29tL2xpY2Vuc2U+XG4gKiBCYXNlZCBvbiBVbmRlcnNjb3JlLmpzIDEuOC4zIDxodHRwOi8vdW5kZXJzY29yZWpzLm9yZy9MSUNFTlNFPlxuICogQ29weXJpZ2h0IEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBhbmQgSW52ZXN0aWdhdGl2ZSBSZXBvcnRlcnMgJiBFZGl0b3JzXG4gKi9cblxuLyoqIFVzZWQgYXMgdGhlIGBUeXBlRXJyb3JgIG1lc3NhZ2UgZm9yIFwiRnVuY3Rpb25zXCIgbWV0aG9kcy4gKi9cbnZhciBGVU5DX0VSUk9SX1RFWFQgPSAnRXhwZWN0ZWQgYSBmdW5jdGlvbic7XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE5BTiA9IDAgLyAwO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXSc7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHdoaXRlc3BhY2UuICovXG52YXIgcmVUcmltID0gL15cXHMrfFxccyskL2c7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBiYWQgc2lnbmVkIGhleGFkZWNpbWFsIHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc0JhZEhleCA9IC9eWy0rXTB4WzAtOWEtZl0rJC9pO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgYmluYXJ5IHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc0JpbmFyeSA9IC9eMGJbMDFdKyQvaTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG9jdGFsIHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc09jdGFsID0gL14wb1swLTddKyQvaTtcblxuLyoqIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHdpdGhvdXQgYSBkZXBlbmRlbmN5IG9uIGByb290YC4gKi9cbnZhciBmcmVlUGFyc2VJbnQgPSBwYXJzZUludDtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwgJiYgZ2xvYmFsLk9iamVjdCA9PT0gT2JqZWN0ICYmIGdsb2JhbDtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBzZWxmYC4gKi9cbnZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4vKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi9cbnZhciByb290ID0gZnJlZUdsb2JhbCB8fCBmcmVlU2VsZiB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgb2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZU1heCA9IE1hdGgubWF4LFxuICAgIG5hdGl2ZU1pbiA9IE1hdGgubWluO1xuXG4vKipcbiAqIEdldHMgdGhlIHRpbWVzdGFtcCBvZiB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0aGF0IGhhdmUgZWxhcHNlZCBzaW5jZVxuICogdGhlIFVuaXggZXBvY2ggKDEgSmFudWFyeSAxOTcwIDAwOjAwOjAwIFVUQykuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAyLjQuMFxuICogQGNhdGVnb3J5IERhdGVcbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVzdGFtcC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5kZWZlcihmdW5jdGlvbihzdGFtcCkge1xuICogICBjb25zb2xlLmxvZyhfLm5vdygpIC0gc3RhbXApO1xuICogfSwgXy5ub3coKSk7XG4gKiAvLyA9PiBMb2dzIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGl0IHRvb2sgZm9yIHRoZSBkZWZlcnJlZCBpbnZvY2F0aW9uLlxuICovXG52YXIgbm93ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiByb290LkRhdGUubm93KCk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBkZWJvdW5jZWQgZnVuY3Rpb24gdGhhdCBkZWxheXMgaW52b2tpbmcgYGZ1bmNgIHVudGlsIGFmdGVyIGB3YWl0YFxuICogbWlsbGlzZWNvbmRzIGhhdmUgZWxhcHNlZCBzaW5jZSB0aGUgbGFzdCB0aW1lIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gd2FzXG4gKiBpbnZva2VkLiBUaGUgZGVib3VuY2VkIGZ1bmN0aW9uIGNvbWVzIHdpdGggYSBgY2FuY2VsYCBtZXRob2QgdG8gY2FuY2VsXG4gKiBkZWxheWVkIGBmdW5jYCBpbnZvY2F0aW9ucyBhbmQgYSBgZmx1c2hgIG1ldGhvZCB0byBpbW1lZGlhdGVseSBpbnZva2UgdGhlbS5cbiAqIFByb3ZpZGUgYG9wdGlvbnNgIHRvIGluZGljYXRlIHdoZXRoZXIgYGZ1bmNgIHNob3VsZCBiZSBpbnZva2VkIG9uIHRoZVxuICogbGVhZGluZyBhbmQvb3IgdHJhaWxpbmcgZWRnZSBvZiB0aGUgYHdhaXRgIHRpbWVvdXQuIFRoZSBgZnVuY2AgaXMgaW52b2tlZFxuICogd2l0aCB0aGUgbGFzdCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIGRlYm91bmNlZCBmdW5jdGlvbi4gU3Vic2VxdWVudFxuICogY2FsbHMgdG8gdGhlIGRlYm91bmNlZCBmdW5jdGlvbiByZXR1cm4gdGhlIHJlc3VsdCBvZiB0aGUgbGFzdCBgZnVuY2BcbiAqIGludm9jYXRpb24uXG4gKlxuICogKipOb3RlOioqIElmIGBsZWFkaW5nYCBhbmQgYHRyYWlsaW5nYCBvcHRpb25zIGFyZSBgdHJ1ZWAsIGBmdW5jYCBpc1xuICogaW52b2tlZCBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dCBvbmx5IGlmIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb25cbiAqIGlzIGludm9rZWQgbW9yZSB0aGFuIG9uY2UgZHVyaW5nIHRoZSBgd2FpdGAgdGltZW91dC5cbiAqXG4gKiBJZiBgd2FpdGAgaXMgYDBgIGFuZCBgbGVhZGluZ2AgaXMgYGZhbHNlYCwgYGZ1bmNgIGludm9jYXRpb24gaXMgZGVmZXJyZWRcbiAqIHVudGlsIHRvIHRoZSBuZXh0IHRpY2ssIHNpbWlsYXIgdG8gYHNldFRpbWVvdXRgIHdpdGggYSB0aW1lb3V0IG9mIGAwYC5cbiAqXG4gKiBTZWUgW0RhdmlkIENvcmJhY2hvJ3MgYXJ0aWNsZV0oaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9kZWJvdW5jaW5nLXRocm90dGxpbmctZXhwbGFpbmVkLWV4YW1wbGVzLylcbiAqIGZvciBkZXRhaWxzIG92ZXIgdGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gYF8uZGVib3VuY2VgIGFuZCBgXy50aHJvdHRsZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWJvdW5jZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbd2FpdD0wXSBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5sZWFkaW5nPWZhbHNlXVxuICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIGxlYWRpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5tYXhXYWl0XVxuICogIFRoZSBtYXhpbXVtIHRpbWUgYGZ1bmNgIGlzIGFsbG93ZWQgdG8gYmUgZGVsYXllZCBiZWZvcmUgaXQncyBpbnZva2VkLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy50cmFpbGluZz10cnVlXVxuICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBkZWJvdW5jZWQgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIC8vIEF2b2lkIGNvc3RseSBjYWxjdWxhdGlvbnMgd2hpbGUgdGhlIHdpbmRvdyBzaXplIGlzIGluIGZsdXguXG4gKiBqUXVlcnkod2luZG93KS5vbigncmVzaXplJywgXy5kZWJvdW5jZShjYWxjdWxhdGVMYXlvdXQsIDE1MCkpO1xuICpcbiAqIC8vIEludm9rZSBgc2VuZE1haWxgIHdoZW4gY2xpY2tlZCwgZGVib3VuY2luZyBzdWJzZXF1ZW50IGNhbGxzLlxuICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIF8uZGVib3VuY2Uoc2VuZE1haWwsIDMwMCwge1xuICogICAnbGVhZGluZyc6IHRydWUsXG4gKiAgICd0cmFpbGluZyc6IGZhbHNlXG4gKiB9KSk7XG4gKlxuICogLy8gRW5zdXJlIGBiYXRjaExvZ2AgaXMgaW52b2tlZCBvbmNlIGFmdGVyIDEgc2Vjb25kIG9mIGRlYm91bmNlZCBjYWxscy5cbiAqIHZhciBkZWJvdW5jZWQgPSBfLmRlYm91bmNlKGJhdGNoTG9nLCAyNTAsIHsgJ21heFdhaXQnOiAxMDAwIH0pO1xuICogdmFyIHNvdXJjZSA9IG5ldyBFdmVudFNvdXJjZSgnL3N0cmVhbScpO1xuICogalF1ZXJ5KHNvdXJjZSkub24oJ21lc3NhZ2UnLCBkZWJvdW5jZWQpO1xuICpcbiAqIC8vIENhbmNlbCB0aGUgdHJhaWxpbmcgZGVib3VuY2VkIGludm9jYXRpb24uXG4gKiBqUXVlcnkod2luZG93KS5vbigncG9wc3RhdGUnLCBkZWJvdW5jZWQuY2FuY2VsKTtcbiAqL1xuZnVuY3Rpb24gZGVib3VuY2UoZnVuYywgd2FpdCwgb3B0aW9ucykge1xuICB2YXIgbGFzdEFyZ3MsXG4gICAgICBsYXN0VGhpcyxcbiAgICAgIG1heFdhaXQsXG4gICAgICByZXN1bHQsXG4gICAgICB0aW1lcklkLFxuICAgICAgbGFzdENhbGxUaW1lLFxuICAgICAgbGFzdEludm9rZVRpbWUgPSAwLFxuICAgICAgbGVhZGluZyA9IGZhbHNlLFxuICAgICAgbWF4aW5nID0gZmFsc2UsXG4gICAgICB0cmFpbGluZyA9IHRydWU7XG5cbiAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gIH1cbiAgd2FpdCA9IHRvTnVtYmVyKHdhaXQpIHx8IDA7XG4gIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgIGxlYWRpbmcgPSAhIW9wdGlvbnMubGVhZGluZztcbiAgICBtYXhpbmcgPSAnbWF4V2FpdCcgaW4gb3B0aW9ucztcbiAgICBtYXhXYWl0ID0gbWF4aW5nID8gbmF0aXZlTWF4KHRvTnVtYmVyKG9wdGlvbnMubWF4V2FpdCkgfHwgMCwgd2FpdCkgOiBtYXhXYWl0O1xuICAgIHRyYWlsaW5nID0gJ3RyYWlsaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gIH1cblxuICBmdW5jdGlvbiBpbnZva2VGdW5jKHRpbWUpIHtcbiAgICB2YXIgYXJncyA9IGxhc3RBcmdzLFxuICAgICAgICB0aGlzQXJnID0gbGFzdFRoaXM7XG5cbiAgICBsYXN0QXJncyA9IGxhc3RUaGlzID0gdW5kZWZpbmVkO1xuICAgIGxhc3RJbnZva2VUaW1lID0gdGltZTtcbiAgICByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiBsZWFkaW5nRWRnZSh0aW1lKSB7XG4gICAgLy8gUmVzZXQgYW55IGBtYXhXYWl0YCB0aW1lci5cbiAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7XG4gICAgLy8gU3RhcnQgdGhlIHRpbWVyIGZvciB0aGUgdHJhaWxpbmcgZWRnZS5cbiAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgIC8vIEludm9rZSB0aGUgbGVhZGluZyBlZGdlLlxuICAgIHJldHVybiBsZWFkaW5nID8gaW52b2tlRnVuYyh0aW1lKSA6IHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbWFpbmluZ1dhaXQodGltZSkge1xuICAgIHZhciB0aW1lU2luY2VMYXN0Q2FsbCA9IHRpbWUgLSBsYXN0Q2FsbFRpbWUsXG4gICAgICAgIHRpbWVTaW5jZUxhc3RJbnZva2UgPSB0aW1lIC0gbGFzdEludm9rZVRpbWUsXG4gICAgICAgIHJlc3VsdCA9IHdhaXQgLSB0aW1lU2luY2VMYXN0Q2FsbDtcblxuICAgIHJldHVybiBtYXhpbmcgPyBuYXRpdmVNaW4ocmVzdWx0LCBtYXhXYWl0IC0gdGltZVNpbmNlTGFzdEludm9rZSkgOiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiBzaG91bGRJbnZva2UodGltZSkge1xuICAgIHZhciB0aW1lU2luY2VMYXN0Q2FsbCA9IHRpbWUgLSBsYXN0Q2FsbFRpbWUsXG4gICAgICAgIHRpbWVTaW5jZUxhc3RJbnZva2UgPSB0aW1lIC0gbGFzdEludm9rZVRpbWU7XG5cbiAgICAvLyBFaXRoZXIgdGhpcyBpcyB0aGUgZmlyc3QgY2FsbCwgYWN0aXZpdHkgaGFzIHN0b3BwZWQgYW5kIHdlJ3JlIGF0IHRoZVxuICAgIC8vIHRyYWlsaW5nIGVkZ2UsIHRoZSBzeXN0ZW0gdGltZSBoYXMgZ29uZSBiYWNrd2FyZHMgYW5kIHdlJ3JlIHRyZWF0aW5nXG4gICAgLy8gaXQgYXMgdGhlIHRyYWlsaW5nIGVkZ2UsIG9yIHdlJ3ZlIGhpdCB0aGUgYG1heFdhaXRgIGxpbWl0LlxuICAgIHJldHVybiAobGFzdENhbGxUaW1lID09PSB1bmRlZmluZWQgfHwgKHRpbWVTaW5jZUxhc3RDYWxsID49IHdhaXQpIHx8XG4gICAgICAodGltZVNpbmNlTGFzdENhbGwgPCAwKSB8fCAobWF4aW5nICYmIHRpbWVTaW5jZUxhc3RJbnZva2UgPj0gbWF4V2FpdCkpO1xuICB9XG5cbiAgZnVuY3Rpb24gdGltZXJFeHBpcmVkKCkge1xuICAgIHZhciB0aW1lID0gbm93KCk7XG4gICAgaWYgKHNob3VsZEludm9rZSh0aW1lKSkge1xuICAgICAgcmV0dXJuIHRyYWlsaW5nRWRnZSh0aW1lKTtcbiAgICB9XG4gICAgLy8gUmVzdGFydCB0aGUgdGltZXIuXG4gICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCByZW1haW5pbmdXYWl0KHRpbWUpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYWlsaW5nRWRnZSh0aW1lKSB7XG4gICAgdGltZXJJZCA9IHVuZGVmaW5lZDtcblxuICAgIC8vIE9ubHkgaW52b2tlIGlmIHdlIGhhdmUgYGxhc3RBcmdzYCB3aGljaCBtZWFucyBgZnVuY2AgaGFzIGJlZW5cbiAgICAvLyBkZWJvdW5jZWQgYXQgbGVhc3Qgb25jZS5cbiAgICBpZiAodHJhaWxpbmcgJiYgbGFzdEFyZ3MpIHtcbiAgICAgIHJldHVybiBpbnZva2VGdW5jKHRpbWUpO1xuICAgIH1cbiAgICBsYXN0QXJncyA9IGxhc3RUaGlzID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiBjYW5jZWwoKSB7XG4gICAgaWYgKHRpbWVySWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVySWQpO1xuICAgIH1cbiAgICBsYXN0SW52b2tlVGltZSA9IDA7XG4gICAgbGFzdEFyZ3MgPSBsYXN0Q2FsbFRpbWUgPSBsYXN0VGhpcyA9IHRpbWVySWQgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBmdW5jdGlvbiBmbHVzaCgpIHtcbiAgICByZXR1cm4gdGltZXJJZCA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogdHJhaWxpbmdFZGdlKG5vdygpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlYm91bmNlZCgpIHtcbiAgICB2YXIgdGltZSA9IG5vdygpLFxuICAgICAgICBpc0ludm9raW5nID0gc2hvdWxkSW52b2tlKHRpbWUpO1xuXG4gICAgbGFzdEFyZ3MgPSBhcmd1bWVudHM7XG4gICAgbGFzdFRoaXMgPSB0aGlzO1xuICAgIGxhc3RDYWxsVGltZSA9IHRpbWU7XG5cbiAgICBpZiAoaXNJbnZva2luZykge1xuICAgICAgaWYgKHRpbWVySWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gbGVhZGluZ0VkZ2UobGFzdENhbGxUaW1lKTtcbiAgICAgIH1cbiAgICAgIGlmIChtYXhpbmcpIHtcbiAgICAgICAgLy8gSGFuZGxlIGludm9jYXRpb25zIGluIGEgdGlnaHQgbG9vcC5cbiAgICAgICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICAgICAgcmV0dXJuIGludm9rZUZ1bmMobGFzdENhbGxUaW1lKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRpbWVySWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBkZWJvdW5jZWQuY2FuY2VsID0gY2FuY2VsO1xuICBkZWJvdW5jZWQuZmx1c2ggPSBmbHVzaDtcbiAgcmV0dXJuIGRlYm91bmNlZDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgdGhyb3R0bGVkIGZ1bmN0aW9uIHRoYXQgb25seSBpbnZva2VzIGBmdW5jYCBhdCBtb3N0IG9uY2UgcGVyXG4gKiBldmVyeSBgd2FpdGAgbWlsbGlzZWNvbmRzLiBUaGUgdGhyb3R0bGVkIGZ1bmN0aW9uIGNvbWVzIHdpdGggYSBgY2FuY2VsYFxuICogbWV0aG9kIHRvIGNhbmNlbCBkZWxheWVkIGBmdW5jYCBpbnZvY2F0aW9ucyBhbmQgYSBgZmx1c2hgIG1ldGhvZCB0b1xuICogaW1tZWRpYXRlbHkgaW52b2tlIHRoZW0uIFByb3ZpZGUgYG9wdGlvbnNgIHRvIGluZGljYXRlIHdoZXRoZXIgYGZ1bmNgXG4gKiBzaG91bGQgYmUgaW52b2tlZCBvbiB0aGUgbGVhZGluZyBhbmQvb3IgdHJhaWxpbmcgZWRnZSBvZiB0aGUgYHdhaXRgXG4gKiB0aW1lb3V0LiBUaGUgYGZ1bmNgIGlzIGludm9rZWQgd2l0aCB0aGUgbGFzdCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlXG4gKiB0aHJvdHRsZWQgZnVuY3Rpb24uIFN1YnNlcXVlbnQgY2FsbHMgdG8gdGhlIHRocm90dGxlZCBmdW5jdGlvbiByZXR1cm4gdGhlXG4gKiByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgIGludm9jYXRpb24uXG4gKlxuICogKipOb3RlOioqIElmIGBsZWFkaW5nYCBhbmQgYHRyYWlsaW5nYCBvcHRpb25zIGFyZSBgdHJ1ZWAsIGBmdW5jYCBpc1xuICogaW52b2tlZCBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dCBvbmx5IGlmIHRoZSB0aHJvdHRsZWQgZnVuY3Rpb25cbiAqIGlzIGludm9rZWQgbW9yZSB0aGFuIG9uY2UgZHVyaW5nIHRoZSBgd2FpdGAgdGltZW91dC5cbiAqXG4gKiBJZiBgd2FpdGAgaXMgYDBgIGFuZCBgbGVhZGluZ2AgaXMgYGZhbHNlYCwgYGZ1bmNgIGludm9jYXRpb24gaXMgZGVmZXJyZWRcbiAqIHVudGlsIHRvIHRoZSBuZXh0IHRpY2ssIHNpbWlsYXIgdG8gYHNldFRpbWVvdXRgIHdpdGggYSB0aW1lb3V0IG9mIGAwYC5cbiAqXG4gKiBTZWUgW0RhdmlkIENvcmJhY2hvJ3MgYXJ0aWNsZV0oaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9kZWJvdW5jaW5nLXRocm90dGxpbmctZXhwbGFpbmVkLWV4YW1wbGVzLylcbiAqIGZvciBkZXRhaWxzIG92ZXIgdGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gYF8udGhyb3R0bGVgIGFuZCBgXy5kZWJvdW5jZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB0aHJvdHRsZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbd2FpdD0wXSBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB0aHJvdHRsZSBpbnZvY2F0aW9ucyB0by5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5sZWFkaW5nPXRydWVdXG4gKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgbGVhZGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy50cmFpbGluZz10cnVlXVxuICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB0aHJvdHRsZWQgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIC8vIEF2b2lkIGV4Y2Vzc2l2ZWx5IHVwZGF0aW5nIHRoZSBwb3NpdGlvbiB3aGlsZSBzY3JvbGxpbmcuXG4gKiBqUXVlcnkod2luZG93KS5vbignc2Nyb2xsJywgXy50aHJvdHRsZSh1cGRhdGVQb3NpdGlvbiwgMTAwKSk7XG4gKlxuICogLy8gSW52b2tlIGByZW5ld1Rva2VuYCB3aGVuIHRoZSBjbGljayBldmVudCBpcyBmaXJlZCwgYnV0IG5vdCBtb3JlIHRoYW4gb25jZSBldmVyeSA1IG1pbnV0ZXMuXG4gKiB2YXIgdGhyb3R0bGVkID0gXy50aHJvdHRsZShyZW5ld1Rva2VuLCAzMDAwMDAsIHsgJ3RyYWlsaW5nJzogZmFsc2UgfSk7XG4gKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgdGhyb3R0bGVkKTtcbiAqXG4gKiAvLyBDYW5jZWwgdGhlIHRyYWlsaW5nIHRocm90dGxlZCBpbnZvY2F0aW9uLlxuICogalF1ZXJ5KHdpbmRvdykub24oJ3BvcHN0YXRlJywgdGhyb3R0bGVkLmNhbmNlbCk7XG4gKi9cbmZ1bmN0aW9uIHRocm90dGxlKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgdmFyIGxlYWRpbmcgPSB0cnVlLFxuICAgICAgdHJhaWxpbmcgPSB0cnVlO1xuXG4gIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICB9XG4gIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgIGxlYWRpbmcgPSAnbGVhZGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy5sZWFkaW5nIDogbGVhZGluZztcbiAgICB0cmFpbGluZyA9ICd0cmFpbGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy50cmFpbGluZyA6IHRyYWlsaW5nO1xuICB9XG4gIHJldHVybiBkZWJvdW5jZShmdW5jLCB3YWl0LCB7XG4gICAgJ2xlYWRpbmcnOiBsZWFkaW5nLFxuICAgICdtYXhXYWl0Jzogd2FpdCxcbiAgICAndHJhaWxpbmcnOiB0cmFpbGluZ1xuICB9KTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyB0aGVcbiAqIFtsYW5ndWFnZSB0eXBlXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZWNtYXNjcmlwdC1sYW5ndWFnZS10eXBlcylcbiAqIG9mIGBPYmplY3RgLiAoZS5nLiBhcnJheXMsIGZ1bmN0aW9ucywgb2JqZWN0cywgcmVnZXhlcywgYG5ldyBOdW1iZXIoMClgLCBhbmQgYG5ldyBTdHJpbmcoJycpYClcbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdCh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoXy5ub29wKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiAhIXZhbHVlICYmICh0eXBlID09ICdvYmplY3QnIHx8IHR5cGUgPT0gJ2Z1bmN0aW9uJyk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdExpa2Uoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuICEhdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3ltYm9sYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc3ltYm9sLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNTeW1ib2woU3ltYm9sLml0ZXJhdG9yKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzU3ltYm9sKCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3ltYm9sKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ3N5bWJvbCcgfHxcbiAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBvYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKSA9PSBzeW1ib2xUYWcpO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBudW1iZXIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBudW1iZXIuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udG9OdW1iZXIoMy4yKTtcbiAqIC8vID0+IDMuMlxuICpcbiAqIF8udG9OdW1iZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiA1ZS0zMjRcbiAqXG4gKiBfLnRvTnVtYmVyKEluZmluaXR5KTtcbiAqIC8vID0+IEluZmluaXR5XG4gKlxuICogXy50b051bWJlcignMy4yJyk7XG4gKiAvLyA9PiAzLjJcbiAqL1xuZnVuY3Rpb24gdG9OdW1iZXIodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIE5BTjtcbiAgfVxuICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgdmFyIG90aGVyID0gdHlwZW9mIHZhbHVlLnZhbHVlT2YgPT0gJ2Z1bmN0aW9uJyA/IHZhbHVlLnZhbHVlT2YoKSA6IHZhbHVlO1xuICAgIHZhbHVlID0gaXNPYmplY3Qob3RoZXIpID8gKG90aGVyICsgJycpIDogb3RoZXI7XG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gMCA/IHZhbHVlIDogK3ZhbHVlO1xuICB9XG4gIHZhbHVlID0gdmFsdWUucmVwbGFjZShyZVRyaW0sICcnKTtcbiAgdmFyIGlzQmluYXJ5ID0gcmVJc0JpbmFyeS50ZXN0KHZhbHVlKTtcbiAgcmV0dXJuIChpc0JpbmFyeSB8fCByZUlzT2N0YWwudGVzdCh2YWx1ZSkpXG4gICAgPyBmcmVlUGFyc2VJbnQodmFsdWUuc2xpY2UoMiksIGlzQmluYXJ5ID8gMiA6IDgpXG4gICAgOiAocmVJc0JhZEhleC50ZXN0KHZhbHVlKSA/IE5BTiA6ICt2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdGhyb3R0bGU7XG5cbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDE3OSkpKVxuXG4vKioqLyB9KSxcblxuLyoqKi8gMjk1OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2V4dGVuZHMyID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMik7XG5cbnZhciBfZXh0ZW5kczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leHRlbmRzMik7XG5cbnZhciBfa2V5cyA9IF9fd2VicGFja19yZXF1aXJlX18oNzUpO1xuXG52YXIgX2tleXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfa2V5cyk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5KTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vYmplY3RXaXRob3V0UHJvcGVydGllczIpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcblxudmFyIF9nZXRQcm90b3R5cGVPZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRQcm90b3R5cGVPZik7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cbnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IF9fd2VicGFja19yZXF1aXJlX18oNyk7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMik7XG5cbnZhciBfaW5oZXJpdHMyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcblxudmFyIF9pbmhlcml0czMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbmhlcml0czIpO1xuXG5leHBvcnRzLmdldFN0eWxlcyA9IGdldFN0eWxlcztcblxudmFyIF9zaW1wbGVBc3NpZ24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXG52YXIgX3NpbXBsZUFzc2lnbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zaW1wbGVBc3NpZ24pO1xuXG52YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9JY29uQnV0dG9uID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5NCk7XG5cbnZhciBfSWNvbkJ1dHRvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9JY29uQnV0dG9uKTtcblxudmFyIF9tZW51ID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNTApO1xuXG52YXIgX21lbnUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbWVudSk7XG5cbnZhciBfUGFwZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQzKTtcblxudmFyIF9QYXBlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9QYXBlcik7XG5cbnZhciBfcHJvcFR5cGVzMyA9IF9fd2VicGFja19yZXF1aXJlX18oMzEpO1xuXG52YXIgX3Byb3BUeXBlczQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMzKTtcblxudmFyIF93YXJuaW5nID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNyk7XG5cbnZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gZ2V0U3R5bGVzKHByb3BzLCBjb250ZXh0KSB7XG4gIHZhciBfY29udGV4dCRtdWlUaGVtZSA9IGNvbnRleHQubXVpVGhlbWUsXG4gICAgICBhcHBCYXIgPSBfY29udGV4dCRtdWlUaGVtZS5hcHBCYXIsXG4gICAgICBpY29uQnV0dG9uU2l6ZSA9IF9jb250ZXh0JG11aVRoZW1lLmJ1dHRvbi5pY29uQnV0dG9uU2l6ZSxcbiAgICAgIHpJbmRleCA9IF9jb250ZXh0JG11aVRoZW1lLnpJbmRleDtcblxuXG4gIHZhciBmbGF0QnV0dG9uU2l6ZSA9IDM2O1xuXG4gIHZhciBzdHlsZXMgPSB7XG4gICAgcm9vdDoge1xuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICB6SW5kZXg6IHpJbmRleC5hcHBCYXIsXG4gICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiBhcHBCYXIuY29sb3IsXG4gICAgICBwYWRkaW5nTGVmdDogYXBwQmFyLnBhZGRpbmcsXG4gICAgICBwYWRkaW5nUmlnaHQ6IGFwcEJhci5wYWRkaW5nXG4gICAgfSxcbiAgICB0aXRsZToge1xuICAgICAgd2hpdGVTcGFjZTogJ25vd3JhcCcsXG4gICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICB0ZXh0T3ZlcmZsb3c6ICdlbGxpcHNpcycsXG4gICAgICBtYXJnaW46IDAsXG4gICAgICBwYWRkaW5nVG9wOiAwLFxuICAgICAgbGV0dGVyU3BhY2luZzogMCxcbiAgICAgIGZvbnRTaXplOiAyNCxcbiAgICAgIGZvbnRXZWlnaHQ6IGFwcEJhci50aXRsZUZvbnRXZWlnaHQsXG4gICAgICBjb2xvcjogYXBwQmFyLnRleHRDb2xvcixcbiAgICAgIGhlaWdodDogYXBwQmFyLmhlaWdodCxcbiAgICAgIGxpbmVIZWlnaHQ6IGFwcEJhci5oZWlnaHQgKyAncHgnXG4gICAgfSxcbiAgICBtYWluRWxlbWVudDoge1xuICAgICAgYm94RmxleDogMSxcbiAgICAgIGZsZXg6ICcxJ1xuICAgIH0sXG4gICAgaWNvbkJ1dHRvblN0eWxlOiB7XG4gICAgICBtYXJnaW5Ub3A6IChhcHBCYXIuaGVpZ2h0IC0gaWNvbkJ1dHRvblNpemUpIC8gMixcbiAgICAgIG1hcmdpblJpZ2h0OiA4LFxuICAgICAgbWFyZ2luTGVmdDogLTE2XG4gICAgfSxcbiAgICBpY29uQnV0dG9uSWNvblN0eWxlOiB7XG4gICAgICBmaWxsOiBhcHBCYXIudGV4dENvbG9yLFxuICAgICAgY29sb3I6IGFwcEJhci50ZXh0Q29sb3JcbiAgICB9LFxuICAgIGZsYXRCdXR0b246IHtcbiAgICAgIGNvbG9yOiBhcHBCYXIudGV4dENvbG9yLFxuICAgICAgbWFyZ2luVG9wOiAoaWNvbkJ1dHRvblNpemUgLSBmbGF0QnV0dG9uU2l6ZSkgLyAyICsgMVxuICAgIH1cbiAgfTtcblxuICByZXR1cm4gc3R5bGVzO1xufVxuXG52YXIgQXBwQmFyID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0czMuZGVmYXVsdCkoQXBwQmFyLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBBcHBCYXIoKSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgQXBwQmFyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMy5kZWZhdWx0KSh0aGlzLCAoX3JlZiA9IEFwcEJhci5fX3Byb3RvX18gfHwgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoQXBwQmFyKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuaGFuZGxlVG91Y2hUYXBMZWZ0SWNvbkJ1dHRvbiA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKF90aGlzLnByb3BzLm9uTGVmdEljb25CdXR0b25Ub3VjaFRhcCkge1xuICAgICAgICBfdGhpcy5wcm9wcy5vbkxlZnRJY29uQnV0dG9uVG91Y2hUYXAoZXZlbnQpO1xuICAgICAgfVxuICAgIH0sIF90aGlzLmhhbmRsZVRvdWNoVGFwUmlnaHRJY29uQnV0dG9uID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMub25SaWdodEljb25CdXR0b25Ub3VjaFRhcCkge1xuICAgICAgICBfdGhpcy5wcm9wcy5vblJpZ2h0SWNvbkJ1dHRvblRvdWNoVGFwKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9LCBfdGhpcy5oYW5kbGVUaXRsZVRvdWNoVGFwID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMub25UaXRsZVRvdWNoVGFwKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uVGl0bGVUb3VjaFRhcChldmVudCk7XG4gICAgICB9XG4gICAgfSwgX3RlbXApLCAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zLmRlZmF1bHQpKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKEFwcEJhciwgW3tcbiAgICBrZXk6ICdjb21wb25lbnREaWRNb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgIGZhbHNlID8gKDAsIF93YXJuaW5nMi5kZWZhdWx0KSghdGhpcy5wcm9wcy5pY29uRWxlbWVudExlZnQgfHwgIXRoaXMucHJvcHMuaWNvbkNsYXNzTmFtZUxlZnQsICdNYXRlcmlhbC1VSTogUHJvcGVydGllcyBpY29uRWxlbWVudExlZnRcXG4gICAgICBhbmQgaWNvbkNsYXNzTmFtZUxlZnQgY2Fubm90IGJlIHNpbXVsdGFuZW91c2x5IGRlZmluZWQuIFBsZWFzZSB1c2Ugb25lIG9yIHRoZSBvdGhlci4nKSA6IHZvaWQgMDtcblxuICAgICAgIGZhbHNlID8gKDAsIF93YXJuaW5nMi5kZWZhdWx0KSghdGhpcy5wcm9wcy5pY29uRWxlbWVudFJpZ2h0IHx8ICF0aGlzLnByb3BzLmljb25DbGFzc05hbWVSaWdodCwgJ01hdGVyaWFsLVVJOiBQcm9wZXJ0aWVzIGljb25FbGVtZW50UmlnaHRcXG4gICAgICBhbmQgaWNvbkNsYXNzTmFtZVJpZ2h0IGNhbm5vdCBiZSBzaW11bHRhbmVvdXNseSBkZWZpbmVkLiBQbGVhc2UgdXNlIG9uZSBvciB0aGUgb3RoZXIuJykgOiB2b2lkIDA7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgdGl0bGUgPSBfcHJvcHMudGl0bGUsXG4gICAgICAgICAgdGl0bGVTdHlsZSA9IF9wcm9wcy50aXRsZVN0eWxlLFxuICAgICAgICAgIGljb25TdHlsZUxlZnQgPSBfcHJvcHMuaWNvblN0eWxlTGVmdCxcbiAgICAgICAgICBpY29uU3R5bGVSaWdodCA9IF9wcm9wcy5pY29uU3R5bGVSaWdodCxcbiAgICAgICAgICBvblRpdGxlVG91Y2hUYXAgPSBfcHJvcHMub25UaXRsZVRvdWNoVGFwLFxuICAgICAgICAgIHNob3dNZW51SWNvbkJ1dHRvbiA9IF9wcm9wcy5zaG93TWVudUljb25CdXR0b24sXG4gICAgICAgICAgaWNvbkVsZW1lbnRMZWZ0ID0gX3Byb3BzLmljb25FbGVtZW50TGVmdCxcbiAgICAgICAgICBpY29uRWxlbWVudFJpZ2h0ID0gX3Byb3BzLmljb25FbGVtZW50UmlnaHQsXG4gICAgICAgICAgaWNvbkNsYXNzTmFtZUxlZnQgPSBfcHJvcHMuaWNvbkNsYXNzTmFtZUxlZnQsXG4gICAgICAgICAgaWNvbkNsYXNzTmFtZVJpZ2h0ID0gX3Byb3BzLmljb25DbGFzc05hbWVSaWdodCxcbiAgICAgICAgICBvbkxlZnRJY29uQnV0dG9uVG91Y2hUYXAgPSBfcHJvcHMub25MZWZ0SWNvbkJ1dHRvblRvdWNoVGFwLFxuICAgICAgICAgIG9uUmlnaHRJY29uQnV0dG9uVG91Y2hUYXAgPSBfcHJvcHMub25SaWdodEljb25CdXR0b25Ub3VjaFRhcCxcbiAgICAgICAgICBjbGFzc05hbWUgPSBfcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICAgIHN0eWxlID0gX3Byb3BzLnN0eWxlLFxuICAgICAgICAgIHpEZXB0aCA9IF9wcm9wcy56RGVwdGgsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMy5kZWZhdWx0KShfcHJvcHMsIFsndGl0bGUnLCAndGl0bGVTdHlsZScsICdpY29uU3R5bGVMZWZ0JywgJ2ljb25TdHlsZVJpZ2h0JywgJ29uVGl0bGVUb3VjaFRhcCcsICdzaG93TWVudUljb25CdXR0b24nLCAnaWNvbkVsZW1lbnRMZWZ0JywgJ2ljb25FbGVtZW50UmlnaHQnLCAnaWNvbkNsYXNzTmFtZUxlZnQnLCAnaWNvbkNsYXNzTmFtZVJpZ2h0JywgJ29uTGVmdEljb25CdXR0b25Ub3VjaFRhcCcsICdvblJpZ2h0SWNvbkJ1dHRvblRvdWNoVGFwJywgJ2NsYXNzTmFtZScsICdzdHlsZScsICd6RGVwdGgnLCAnY2hpbGRyZW4nXSk7XG4gICAgICB2YXIgcHJlcGFyZVN0eWxlcyA9IHRoaXMuY29udGV4dC5tdWlUaGVtZS5wcmVwYXJlU3R5bGVzO1xuXG4gICAgICB2YXIgc3R5bGVzID0gZ2V0U3R5bGVzKHRoaXMucHJvcHMsIHRoaXMuY29udGV4dCk7XG5cbiAgICAgIHZhciBtZW51RWxlbWVudExlZnQgPSB2b2lkIDA7XG4gICAgICB2YXIgbWVudUVsZW1lbnRSaWdodCA9IHZvaWQgMDtcblxuICAgICAgLy8gSWYgdGhlIHRpdGxlIGlzIGEgc3RyaW5nLCB3cmFwIGluIGFuIGgxIHRhZy5cbiAgICAgIC8vIElmIG5vdCwgd3JhcCBpbiBhIGRpdiB0YWcuXG4gICAgICB2YXIgdGl0bGVDb21wb25lbnQgPSB0eXBlb2YgdGl0bGUgPT09ICdzdHJpbmcnIHx8IHRpdGxlIGluc3RhbmNlb2YgU3RyaW5nID8gJ2gxJyA6ICdkaXYnO1xuXG4gICAgICB2YXIgdGl0bGVFbGVtZW50ID0gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQodGl0bGVDb21wb25lbnQsIHtcbiAgICAgICAgb25Ub3VjaFRhcDogdGhpcy5oYW5kbGVUaXRsZVRvdWNoVGFwLFxuICAgICAgICBzdHlsZTogcHJlcGFyZVN0eWxlcygoMCwgX3NpbXBsZUFzc2lnbjIuZGVmYXVsdCkoc3R5bGVzLnRpdGxlLCBzdHlsZXMubWFpbkVsZW1lbnQsIHRpdGxlU3R5bGUpKVxuICAgICAgfSwgdGl0bGUpO1xuXG4gICAgICB2YXIgaWNvbkxlZnRTdHlsZSA9ICgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KSh7fSwgc3R5bGVzLmljb25CdXR0b25TdHlsZSwgaWNvblN0eWxlTGVmdCk7XG5cbiAgICAgIGlmIChzaG93TWVudUljb25CdXR0b24pIHtcbiAgICAgICAgaWYgKGljb25FbGVtZW50TGVmdCkge1xuICAgICAgICAgIHZhciBpY29uRWxlbWVudExlZnRQcm9wcyA9IHt9O1xuXG4gICAgICAgICAgaWYgKGljb25FbGVtZW50TGVmdC50eXBlLm11aU5hbWUgPT09ICdJY29uQnV0dG9uJykge1xuICAgICAgICAgICAgdmFyIGljb25FbGVtTGVmdENoaWxkcmVuID0gaWNvbkVsZW1lbnRMZWZ0LnByb3BzLmNoaWxkcmVuO1xuICAgICAgICAgICAgdmFyIGljb25CdXR0b25JY29uU3R5bGUgPSAhKGljb25FbGVtTGVmdENoaWxkcmVuICYmIGljb25FbGVtTGVmdENoaWxkcmVuLnByb3BzICYmIGljb25FbGVtTGVmdENoaWxkcmVuLnByb3BzLmNvbG9yKSA/IHN0eWxlcy5pY29uQnV0dG9uSWNvblN0eWxlIDogbnVsbDtcblxuICAgICAgICAgICAgaWNvbkVsZW1lbnRMZWZ0UHJvcHMuaWNvblN0eWxlID0gKDAsIF9zaW1wbGVBc3NpZ24yLmRlZmF1bHQpKHt9LCBpY29uQnV0dG9uSWNvblN0eWxlLCBpY29uRWxlbWVudExlZnQucHJvcHMuaWNvblN0eWxlKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIWljb25FbGVtZW50TGVmdC5wcm9wcy5vblRvdWNoVGFwICYmIHRoaXMucHJvcHMub25MZWZ0SWNvbkJ1dHRvblRvdWNoVGFwKSB7XG4gICAgICAgICAgICBpY29uRWxlbWVudExlZnRQcm9wcy5vblRvdWNoVGFwID0gdGhpcy5oYW5kbGVUb3VjaFRhcExlZnRJY29uQnV0dG9uO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG1lbnVFbGVtZW50TGVmdCA9IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICB7IHN0eWxlOiBwcmVwYXJlU3R5bGVzKGljb25MZWZ0U3R5bGUpIH0sXG4gICAgICAgICAgICAoMCwgX2tleXMyLmRlZmF1bHQpKGljb25FbGVtZW50TGVmdFByb3BzKS5sZW5ndGggPiAwID8gKDAsIF9yZWFjdC5jbG9uZUVsZW1lbnQpKGljb25FbGVtZW50TGVmdCwgaWNvbkVsZW1lbnRMZWZ0UHJvcHMpIDogaWNvbkVsZW1lbnRMZWZ0XG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtZW51RWxlbWVudExlZnQgPSBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgIF9JY29uQnV0dG9uMi5kZWZhdWx0LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBzdHlsZTogaWNvbkxlZnRTdHlsZSxcbiAgICAgICAgICAgICAgaWNvblN0eWxlOiBzdHlsZXMuaWNvbkJ1dHRvbkljb25TdHlsZSxcbiAgICAgICAgICAgICAgaWNvbkNsYXNzTmFtZTogaWNvbkNsYXNzTmFtZUxlZnQsXG4gICAgICAgICAgICAgIG9uVG91Y2hUYXA6IHRoaXMuaGFuZGxlVG91Y2hUYXBMZWZ0SWNvbkJ1dHRvblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGljb25DbGFzc05hbWVMZWZ0ID8gJycgOiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfbWVudTIuZGVmYXVsdCwgeyBzdHlsZTogKDAsIF9zaW1wbGVBc3NpZ24yLmRlZmF1bHQpKHt9LCBzdHlsZXMuaWNvbkJ1dHRvbkljb25TdHlsZSkgfSlcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBpY29uUmlnaHRTdHlsZSA9ICgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KSh7fSwgc3R5bGVzLmljb25CdXR0b25TdHlsZSwge1xuICAgICAgICBtYXJnaW5SaWdodDogLTE2LFxuICAgICAgICBtYXJnaW5MZWZ0OiAnYXV0bydcbiAgICAgIH0sIGljb25TdHlsZVJpZ2h0KTtcblxuICAgICAgaWYgKGljb25FbGVtZW50UmlnaHQpIHtcbiAgICAgICAgdmFyIGljb25FbGVtZW50UmlnaHRQcm9wcyA9IHt9O1xuXG4gICAgICAgIHN3aXRjaCAoaWNvbkVsZW1lbnRSaWdodC50eXBlLm11aU5hbWUpIHtcbiAgICAgICAgICBjYXNlICdJY29uTWVudSc6XG4gICAgICAgICAgY2FzZSAnSWNvbkJ1dHRvbic6XG4gICAgICAgICAgICB2YXIgaWNvbkVsZW1SaWdodENoaWxkcmVuID0gaWNvbkVsZW1lbnRSaWdodC5wcm9wcy5jaGlsZHJlbjtcbiAgICAgICAgICAgIHZhciBfaWNvbkJ1dHRvbkljb25TdHlsZSA9ICEoaWNvbkVsZW1SaWdodENoaWxkcmVuICYmIGljb25FbGVtUmlnaHRDaGlsZHJlbi5wcm9wcyAmJiBpY29uRWxlbVJpZ2h0Q2hpbGRyZW4ucHJvcHMuY29sb3IpID8gc3R5bGVzLmljb25CdXR0b25JY29uU3R5bGUgOiBudWxsO1xuXG4gICAgICAgICAgICBpY29uRWxlbWVudFJpZ2h0UHJvcHMuaWNvblN0eWxlID0gKDAsIF9zaW1wbGVBc3NpZ24yLmRlZmF1bHQpKHt9LCBfaWNvbkJ1dHRvbkljb25TdHlsZSwgaWNvbkVsZW1lbnRSaWdodC5wcm9wcy5pY29uU3R5bGUpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlICdGbGF0QnV0dG9uJzpcbiAgICAgICAgICAgIGljb25FbGVtZW50UmlnaHRQcm9wcy5zdHlsZSA9ICgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KSh7fSwgc3R5bGVzLmZsYXRCdXR0b24sIGljb25FbGVtZW50UmlnaHQucHJvcHMuc3R5bGUpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFpY29uRWxlbWVudFJpZ2h0LnByb3BzLm9uVG91Y2hUYXAgJiYgdGhpcy5wcm9wcy5vblJpZ2h0SWNvbkJ1dHRvblRvdWNoVGFwKSB7XG4gICAgICAgICAgaWNvbkVsZW1lbnRSaWdodFByb3BzLm9uVG91Y2hUYXAgPSB0aGlzLmhhbmRsZVRvdWNoVGFwUmlnaHRJY29uQnV0dG9uO1xuICAgICAgICB9XG5cbiAgICAgICAgbWVudUVsZW1lbnRSaWdodCA9IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIHsgc3R5bGU6IHByZXBhcmVTdHlsZXMoaWNvblJpZ2h0U3R5bGUpIH0sXG4gICAgICAgICAgKDAsIF9rZXlzMi5kZWZhdWx0KShpY29uRWxlbWVudFJpZ2h0UHJvcHMpLmxlbmd0aCA+IDAgPyAoMCwgX3JlYWN0LmNsb25lRWxlbWVudCkoaWNvbkVsZW1lbnRSaWdodCwgaWNvbkVsZW1lbnRSaWdodFByb3BzKSA6IGljb25FbGVtZW50UmlnaHRcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSBpZiAoaWNvbkNsYXNzTmFtZVJpZ2h0KSB7XG4gICAgICAgIG1lbnVFbGVtZW50UmlnaHQgPSBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfSWNvbkJ1dHRvbjIuZGVmYXVsdCwge1xuICAgICAgICAgIHN0eWxlOiBpY29uUmlnaHRTdHlsZSxcbiAgICAgICAgICBpY29uU3R5bGU6IHN0eWxlcy5pY29uQnV0dG9uSWNvblN0eWxlLFxuICAgICAgICAgIGljb25DbGFzc05hbWU6IGljb25DbGFzc05hbWVSaWdodCxcbiAgICAgICAgICBvblRvdWNoVGFwOiB0aGlzLmhhbmRsZVRvdWNoVGFwUmlnaHRJY29uQnV0dG9uXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIF9QYXBlcjIuZGVmYXVsdCxcbiAgICAgICAgKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7fSwgb3RoZXIsIHtcbiAgICAgICAgICByb3VuZGVkOiBmYWxzZSxcbiAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICAgICAgICBzdHlsZTogKDAsIF9zaW1wbGVBc3NpZ24yLmRlZmF1bHQpKHt9LCBzdHlsZXMucm9vdCwgc3R5bGUpLFxuICAgICAgICAgIHpEZXB0aDogekRlcHRoXG4gICAgICAgIH0pLFxuICAgICAgICBtZW51RWxlbWVudExlZnQsXG4gICAgICAgIHRpdGxlRWxlbWVudCxcbiAgICAgICAgbWVudUVsZW1lbnRSaWdodCxcbiAgICAgICAgY2hpbGRyZW5cbiAgICAgICk7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBBcHBCYXI7XG59KF9yZWFjdC5Db21wb25lbnQpO1xuXG5BcHBCYXIubXVpTmFtZSA9ICdBcHBCYXInO1xuQXBwQmFyLmRlZmF1bHRQcm9wcyA9IHtcbiAgc2hvd01lbnVJY29uQnV0dG9uOiB0cnVlLFxuICB0aXRsZTogJycsXG4gIHpEZXB0aDogMVxufTtcbkFwcEJhci5jb250ZXh0VHlwZXMgPSB7XG4gIG11aVRoZW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkXG59O1xuQXBwQmFyLnByb3BUeXBlcyA9ICBmYWxzZSA/IHtcbiAgLyoqXG4gICAqIENhbiBiZSB1c2VkIHRvIHJlbmRlciBhIHRhYiBpbnNpZGUgYW4gYXBwIGJhciBmb3IgaW5zdGFuY2UuXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlczIuZGVmYXVsdC5ub2RlLFxuICAvKipcbiAgICogQXBwbGllZCB0byB0aGUgYXBwIGJhcidzIHJvb3QgZWxlbWVudC5cbiAgICovXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgY2xhc3NuYW1lIG9mIHRoZSBpY29uIG9uIHRoZSBsZWZ0IG9mIHRoZSBhcHAgYmFyLlxuICAgKiBJZiB5b3UgYXJlIHVzaW5nIGEgc3R5bGVzaGVldCBmb3IgeW91ciBpY29ucywgZW50ZXIgdGhlIGNsYXNzIG5hbWUgZm9yIHRoZSBpY29uIHRvIGJlIHVzZWQgaGVyZS5cbiAgICovXG4gIGljb25DbGFzc05hbWVMZWZ0OiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgLyoqXG4gICAqIFNpbWlsaWFyIHRvIHRoZSBpY29uQ2xhc3NOYW1lTGVmdCBwcm9wIGV4Y2VwdCB0aGF0XG4gICAqIGl0IGFwcGxpZXMgdG8gdGhlIGljb24gZGlzcGxheWVkIG9uIHRoZSByaWdodCBvZiB0aGUgYXBwIGJhci5cbiAgICovXG4gIGljb25DbGFzc05hbWVSaWdodDogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIC8qKlxuICAgKiBUaGUgY3VzdG9tIGVsZW1lbnQgdG8gYmUgZGlzcGxheWVkIG9uIHRoZSBsZWZ0IHNpZGUgb2YgdGhlXG4gICAqIGFwcCBiYXIgc3VjaCBhcyBhbiBTdmdJY29uLlxuICAgKi9cbiAgaWNvbkVsZW1lbnRMZWZ0OiBfcHJvcFR5cGVzMi5kZWZhdWx0LmVsZW1lbnQsXG4gIC8qKlxuICAgKiBTaW1pbGlhciB0byB0aGUgaWNvbkVsZW1lbnRMZWZ0IHByb3AgZXhjZXB0IHRoYXQgdGhpcyBlbGVtZW50IGlzIGRpc3BsYXllZCBvbiB0aGUgcmlnaHQgb2YgdGhlIGFwcCBiYXIuXG4gICAqL1xuICBpY29uRWxlbWVudFJpZ2h0OiBfcHJvcFR5cGVzMi5kZWZhdWx0LmVsZW1lbnQsXG4gIC8qKlxuICAgKiBPdmVycmlkZSB0aGUgaW5saW5lLXN0eWxlcyBvZiB0aGUgZWxlbWVudCBkaXNwbGF5ZWQgb24gdGhlIGxlZnQgc2lkZSBvZiB0aGUgYXBwIGJhci5cbiAgICovXG4gIGljb25TdHlsZUxlZnQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LFxuICAvKipcbiAgICogT3ZlcnJpZGUgdGhlIGlubGluZS1zdHlsZXMgb2YgdGhlIGVsZW1lbnQgZGlzcGxheWVkIG9uIHRoZSByaWdodCBzaWRlIG9mIHRoZSBhcHAgYmFyLlxuICAgKi9cbiAgaWNvblN0eWxlUmlnaHQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LFxuICAvKipcbiAgICogQ2FsbGJhY2sgZnVuY3Rpb24gZm9yIHdoZW4gdGhlIGxlZnQgaWNvbiBpcyBzZWxlY3RlZCB2aWEgYSB0b3VjaCB0YXAuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUb3VjaFRhcCBldmVudCB0YXJnZXRpbmcgdGhlIGxlZnQgYEljb25CdXR0b25gLlxuICAgKi9cbiAgb25MZWZ0SWNvbkJ1dHRvblRvdWNoVGFwOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmdW5jdGlvbiBmb3Igd2hlbiB0aGUgcmlnaHQgaWNvbiBpcyBzZWxlY3RlZCB2aWEgYSB0b3VjaCB0YXAuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUb3VjaFRhcCBldmVudCB0YXJnZXRpbmcgdGhlIHJpZ2h0IGBJY29uQnV0dG9uYC5cbiAgICovXG4gIG9uUmlnaHRJY29uQnV0dG9uVG91Y2hUYXA6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgLyoqXG4gICAqIENhbGxiYWNrIGZ1bmN0aW9uIGZvciB3aGVuIHRoZSB0aXRsZSB0ZXh0IGlzIHNlbGVjdGVkIHZpYSBhIHRvdWNoIHRhcC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRvdWNoVGFwIGV2ZW50IHRhcmdldGluZyB0aGUgYHRpdGxlYCBub2RlLlxuICAgKi9cbiAgb25UaXRsZVRvdWNoVGFwOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgb3Igbm90IHRvIGRpc3BsYXkgdGhlIE1lbnUgaWNvbiBuZXh0IHRvIHRoZSB0aXRsZS5cbiAgICogU2V0dGluZyB0aGlzIHByb3AgdG8gZmFsc2Ugd2lsbCBoaWRlIHRoZSBpY29uLlxuICAgKi9cbiAgc2hvd01lbnVJY29uQnV0dG9uOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIC8qKlxuICAgKiBPdmVycmlkZSB0aGUgaW5saW5lLXN0eWxlcyBvZiB0aGUgcm9vdCBlbGVtZW50LlxuICAgKi9cbiAgc3R5bGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LFxuICAvKipcbiAgICogVGhlIHRpdGxlIHRvIGRpc3BsYXkgb24gdGhlIGFwcCBiYXIuXG4gICAqL1xuICB0aXRsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgdGhlIGlubGluZS1zdHlsZXMgb2YgdGhlIGFwcCBiYXIncyB0aXRsZSBlbGVtZW50LlxuICAgKi9cbiAgdGl0bGVTdHlsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsXG4gIC8qKlxuICAgKiBUaGUgekRlcHRoIG9mIHRoZSBjb21wb25lbnQuXG4gICAqIFRoZSBzaGFkb3cgb2YgdGhlIGFwcCBiYXIgaXMgYWxzbyBkZXBlbmRlbnQgb24gdGhpcyBwcm9wZXJ0eS5cbiAgICovXG4gIHpEZXB0aDogX3Byb3BUeXBlczQuZGVmYXVsdC56RGVwdGhcbn0gOiB7fTtcbmV4cG9ydHMuZGVmYXVsdCA9IEFwcEJhcjtcblxuLyoqKi8gfSksXG5cbi8qKiovIDMwNDpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9nZXRQcm90b3R5cGVPZiA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0UHJvdG90eXBlT2YpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIpO1xuXG52YXIgX2luaGVyaXRzMiA9IF9fd2VicGFja19yZXF1aXJlX18oNik7XG5cbnZhciBfaW5oZXJpdHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5oZXJpdHMyKTtcblxudmFyIF9zaW1wbGVBc3NpZ24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXG52YXIgX3NpbXBsZUFzc2lnbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zaW1wbGVBc3NpZ24pO1xuXG52YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9yZWFjdERvbSA9IF9fd2VicGFja19yZXF1aXJlX18oMTYpO1xuXG52YXIgX3JlYWN0RG9tMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0RG9tKTtcblxudmFyIF9yZWFjdEV2ZW50TGlzdGVuZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExMyk7XG5cbnZhciBfcmVhY3RFdmVudExpc3RlbmVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0RXZlbnRMaXN0ZW5lcik7XG5cbnZhciBfa2V5Y29kZSA9IF9fd2VicGFja19yZXF1aXJlX18oOTMpO1xuXG52YXIgX2tleWNvZGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfa2V5Y29kZSk7XG5cbnZhciBfYXV0b1ByZWZpeCA9IF9fd2VicGFja19yZXF1aXJlX18oNjQpO1xuXG52YXIgX2F1dG9QcmVmaXgyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYXV0b1ByZWZpeCk7XG5cbnZhciBfdHJhbnNpdGlvbnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE1KTtcblxudmFyIF90cmFuc2l0aW9uczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90cmFuc2l0aW9ucyk7XG5cbnZhciBfT3ZlcmxheSA9IF9fd2VicGFja19yZXF1aXJlX18oMzMxKTtcblxudmFyIF9PdmVybGF5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX092ZXJsYXkpO1xuXG52YXIgX1BhcGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0Myk7XG5cbnZhciBfUGFwZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUGFwZXIpO1xuXG52YXIgX3Byb3BUeXBlczMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMxKTtcblxudmFyIF9wcm9wVHlwZXM0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzMyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBvcGVuTmF2RXZlbnRIYW5kbGVyID0gbnVsbDtcblxudmFyIERyYXdlciA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHMzLmRlZmF1bHQpKERyYXdlciwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gRHJhd2VyKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIERyYXdlcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9ICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMuZGVmYXVsdCkodGhpcywgKF9yZWYgPSBEcmF3ZXIuX19wcm90b19fIHx8ICgwLCBfZ2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKERyYXdlcikpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLmhhbmRsZVRvdWNoVGFwT3ZlcmxheSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIF90aGlzLmNsb3NlKCdjbGlja2F3YXknKTtcbiAgICB9LCBfdGhpcy5oYW5kbGVLZXlVcCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKF90aGlzLnN0YXRlLm9wZW4gJiYgIV90aGlzLnByb3BzLmRvY2tlZCAmJiAoMCwgX2tleWNvZGUyLmRlZmF1bHQpKGV2ZW50KSA9PT0gJ2VzYycpIHtcbiAgICAgICAgX3RoaXMuY2xvc2UoJ2VzY2FwZScpO1xuICAgICAgfVxuICAgIH0sIF90aGlzLm9uQm9keVRvdWNoU3RhcnQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHZhciBzd2lwZUFyZWFXaWR0aCA9IF90aGlzLnByb3BzLnN3aXBlQXJlYVdpZHRoO1xuXG4gICAgICB2YXIgdG91Y2hTdGFydFggPSBfdGhpcy5jb250ZXh0Lm11aVRoZW1lLmlzUnRsID8gZG9jdW1lbnQuYm9keS5vZmZzZXRXaWR0aCAtIGV2ZW50LnRvdWNoZXNbMF0ucGFnZVggOiBldmVudC50b3VjaGVzWzBdLnBhZ2VYO1xuICAgICAgdmFyIHRvdWNoU3RhcnRZID0gZXZlbnQudG91Y2hlc1swXS5wYWdlWTtcblxuICAgICAgLy8gT3BlbiBvbmx5IGlmIHN3aXBpbmcgZnJvbSBmYXIgbGVmdCAob3IgcmlnaHQpIHdoaWxlIGNsb3NlZFxuICAgICAgaWYgKHN3aXBlQXJlYVdpZHRoICE9PSBudWxsICYmICFfdGhpcy5zdGF0ZS5vcGVuKSB7XG4gICAgICAgIGlmIChfdGhpcy5wcm9wcy5vcGVuU2Vjb25kYXJ5KSB7XG4gICAgICAgICAgLy8gSWYgb3BlblNlY29uZGFyeSBpcyB0cnVlIGNhbGN1bGF0ZSBmcm9tIHRoZSBmYXIgcmlnaHRcbiAgICAgICAgICBpZiAodG91Y2hTdGFydFggPCBkb2N1bWVudC5ib2R5Lm9mZnNldFdpZHRoIC0gc3dpcGVBcmVhV2lkdGgpIHJldHVybjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBJZiBvcGVuU2Vjb25kYXJ5IGlzIGZhbHNlIGNhbGN1bGF0ZSBmcm9tIHRoZSBmYXIgbGVmdFxuICAgICAgICAgIGlmICh0b3VjaFN0YXJ0WCA+IHN3aXBlQXJlYVdpZHRoKSByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCFfdGhpcy5zdGF0ZS5vcGVuICYmIChvcGVuTmF2RXZlbnRIYW5kbGVyICE9PSBfdGhpcy5vbkJvZHlUb3VjaFN0YXJ0IHx8IF90aGlzLnByb3BzLmRpc2FibGVTd2lwZVRvT3BlbikpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5tYXliZVN3aXBpbmcgPSB0cnVlO1xuICAgICAgX3RoaXMudG91Y2hTdGFydFggPSB0b3VjaFN0YXJ0WDtcbiAgICAgIF90aGlzLnRvdWNoU3RhcnRZID0gdG91Y2hTdGFydFk7XG5cbiAgICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgX3RoaXMub25Cb2R5VG91Y2hNb3ZlKTtcbiAgICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCBfdGhpcy5vbkJvZHlUb3VjaEVuZCk7XG4gICAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoY2FuY2VsJywgX3RoaXMub25Cb2R5VG91Y2hFbmQpO1xuICAgIH0sIF90aGlzLm9uQm9keVRvdWNoTW92ZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgdmFyIGN1cnJlbnRYID0gX3RoaXMuY29udGV4dC5tdWlUaGVtZS5pc1J0bCA/IGRvY3VtZW50LmJvZHkub2Zmc2V0V2lkdGggLSBldmVudC50b3VjaGVzWzBdLnBhZ2VYIDogZXZlbnQudG91Y2hlc1swXS5wYWdlWDtcbiAgICAgIHZhciBjdXJyZW50WSA9IGV2ZW50LnRvdWNoZXNbMF0ucGFnZVk7XG5cbiAgICAgIGlmIChfdGhpcy5zdGF0ZS5zd2lwaW5nKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIF90aGlzLnNldFBvc2l0aW9uKF90aGlzLmdldFRyYW5zbGF0ZVgoY3VycmVudFgpKTtcbiAgICAgIH0gZWxzZSBpZiAoX3RoaXMubWF5YmVTd2lwaW5nKSB7XG4gICAgICAgIHZhciBkWEFicyA9IE1hdGguYWJzKGN1cnJlbnRYIC0gX3RoaXMudG91Y2hTdGFydFgpO1xuICAgICAgICB2YXIgZFlBYnMgPSBNYXRoLmFicyhjdXJyZW50WSAtIF90aGlzLnRvdWNoU3RhcnRZKTtcbiAgICAgICAgLy8gSWYgdGhlIHVzZXIgaGFzIG1vdmVkIGhpcyB0aHVtYiB0ZW4gcGl4ZWxzIGluIGVpdGhlciBkaXJlY3Rpb24sXG4gICAgICAgIC8vIHdlIGNhbiBzYWZlbHkgbWFrZSBhbiBhc3N1bXB0aW9uIGFib3V0IHdoZXRoZXIgaGUgd2FzIGludGVuZGluZ1xuICAgICAgICAvLyB0byBzd2lwZSBvciBzY3JvbGwuXG4gICAgICAgIHZhciB0aHJlc2hvbGQgPSAxMDtcblxuICAgICAgICBpZiAoZFhBYnMgPiB0aHJlc2hvbGQgJiYgZFlBYnMgPD0gdGhyZXNob2xkKSB7XG4gICAgICAgICAgX3RoaXMuc3dpcGVTdGFydFggPSBjdXJyZW50WDtcbiAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBzd2lwaW5nOiBfdGhpcy5zdGF0ZS5vcGVuID8gJ2Nsb3NpbmcnIDogJ29wZW5pbmcnXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgX3RoaXMuc2V0UG9zaXRpb24oX3RoaXMuZ2V0VHJhbnNsYXRlWChjdXJyZW50WCkpO1xuICAgICAgICB9IGVsc2UgaWYgKGRYQWJzIDw9IHRocmVzaG9sZCAmJiBkWUFicyA+IHRocmVzaG9sZCkge1xuICAgICAgICAgIF90aGlzLm9uQm9keVRvdWNoRW5kKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCBfdGhpcy5vbkJvZHlUb3VjaEVuZCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKF90aGlzLnN0YXRlLnN3aXBpbmcpIHtcbiAgICAgICAgdmFyIGN1cnJlbnRYID0gX3RoaXMuY29udGV4dC5tdWlUaGVtZS5pc1J0bCA/IGRvY3VtZW50LmJvZHkub2Zmc2V0V2lkdGggLSBldmVudC5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWCA6IGV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VYO1xuICAgICAgICB2YXIgdHJhbnNsYXRlUmF0aW8gPSBfdGhpcy5nZXRUcmFuc2xhdGVYKGN1cnJlbnRYKSAvIF90aGlzLmdldE1heFRyYW5zbGF0ZVgoKTtcblxuICAgICAgICBfdGhpcy5tYXliZVN3aXBpbmcgPSBmYWxzZTtcbiAgICAgICAgdmFyIHN3aXBpbmcgPSBfdGhpcy5zdGF0ZS5zd2lwaW5nO1xuICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgc3dpcGluZzogbnVsbFxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBXZSBoYXZlIHRvIG9wZW4gb3IgY2xvc2UgYWZ0ZXIgc2V0dGluZyBzd2lwaW5nIHRvIG51bGwsXG4gICAgICAgIC8vIGJlY2F1c2Ugb25seSB0aGVuIENTUyB0cmFuc2l0aW9uIGlzIGVuYWJsZWQuXG4gICAgICAgIGlmICh0cmFuc2xhdGVSYXRpbyA+IDAuNSkge1xuICAgICAgICAgIGlmIChzd2lwaW5nID09PSAnb3BlbmluZycpIHtcbiAgICAgICAgICAgIF90aGlzLnNldFBvc2l0aW9uKF90aGlzLmdldE1heFRyYW5zbGF0ZVgoKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF90aGlzLmNsb3NlKCdzd2lwZScpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoc3dpcGluZyA9PT0gJ29wZW5pbmcnKSB7XG4gICAgICAgICAgICBfdGhpcy5vcGVuKCdzd2lwZScpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfdGhpcy5zZXRQb3NpdGlvbigwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzLm1heWJlU3dpcGluZyA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5yZW1vdmVCb2R5VG91Y2hMaXN0ZW5lcnMoKTtcbiAgICB9LCBfdGVtcCksICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMuZGVmYXVsdCkoX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoRHJhd2VyLCBbe1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxNb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICAgIHRoaXMubWF5YmVTd2lwaW5nID0gZmFsc2U7XG4gICAgICB0aGlzLnRvdWNoU3RhcnRYID0gbnVsbDtcbiAgICAgIHRoaXMudG91Y2hTdGFydFkgPSBudWxsO1xuICAgICAgdGhpcy5zd2lwZVN0YXJ0WCA9IG51bGw7XG5cbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBvcGVuOiB0aGlzLnByb3BzLm9wZW4gIT09IG51bGwgPyB0aGlzLnByb3BzLm9wZW4gOiB0aGlzLnByb3BzLmRvY2tlZCxcbiAgICAgICAgc3dpcGluZzogbnVsbFxuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50RGlkTW91bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHRoaXMuZW5hYmxlU3dpcGVIYW5kbGluZygpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgLy8gSWYgY29udHJvbGxlZCB0aGVuIHRoZSBvcGVuIHByb3AgdGFrZXMgcHJlY2VkZW5jZS5cbiAgICAgIGlmIChuZXh0UHJvcHMub3BlbiAhPT0gbnVsbCkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBvcGVuOiBuZXh0UHJvcHMub3BlblxuICAgICAgICB9KTtcbiAgICAgICAgLy8gT3RoZXJ3aXNlLCBpZiBkb2NrZWQgaXMgY2hhbmdlZCwgY2hhbmdlIHRoZSBvcGVuIHN0YXRlIGZvciB3aGVuIHVuY29udHJvbGxlZC5cbiAgICAgIH0gZWxzZSBpZiAodGhpcy5wcm9wcy5kb2NrZWQgIT09IG5leHRQcm9wcy5kb2NrZWQpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgb3BlbjogbmV4dFByb3BzLmRvY2tlZFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnREaWRVcGRhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgICB0aGlzLmVuYWJsZVN3aXBlSGFuZGxpbmcoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsVW5tb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgdGhpcy5kaXNhYmxlU3dpcGVIYW5kbGluZygpO1xuICAgICAgdGhpcy5yZW1vdmVCb2R5VG91Y2hMaXN0ZW5lcnMoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRTdHlsZXMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTdHlsZXMoKSB7XG4gICAgICB2YXIgbXVpVGhlbWUgPSB0aGlzLmNvbnRleHQubXVpVGhlbWU7XG4gICAgICB2YXIgdGhlbWUgPSBtdWlUaGVtZS5kcmF3ZXI7XG5cbiAgICAgIHZhciB4ID0gdGhpcy5nZXRUcmFuc2xhdGVNdWx0aXBsaWVyKCkgKiAodGhpcy5zdGF0ZS5vcGVuID8gMCA6IHRoaXMuZ2V0TWF4VHJhbnNsYXRlWCgpKTtcblxuICAgICAgdmFyIHN0eWxlcyA9IHtcbiAgICAgICAgcm9vdDoge1xuICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgIHdpZHRoOiB0aGlzLmdldFRyYW5zbGF0ZWRXaWR0aCgpIHx8IHRoZW1lLndpZHRoLFxuICAgICAgICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgICAgICAgIHpJbmRleDogbXVpVGhlbWUuekluZGV4LmRyYXdlcixcbiAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoJyArIHggKyAncHgsIDApJyxcbiAgICAgICAgICB0cmFuc2l0aW9uOiAhdGhpcy5zdGF0ZS5zd2lwaW5nICYmIF90cmFuc2l0aW9uczIuZGVmYXVsdC5lYXNlT3V0KG51bGwsICd0cmFuc2Zvcm0nLCBudWxsKSxcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLmNvbG9yLFxuICAgICAgICAgIG92ZXJmbG93OiAnYXV0bycsXG4gICAgICAgICAgV2Via2l0T3ZlcmZsb3dTY3JvbGxpbmc6ICd0b3VjaCcgLy8gaU9TIG1vbWVudHVtIHNjcm9sbGluZ1xuICAgICAgICB9LFxuICAgICAgICBvdmVybGF5OiB7XG4gICAgICAgICAgekluZGV4OiBtdWlUaGVtZS56SW5kZXguZHJhd2VyT3ZlcmxheSxcbiAgICAgICAgICBwb2ludGVyRXZlbnRzOiB0aGlzLnN0YXRlLm9wZW4gPyAnYXV0bycgOiAnbm9uZScgLy8gQnlwYXNzIG1vdXNlIGV2ZW50cyB3aGVuIGxlZnQgbmF2IGlzIGNsb3NpbmcuXG4gICAgICAgIH0sXG4gICAgICAgIHJvb3RXaGVuT3BlblJpZ2h0OiB7XG4gICAgICAgICAgbGVmdDogJ2F1dG8nLFxuICAgICAgICAgIHJpZ2h0OiAwXG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBzdHlsZXM7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2hvdWxkU2hvdycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNob3VsZFNob3coKSB7XG4gICAgICByZXR1cm4gdGhpcy5zdGF0ZS5vcGVuIHx8ICEhdGhpcy5zdGF0ZS5zd2lwaW5nOyAvLyBjb21wb25lbnQgaXMgc3dpcGluZ1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2Nsb3NlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2xvc2UocmVhc29uKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy5vcGVuID09PSBudWxsKSB0aGlzLnNldFN0YXRlKHsgb3BlbjogZmFsc2UgfSk7XG4gICAgICBpZiAodGhpcy5wcm9wcy5vblJlcXVlc3RDaGFuZ2UpIHRoaXMucHJvcHMub25SZXF1ZXN0Q2hhbmdlKGZhbHNlLCByZWFzb24pO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnb3BlbicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9wZW4ocmVhc29uKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy5vcGVuID09PSBudWxsKSB0aGlzLnNldFN0YXRlKHsgb3BlbjogdHJ1ZSB9KTtcbiAgICAgIGlmICh0aGlzLnByb3BzLm9uUmVxdWVzdENoYW5nZSkgdGhpcy5wcm9wcy5vblJlcXVlc3RDaGFuZ2UodHJ1ZSwgcmVhc29uKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldFRyYW5zbGF0ZWRXaWR0aCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFRyYW5zbGF0ZWRXaWR0aCgpIHtcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5wcm9wcy53aWR0aCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKCEvXlxcZCsoXFwuXFxkKyk/JSQvLnRlc3QodGhpcy5wcm9wcy53aWR0aCkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBhIHZhbGlkIHBlcmNlbnRhZ2UgZm9ybWF0LicpO1xuICAgICAgICB9XG4gICAgICAgIHZhciB3aWR0aCA9IHBhcnNlRmxvYXQodGhpcy5wcm9wcy53aWR0aCkgLyAxMDAuMDtcbiAgICAgICAgLy8gV2UgYXJlIGRvaW5nIG91ciBiZXN0IG9uIHRoZSBTZXJ2ZXIgdG8gcmVuZGVyIGEgY29uc2lzdGVudCBVSSwgaGVuY2UgdGhlXG4gICAgICAgIC8vIGRlZmF1bHQgdmFsdWUgb2YgMTAwMDBcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2lkdGggKiB3aW5kb3cuaW5uZXJXaWR0aCA6IDEwMDAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMud2lkdGg7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0TWF4VHJhbnNsYXRlWCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldE1heFRyYW5zbGF0ZVgoKSB7XG4gICAgICB2YXIgd2lkdGggPSB0aGlzLmdldFRyYW5zbGF0ZWRXaWR0aCgpIHx8IHRoaXMuY29udGV4dC5tdWlUaGVtZS5kcmF3ZXIud2lkdGg7XG4gICAgICByZXR1cm4gd2lkdGggKyAxMDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRUcmFuc2xhdGVNdWx0aXBsaWVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VHJhbnNsYXRlTXVsdGlwbGllcigpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLm9wZW5TZWNvbmRhcnkgPyAxIDogLTE7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZW5hYmxlU3dpcGVIYW5kbGluZycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVuYWJsZVN3aXBlSGFuZGxpbmcoKSB7XG4gICAgICBpZiAoIXRoaXMucHJvcHMuZG9ja2VkKSB7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHRoaXMub25Cb2R5VG91Y2hTdGFydCk7XG4gICAgICAgIGlmICghb3Blbk5hdkV2ZW50SGFuZGxlcikge1xuICAgICAgICAgIG9wZW5OYXZFdmVudEhhbmRsZXIgPSB0aGlzLm9uQm9keVRvdWNoU3RhcnQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZGlzYWJsZVN3aXBlSGFuZGxpbmcoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdkaXNhYmxlU3dpcGVIYW5kbGluZycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRpc2FibGVTd2lwZUhhbmRsaW5nKCkge1xuICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5vbkJvZHlUb3VjaFN0YXJ0KTtcbiAgICAgIGlmIChvcGVuTmF2RXZlbnRIYW5kbGVyID09PSB0aGlzLm9uQm9keVRvdWNoU3RhcnQpIHtcbiAgICAgICAgb3Blbk5hdkV2ZW50SGFuZGxlciA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVtb3ZlQm9keVRvdWNoTGlzdGVuZXJzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlQm9keVRvdWNoTGlzdGVuZXJzKCkge1xuICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCB0aGlzLm9uQm9keVRvdWNoTW92ZSk7XG4gICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgdGhpcy5vbkJvZHlUb3VjaEVuZCk7XG4gICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoY2FuY2VsJywgdGhpcy5vbkJvZHlUb3VjaEVuZCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2V0UG9zaXRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRQb3NpdGlvbih0cmFuc2xhdGVYKSB7XG4gICAgICB2YXIgcnRsVHJhbnNsYXRlTXVsdGlwbGllciA9IHRoaXMuY29udGV4dC5tdWlUaGVtZS5pc1J0bCA/IC0xIDogMTtcbiAgICAgIHZhciBkcmF3ZXIgPSBfcmVhY3REb20yLmRlZmF1bHQuZmluZERPTU5vZGUodGhpcy5yZWZzLmNsaWNrQXdheWFibGVFbGVtZW50KTtcbiAgICAgIHZhciB0cmFuc2Zvcm1DU1MgPSAndHJhbnNsYXRlKCcgKyB0aGlzLmdldFRyYW5zbGF0ZU11bHRpcGxpZXIoKSAqIHJ0bFRyYW5zbGF0ZU11bHRpcGxpZXIgKiB0cmFuc2xhdGVYICsgJ3B4LCAwKSc7XG4gICAgICB0aGlzLnJlZnMub3ZlcmxheS5zZXRPcGFjaXR5KDEgLSB0cmFuc2xhdGVYIC8gdGhpcy5nZXRNYXhUcmFuc2xhdGVYKCkpO1xuICAgICAgX2F1dG9QcmVmaXgyLmRlZmF1bHQuc2V0KGRyYXdlci5zdHlsZSwgJ3RyYW5zZm9ybScsIHRyYW5zZm9ybUNTUyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0VHJhbnNsYXRlWCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFRyYW5zbGF0ZVgoY3VycmVudFgpIHtcbiAgICAgIHJldHVybiBNYXRoLm1pbihNYXRoLm1heCh0aGlzLnN0YXRlLnN3aXBpbmcgPT09ICdjbG9zaW5nJyA/IHRoaXMuZ2V0VHJhbnNsYXRlTXVsdGlwbGllcigpICogKGN1cnJlbnRYIC0gdGhpcy5zd2lwZVN0YXJ0WCkgOiB0aGlzLmdldE1heFRyYW5zbGF0ZVgoKSAtIHRoaXMuZ2V0VHJhbnNsYXRlTXVsdGlwbGllcigpICogKHRoaXMuc3dpcGVTdGFydFggLSBjdXJyZW50WCksIDApLCB0aGlzLmdldE1heFRyYW5zbGF0ZVgoKSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgY2xhc3NOYW1lID0gX3Byb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgICBjb250YWluZXJDbGFzc05hbWUgPSBfcHJvcHMuY29udGFpbmVyQ2xhc3NOYW1lLFxuICAgICAgICAgIGNvbnRhaW5lclN0eWxlID0gX3Byb3BzLmNvbnRhaW5lclN0eWxlLFxuICAgICAgICAgIGRvY2tlZCA9IF9wcm9wcy5kb2NrZWQsXG4gICAgICAgICAgb3BlblNlY29uZGFyeSA9IF9wcm9wcy5vcGVuU2Vjb25kYXJ5LFxuICAgICAgICAgIG92ZXJsYXlDbGFzc05hbWUgPSBfcHJvcHMub3ZlcmxheUNsYXNzTmFtZSxcbiAgICAgICAgICBvdmVybGF5U3R5bGUgPSBfcHJvcHMub3ZlcmxheVN0eWxlLFxuICAgICAgICAgIHN0eWxlID0gX3Byb3BzLnN0eWxlLFxuICAgICAgICAgIHpEZXB0aCA9IF9wcm9wcy56RGVwdGg7XG5cblxuICAgICAgdmFyIHN0eWxlcyA9IHRoaXMuZ2V0U3R5bGVzKCk7XG5cbiAgICAgIHZhciBvdmVybGF5ID0gdm9pZCAwO1xuICAgICAgaWYgKCFkb2NrZWQpIHtcbiAgICAgICAgb3ZlcmxheSA9IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9PdmVybGF5Mi5kZWZhdWx0LCB7XG4gICAgICAgICAgcmVmOiAnb3ZlcmxheScsXG4gICAgICAgICAgc2hvdzogdGhpcy5zaG91bGRTaG93KCksXG4gICAgICAgICAgY2xhc3NOYW1lOiBvdmVybGF5Q2xhc3NOYW1lLFxuICAgICAgICAgIHN0eWxlOiAoMCwgX3NpbXBsZUFzc2lnbjIuZGVmYXVsdCkoc3R5bGVzLm92ZXJsYXksIG92ZXJsYXlTdHlsZSksXG4gICAgICAgICAgdHJhbnNpdGlvbkVuYWJsZWQ6ICF0aGlzLnN0YXRlLnN3aXBpbmcsXG4gICAgICAgICAgb25Ub3VjaFRhcDogdGhpcy5oYW5kbGVUb3VjaFRhcE92ZXJsYXlcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHtcbiAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICAgICAgICBzdHlsZTogc3R5bGVcbiAgICAgICAgfSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0RXZlbnRMaXN0ZW5lcjIuZGVmYXVsdCwgeyB0YXJnZXQ6ICd3aW5kb3cnLCBvbktleVVwOiB0aGlzLmhhbmRsZUtleVVwIH0pLFxuICAgICAgICBvdmVybGF5LFxuICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBfUGFwZXIyLmRlZmF1bHQsXG4gICAgICAgICAge1xuICAgICAgICAgICAgcmVmOiAnY2xpY2tBd2F5YWJsZUVsZW1lbnQnLFxuICAgICAgICAgICAgekRlcHRoOiB6RGVwdGgsXG4gICAgICAgICAgICByb3VuZGVkOiBmYWxzZSxcbiAgICAgICAgICAgIHRyYW5zaXRpb25FbmFibGVkOiAhdGhpcy5zdGF0ZS5zd2lwaW5nLFxuICAgICAgICAgICAgY2xhc3NOYW1lOiBjb250YWluZXJDbGFzc05hbWUsXG4gICAgICAgICAgICBzdHlsZTogKDAsIF9zaW1wbGVBc3NpZ24yLmRlZmF1bHQpKHN0eWxlcy5yb290LCBvcGVuU2Vjb25kYXJ5ICYmIHN0eWxlcy5yb290V2hlbk9wZW5SaWdodCwgY29udGFpbmVyU3R5bGUpXG4gICAgICAgICAgfSxcbiAgICAgICAgICBjaGlsZHJlblxuICAgICAgICApXG4gICAgICApO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gRHJhd2VyO1xufShfcmVhY3QuQ29tcG9uZW50KTtcblxuRHJhd2VyLmRlZmF1bHRQcm9wcyA9IHtcbiAgZGlzYWJsZVN3aXBlVG9PcGVuOiBmYWxzZSxcbiAgZG9ja2VkOiB0cnVlLFxuICBvcGVuOiBudWxsLFxuICBvcGVuU2Vjb25kYXJ5OiBmYWxzZSxcbiAgc3dpcGVBcmVhV2lkdGg6IDMwLFxuICB3aWR0aDogbnVsbCxcbiAgekRlcHRoOiAyXG59O1xuRHJhd2VyLmNvbnRleHRUeXBlcyA9IHtcbiAgbXVpVGhlbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWRcbn07XG5EcmF3ZXIucHJvcFR5cGVzID0gIGZhbHNlID8ge1xuICAvKipcbiAgICogVGhlIGNvbnRlbnRzIG9mIHRoZSBgRHJhd2VyYFxuICAgKi9cbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMyLmRlZmF1bHQubm9kZSxcbiAgLyoqXG4gICAqIFRoZSBDU1MgY2xhc3MgbmFtZSBvZiB0aGUgcm9vdCBlbGVtZW50LlxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBDU1MgY2xhc3MgbmFtZSBvZiB0aGUgY29udGFpbmVyIGVsZW1lbnQuXG4gICAqL1xuICBjb250YWluZXJDbGFzc05hbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICAvKipcbiAgICogT3ZlcnJpZGUgdGhlIGlubGluZS1zdHlsZXMgb2YgdGhlIGNvbnRhaW5lciBlbGVtZW50LlxuICAgKi9cbiAgY29udGFpbmVyU3R5bGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LFxuICAvKipcbiAgICogSWYgdHJ1ZSwgc3dpcGluZyBzaWRld2F5cyB3aGVuIHRoZSBgRHJhd2VyYCBpcyBjbG9zZWQgd2lsbCBub3Qgb3BlbiBpdC5cbiAgICovXG4gIGRpc2FibGVTd2lwZVRvT3BlbjogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAvKipcbiAgICogSWYgdHJ1ZSwgdGhlIGBEcmF3ZXJgIHdpbGwgYmUgZG9ja2VkLiBJbiB0aGlzIHN0YXRlLCB0aGUgb3ZlcmxheSB3b24ndCBzaG93IGFuZFxuICAgKiBjbGlja2luZyBvbiBhIG1lbnUgaXRlbSB3aWxsIG5vdCBjbG9zZSB0aGUgYERyYXdlcmAuXG4gICAqL1xuICBkb2NrZWQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgLyoqXG4gICAqIENhbGxiYWNrIGZ1bmN0aW9uIGZpcmVkIHdoZW4gdGhlIGBvcGVuYCBzdGF0ZSBvZiB0aGUgYERyYXdlcmAgaXMgcmVxdWVzdGVkIHRvIGJlIGNoYW5nZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gb3BlbiBJZiB0cnVlLCB0aGUgYERyYXdlcmAgd2FzIHJlcXVlc3RlZCB0byBiZSBvcGVuZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWFzb24gVGhlIHJlYXNvbiBmb3IgdGhlIG9wZW4gb3IgY2xvc2UgcmVxdWVzdC4gUG9zc2libGUgdmFsdWVzIGFyZVxuICAgKiAnc3dpcGUnIGZvciBvcGVuIHJlcXVlc3RzOyAnY2xpY2thd2F5JyAob24gb3ZlcmxheSBjbGlja3MpLFxuICAgKiAnZXNjYXBlJyAob24gZXNjYXBlIGtleSBwcmVzcyksIGFuZCAnc3dpcGUnIGZvciBjbG9zZSByZXF1ZXN0cy5cbiAgICovXG4gIG9uUmVxdWVzdENoYW5nZTogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICAvKipcbiAgICogSWYgdHJ1ZSwgdGhlIGBEcmF3ZXJgIGlzIG9wZW5lZC4gIFByb3ZpZGluZyBhIHZhbHVlIHdpbGwgdHVybiB0aGUgYERyYXdlcmBcbiAgICogaW50byBhIGNvbnRyb2xsZWQgY29tcG9uZW50LlxuICAgKi9cbiAgb3BlbjogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAvKipcbiAgICogSWYgdHJ1ZSwgdGhlIGBEcmF3ZXJgIGlzIHBvc2l0aW9uZWQgdG8gb3BlbiBmcm9tIHRoZSBvcHBvc2l0ZSBzaWRlLlxuICAgKi9cbiAgb3BlblNlY29uZGFyeTogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAvKipcbiAgICogVGhlIENTUyBjbGFzcyBuYW1lIHRvIGFkZCB0byB0aGUgYE92ZXJsYXlgIGNvbXBvbmVudCB0aGF0IGlzIHJlbmRlcmVkIGJlaGluZCB0aGUgYERyYXdlcmAuXG4gICAqL1xuICBvdmVybGF5Q2xhc3NOYW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRoZSBpbmxpbmUtc3R5bGVzIG9mIHRoZSBgT3ZlcmxheWAgY29tcG9uZW50IHRoYXQgaXMgcmVuZGVyZWQgYmVoaW5kIHRoZSBgRHJhd2VyYC5cbiAgICovXG4gIG92ZXJsYXlTdHlsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsXG4gIC8qKlxuICAgKiBPdmVycmlkZSB0aGUgaW5saW5lLXN0eWxlcyBvZiB0aGUgcm9vdCBlbGVtZW50LlxuICAgKi9cbiAgc3R5bGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LFxuICAvKipcbiAgICogVGhlIHdpZHRoIG9mIHRoZSBsZWZ0IG1vc3QgKG9yIHJpZ2h0IG1vc3QpIGFyZWEgaW4gcGl4ZWxzIHdoZXJlIHRoZSBgRHJhd2VyYCBjYW4gYmVcbiAgICogc3dpcGVkIG9wZW4gZnJvbS4gU2V0dGluZyB0aGlzIHRvIGBudWxsYCBzcGFucyB0aGF0IGFyZWEgdG8gdGhlIGVudGlyZSBwYWdlXG4gICAqICgqKkNBVVRJT04hKiogU2V0dGluZyB0aGlzIHByb3BlcnR5IHRvIGBudWxsYCBtaWdodCBjYXVzZSBpc3N1ZXMgd2l0aCBzbGlkZXJzIGFuZFxuICAgKiBzd2lwZWFibGUgYFRhYnNgOiB1c2UgYXQgeW91ciBvd24gcmlzaykuXG4gICAqL1xuICBzd2lwZUFyZWFXaWR0aDogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gIC8qKlxuICAgKiBUaGUgd2lkdGggb2YgdGhlIGBEcmF3ZXJgIGluIHBpeGVscyBvciBwZXJjZW50YWdlIGluIHN0cmluZyBmb3JtYXQgZXguIGA1MCVgIHRvIGZpbGxcbiAgICogaGFsZiBvZiB0aGUgd2luZG93IG9yIGAxMDAlYCBhbmQgc28gb24uIERlZmF1bHRzIHRvIHVzaW5nIHRoZSB2YWx1ZXMgZnJvbSB0aGVtZS5cbiAgICovXG4gIHdpZHRoOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyXSksXG4gIC8qKlxuICAgKiBUaGUgekRlcHRoIG9mIHRoZSBgRHJhd2VyYC5cbiAgICovXG4gIHpEZXB0aDogX3Byb3BUeXBlczQuZGVmYXVsdC56RGVwdGhcblxufSA6IHt9O1xuZXhwb3J0cy5kZWZhdWx0ID0gRHJhd2VyO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMzEwOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9fd2VicGFja19yZXF1aXJlX18oOSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyKTtcblxudmFyIF9leHRlbmRzMiA9IF9fd2VicGFja19yZXF1aXJlX18oMTIpO1xuXG52YXIgX2V4dGVuZHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXh0ZW5kczIpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcblxudmFyIF9nZXRQcm90b3R5cGVPZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRQcm90b3R5cGVPZik7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cbnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IF9fd2VicGFja19yZXF1aXJlX18oNyk7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMik7XG5cbnZhciBfaW5oZXJpdHMyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcblxudmFyIF9pbmhlcml0czMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbmhlcml0czIpO1xuXG52YXIgX3NpbXBsZUFzc2lnbiA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cbnZhciBfc2ltcGxlQXNzaWduMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NpbXBsZUFzc2lnbik7XG5cbnZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX3JlYWN0RG9tID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNik7XG5cbnZhciBfcmVhY3REb20yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3REb20pO1xuXG52YXIgX3NoYWxsb3dFcXVhbCA9IF9fd2VicGFja19yZXF1aXJlX18oMzYpO1xuXG52YXIgX3NoYWxsb3dFcXVhbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zaGFsbG93RXF1YWwpO1xuXG52YXIgX2NvbG9yTWFuaXB1bGF0b3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDU3KTtcblxudmFyIF90cmFuc2l0aW9ucyA9IF9fd2VicGFja19yZXF1aXJlX18oMTUpO1xuXG52YXIgX3RyYW5zaXRpb25zMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3RyYW5zaXRpb25zKTtcblxudmFyIF9FbmhhbmNlZEJ1dHRvbiA9IF9fd2VicGFja19yZXF1aXJlX18oNjMpO1xuXG52YXIgX0VuaGFuY2VkQnV0dG9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0VuaGFuY2VkQnV0dG9uKTtcblxudmFyIF9JY29uQnV0dG9uID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5NCk7XG5cbnZhciBfSWNvbkJ1dHRvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9JY29uQnV0dG9uKTtcblxudmFyIF9leHBhbmRMZXNzID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNDgpO1xuXG52YXIgX2V4cGFuZExlc3MyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXhwYW5kTGVzcyk7XG5cbnZhciBfZXhwYW5kTW9yZSA9IF9fd2VicGFja19yZXF1aXJlX18oMzQ5KTtcblxudmFyIF9leHBhbmRNb3JlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4cGFuZE1vcmUpO1xuXG52YXIgX05lc3RlZExpc3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMxMSk7XG5cbnZhciBfTmVzdGVkTGlzdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9OZXN0ZWRMaXN0KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gZ2V0U3R5bGVzKHByb3BzLCBjb250ZXh0LCBzdGF0ZSkge1xuICB2YXIgYXV0b0dlbmVyYXRlTmVzdGVkSW5kaWNhdG9yID0gcHJvcHMuYXV0b0dlbmVyYXRlTmVzdGVkSW5kaWNhdG9yLFxuICAgICAgaW5zZXRDaGlsZHJlbiA9IHByb3BzLmluc2V0Q2hpbGRyZW4sXG4gICAgICBsZWZ0QXZhdGFyID0gcHJvcHMubGVmdEF2YXRhcixcbiAgICAgIGxlZnRDaGVja2JveCA9IHByb3BzLmxlZnRDaGVja2JveCxcbiAgICAgIGxlZnRJY29uID0gcHJvcHMubGVmdEljb24sXG4gICAgICBuZXN0ZWRJdGVtcyA9IHByb3BzLm5lc3RlZEl0ZW1zLFxuICAgICAgbmVzdGVkTGV2ZWwgPSBwcm9wcy5uZXN0ZWRMZXZlbCxcbiAgICAgIHJpZ2h0QXZhdGFyID0gcHJvcHMucmlnaHRBdmF0YXIsXG4gICAgICByaWdodEljb24gPSBwcm9wcy5yaWdodEljb24sXG4gICAgICByaWdodEljb25CdXR0b24gPSBwcm9wcy5yaWdodEljb25CdXR0b24sXG4gICAgICByaWdodFRvZ2dsZSA9IHByb3BzLnJpZ2h0VG9nZ2xlLFxuICAgICAgc2Vjb25kYXJ5VGV4dCA9IHByb3BzLnNlY29uZGFyeVRleHQsXG4gICAgICBzZWNvbmRhcnlUZXh0TGluZXMgPSBwcm9wcy5zZWNvbmRhcnlUZXh0TGluZXM7XG4gIHZhciBtdWlUaGVtZSA9IGNvbnRleHQubXVpVGhlbWU7XG4gIHZhciBsaXN0SXRlbSA9IG11aVRoZW1lLmxpc3RJdGVtO1xuXG5cbiAgdmFyIHRleHRDb2xvciA9IG11aVRoZW1lLmJhc2VUaGVtZS5wYWxldHRlLnRleHRDb2xvcjtcbiAgdmFyIGhvdmVyQ29sb3IgPSBwcm9wcy5ob3ZlckNvbG9yIHx8ICgwLCBfY29sb3JNYW5pcHVsYXRvci5mYWRlKSh0ZXh0Q29sb3IsIDAuMSk7XG4gIHZhciBzaW5nbGVBdmF0YXIgPSAhc2Vjb25kYXJ5VGV4dCAmJiAobGVmdEF2YXRhciB8fCByaWdodEF2YXRhcik7XG4gIHZhciBzaW5nbGVOb0F2YXRhciA9ICFzZWNvbmRhcnlUZXh0ICYmICEobGVmdEF2YXRhciB8fCByaWdodEF2YXRhcik7XG4gIHZhciB0d29MaW5lID0gc2Vjb25kYXJ5VGV4dCAmJiBzZWNvbmRhcnlUZXh0TGluZXMgPT09IDE7XG4gIHZhciB0aHJlZUxpbmUgPSBzZWNvbmRhcnlUZXh0ICYmIHNlY29uZGFyeVRleHRMaW5lcyA+IDE7XG5cbiAgdmFyIGlzS2V5Ym9hcmRGb2N1c2VkID0gKHByb3BzLmlzS2V5Ym9hcmRGb2N1c2VkICE9PSB1bmRlZmluZWQgPyBwcm9wcyA6IHN0YXRlKS5pc0tleWJvYXJkRm9jdXNlZDtcblxuICB2YXIgc3R5bGVzID0ge1xuICAgIHJvb3Q6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogKGlzS2V5Ym9hcmRGb2N1c2VkIHx8IHN0YXRlLmhvdmVyZWQpICYmICFzdGF0ZS5yaWdodEljb25CdXR0b25Ib3ZlcmVkICYmICFzdGF0ZS5yaWdodEljb25CdXR0b25LZXlib2FyZEZvY3VzZWQgPyBob3ZlckNvbG9yIDogbnVsbCxcbiAgICAgIGNvbG9yOiB0ZXh0Q29sb3IsXG4gICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgZm9udFNpemU6IDE2LFxuICAgICAgbGluZUhlaWdodDogJzE2cHgnLFxuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICB0cmFuc2l0aW9uOiBfdHJhbnNpdGlvbnMyLmRlZmF1bHQuZWFzZU91dCgpXG4gICAgfSxcblxuICAgIC8vIFRoaXMgaW5uZXIgZGl2IGlzIG5lZWRlZCBzbyB0aGF0IHJpcHBsZXMgd2lsbCBzcGFuIHRoZSBlbnRpcmUgY29udGFpbmVyXG4gICAgaW5uZXJEaXY6IHtcbiAgICAgIG1hcmdpbkxlZnQ6IG5lc3RlZExldmVsICogbGlzdEl0ZW0ubmVzdGVkTGV2ZWxEZXB0aCxcbiAgICAgIHBhZGRpbmdMZWZ0OiBsZWZ0SWNvbiB8fCBsZWZ0QXZhdGFyIHx8IGxlZnRDaGVja2JveCB8fCBpbnNldENoaWxkcmVuID8gNzIgOiAxNixcbiAgICAgIHBhZGRpbmdSaWdodDogcmlnaHRJY29uIHx8IHJpZ2h0QXZhdGFyIHx8IHJpZ2h0SWNvbkJ1dHRvbiB8fCBuZXN0ZWRJdGVtcy5sZW5ndGggJiYgYXV0b0dlbmVyYXRlTmVzdGVkSW5kaWNhdG9yID8gNTYgOiByaWdodFRvZ2dsZSA/IDcyIDogMTYsXG4gICAgICBwYWRkaW5nQm90dG9tOiBzaW5nbGVBdmF0YXIgPyAyMCA6IDE2LFxuICAgICAgcGFkZGluZ1RvcDogc2luZ2xlTm9BdmF0YXIgfHwgdGhyZWVMaW5lID8gMTYgOiAyMCxcbiAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnXG4gICAgfSxcblxuICAgIGljb25zOiB7XG4gICAgICBoZWlnaHQ6IDI0LFxuICAgICAgd2lkdGg6IDI0LFxuICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgdG9wOiB0d29MaW5lID8gMTIgOiBzaW5nbGVBdmF0YXIgPyA0IDogMCxcbiAgICAgIG1hcmdpbjogMTJcbiAgICB9LFxuXG4gICAgbGVmdEljb246IHtcbiAgICAgIGxlZnQ6IDRcbiAgICB9LFxuXG4gICAgcmlnaHRJY29uOiB7XG4gICAgICByaWdodDogNFxuICAgIH0sXG5cbiAgICBhdmF0YXJzOiB7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIHRvcDogc2luZ2xlQXZhdGFyID8gOCA6IDE2XG4gICAgfSxcblxuICAgIGxhYmVsOiB7XG4gICAgICBjdXJzb3I6ICdwb2ludGVyJ1xuICAgIH0sXG5cbiAgICBsZWZ0QXZhdGFyOiB7XG4gICAgICBsZWZ0OiAxNlxuICAgIH0sXG5cbiAgICByaWdodEF2YXRhcjoge1xuICAgICAgcmlnaHQ6IDE2XG4gICAgfSxcblxuICAgIGxlZnRDaGVja2JveDoge1xuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgd2lkdGg6IDI0LFxuICAgICAgdG9wOiB0d29MaW5lID8gMjQgOiBzaW5nbGVBdmF0YXIgPyAxNiA6IDEyLFxuICAgICAgbGVmdDogMTZcbiAgICB9LFxuXG4gICAgcHJpbWFyeVRleHQ6IHt9LFxuXG4gICAgcmlnaHRJY29uQnV0dG9uOiB7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICB0b3A6IHR3b0xpbmUgPyAxMiA6IHNpbmdsZUF2YXRhciA/IDQgOiAwLFxuICAgICAgcmlnaHQ6IDRcbiAgICB9LFxuXG4gICAgcmlnaHRUb2dnbGU6IHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgIHdpZHRoOiA1NCxcbiAgICAgIHRvcDogdHdvTGluZSA/IDI1IDogc2luZ2xlQXZhdGFyID8gMTcgOiAxMyxcbiAgICAgIHJpZ2h0OiA4XG4gICAgfSxcblxuICAgIHNlY29uZGFyeVRleHQ6IHtcbiAgICAgIGZvbnRTaXplOiAxNCxcbiAgICAgIGxpbmVIZWlnaHQ6IHRocmVlTGluZSA/ICcxOHB4JyA6ICcxNnB4JyxcbiAgICAgIGhlaWdodDogdGhyZWVMaW5lID8gMzYgOiAxNixcbiAgICAgIG1hcmdpbjogMCxcbiAgICAgIG1hcmdpblRvcDogNCxcbiAgICAgIGNvbG9yOiBsaXN0SXRlbS5zZWNvbmRhcnlUZXh0Q29sb3IsXG5cbiAgICAgIC8vIG5lZWRlZCBmb3IgMiBhbmQgMyBsaW5lIGVsbGlwc2lzXG4gICAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gICAgICB0ZXh0T3ZlcmZsb3c6ICdlbGxpcHNpcycsXG4gICAgICB3aGl0ZVNwYWNlOiB0aHJlZUxpbmUgPyBudWxsIDogJ25vd3JhcCcsXG4gICAgICBkaXNwbGF5OiB0aHJlZUxpbmUgPyAnLXdlYmtpdC1ib3gnIDogbnVsbCxcbiAgICAgIFdlYmtpdExpbmVDbGFtcDogdGhyZWVMaW5lID8gMiA6IG51bGwsXG4gICAgICBXZWJraXRCb3hPcmllbnQ6IHRocmVlTGluZSA/ICd2ZXJ0aWNhbCcgOiBudWxsXG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBzdHlsZXM7XG59XG5cbnZhciBMaXN0SXRlbSA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHMzLmRlZmF1bHQpKExpc3RJdGVtLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBMaXN0SXRlbSgpIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBMaXN0SXRlbSk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9ICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMuZGVmYXVsdCkodGhpcywgKF9yZWYgPSBMaXN0SXRlbS5fX3Byb3RvX18gfHwgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoTGlzdEl0ZW0pKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGhvdmVyZWQ6IGZhbHNlLFxuICAgICAgaXNLZXlib2FyZEZvY3VzZWQ6IGZhbHNlLFxuICAgICAgb3BlbjogZmFsc2UsXG4gICAgICByaWdodEljb25CdXR0b25Ib3ZlcmVkOiBmYWxzZSxcbiAgICAgIHJpZ2h0SWNvbkJ1dHRvbktleWJvYXJkRm9jdXNlZDogZmFsc2UsXG4gICAgICB0b3VjaDogZmFsc2VcbiAgICB9LCBfdGhpcy5oYW5kbGVLZXlib2FyZEZvY3VzID0gZnVuY3Rpb24gKGV2ZW50LCBpc0tleWJvYXJkRm9jdXNlZCkge1xuICAgICAgX3RoaXMuc2V0U3RhdGUoeyBpc0tleWJvYXJkRm9jdXNlZDogaXNLZXlib2FyZEZvY3VzZWQgfSk7XG4gICAgICBfdGhpcy5wcm9wcy5vbktleWJvYXJkRm9jdXMoZXZlbnQsIGlzS2V5Ym9hcmRGb2N1c2VkKTtcbiAgICB9LCBfdGhpcy5oYW5kbGVNb3VzZUVudGVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoIV90aGlzLnN0YXRlLnRvdWNoKSBfdGhpcy5zZXRTdGF0ZSh7IGhvdmVyZWQ6IHRydWUgfSk7XG4gICAgICBfdGhpcy5wcm9wcy5vbk1vdXNlRW50ZXIoZXZlbnQpO1xuICAgIH0sIF90aGlzLmhhbmRsZU1vdXNlTGVhdmUgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIF90aGlzLnNldFN0YXRlKHsgaG92ZXJlZDogZmFsc2UgfSk7XG4gICAgICBfdGhpcy5wcm9wcy5vbk1vdXNlTGVhdmUoZXZlbnQpO1xuICAgIH0sIF90aGlzLmhhbmRsZVRvdWNoVGFwID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMub25Ub3VjaFRhcCkge1xuICAgICAgICBfdGhpcy5wcm9wcy5vblRvdWNoVGFwKGV2ZW50KTtcbiAgICAgIH1cblxuICAgICAgaWYgKF90aGlzLnByb3BzLnByaW1hcnlUb2dnbGVzTmVzdGVkTGlzdCkge1xuICAgICAgICBfdGhpcy5oYW5kbGVOZXN0ZWRMaXN0VG9nZ2xlKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9LCBfdGhpcy5oYW5kbGVOZXN0ZWRMaXN0VG9nZ2xlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMubGVmdENoZWNrYm94KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgaWYgKF90aGlzLnByb3BzLm9wZW4gPT09IG51bGwpIHtcbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoeyBvcGVuOiAhX3RoaXMuc3RhdGUub3BlbiB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMucHJvcHMub25OZXN0ZWRMaXN0VG9nZ2xlKF90aGlzKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBFeHBvc2luZyBgdGhpc2AgaW4gdGhlIGNhbGxiYWNrIGlzIHF1aXRlIGEgYmFkIEFQSS5cbiAgICAgICAgLy8gSSdtIGRvaW5nIGEgb25lIGxldmVsIGRlZXAgY2xvbmUgdG8gZXhwb3NlIGEgZmFrZSBzdGF0ZS5vcGVuLlxuICAgICAgICBfdGhpcy5wcm9wcy5vbk5lc3RlZExpc3RUb2dnbGUoKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7fSwgX3RoaXMsIHtcbiAgICAgICAgICBzdGF0ZToge1xuICAgICAgICAgICAgb3BlbjogIV90aGlzLnN0YXRlLm9wZW5cbiAgICAgICAgICB9XG4gICAgICAgIH0pKTtcbiAgICAgIH1cbiAgICB9LCBfdGhpcy5oYW5kbGVSaWdodEljb25CdXR0b25LZXlib2FyZEZvY3VzID0gZnVuY3Rpb24gKGV2ZW50LCBpc0tleWJvYXJkRm9jdXNlZCkge1xuICAgICAgaWYgKGlzS2V5Ym9hcmRGb2N1c2VkKSB7XG4gICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBpc0tleWJvYXJkRm9jdXNlZDogZmFsc2UsXG4gICAgICAgICAgcmlnaHRJY29uQnV0dG9uS2V5Ym9hcmRGb2N1c2VkOiBpc0tleWJvYXJkRm9jdXNlZFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgdmFyIGljb25CdXR0b24gPSBfdGhpcy5wcm9wcy5yaWdodEljb25CdXR0b247XG5cbiAgICAgIGlmIChpY29uQnV0dG9uICYmIGljb25CdXR0b24ucHJvcHMub25LZXlib2FyZEZvY3VzKSBpY29uQnV0dG9uLnByb3BzLm9uS2V5Ym9hcmRGb2N1cyhldmVudCwgaXNLZXlib2FyZEZvY3VzZWQpO1xuICAgIH0sIF90aGlzLmhhbmRsZVJpZ2h0SWNvbkJ1dHRvbk1vdXNlTGVhdmUgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHZhciBpY29uQnV0dG9uID0gX3RoaXMucHJvcHMucmlnaHRJY29uQnV0dG9uO1xuICAgICAgX3RoaXMuc2V0U3RhdGUoeyByaWdodEljb25CdXR0b25Ib3ZlcmVkOiBmYWxzZSB9KTtcbiAgICAgIGlmIChpY29uQnV0dG9uICYmIGljb25CdXR0b24ucHJvcHMub25Nb3VzZUxlYXZlKSBpY29uQnV0dG9uLnByb3BzLm9uTW91c2VMZWF2ZShldmVudCk7XG4gICAgfSwgX3RoaXMuaGFuZGxlUmlnaHRJY29uQnV0dG9uTW91c2VFbnRlciA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgdmFyIGljb25CdXR0b24gPSBfdGhpcy5wcm9wcy5yaWdodEljb25CdXR0b247XG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7IHJpZ2h0SWNvbkJ1dHRvbkhvdmVyZWQ6IHRydWUgfSk7XG4gICAgICBpZiAoaWNvbkJ1dHRvbiAmJiBpY29uQnV0dG9uLnByb3BzLm9uTW91c2VFbnRlcikgaWNvbkJ1dHRvbi5wcm9wcy5vbk1vdXNlRW50ZXIoZXZlbnQpO1xuICAgIH0sIF90aGlzLmhhbmRsZVJpZ2h0SWNvbkJ1dHRvbk1vdXNlVXAgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHZhciBpY29uQnV0dG9uID0gX3RoaXMucHJvcHMucmlnaHRJY29uQnV0dG9uO1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICBpZiAoaWNvbkJ1dHRvbiAmJiBpY29uQnV0dG9uLnByb3BzLm9uTW91c2VVcCkgaWNvbkJ1dHRvbi5wcm9wcy5vbk1vdXNlVXAoZXZlbnQpO1xuICAgIH0sIF90aGlzLmhhbmRsZVJpZ2h0SWNvbkJ1dHRvblRvdWNoVGFwID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB2YXIgaWNvbkJ1dHRvbiA9IF90aGlzLnByb3BzLnJpZ2h0SWNvbkJ1dHRvbjtcblxuICAgICAgLy8gU3RvcCB0aGUgZXZlbnQgZnJvbSBidWJibGluZyB1cCB0byB0aGUgbGlzdC1pdGVtXG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIGlmIChpY29uQnV0dG9uICYmIGljb25CdXR0b24ucHJvcHMub25Ub3VjaFRhcCkgaWNvbkJ1dHRvbi5wcm9wcy5vblRvdWNoVGFwKGV2ZW50KTtcbiAgICB9LCBfdGhpcy5oYW5kbGVUb3VjaFN0YXJ0ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7IHRvdWNoOiB0cnVlIH0pO1xuICAgICAgX3RoaXMucHJvcHMub25Ub3VjaFN0YXJ0KGV2ZW50KTtcbiAgICB9LCBfdGhpcy5oYW5kbGVUb3VjaEVuZCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgX3RoaXMuc2V0U3RhdGUoeyB0b3VjaDogdHJ1ZSB9KTtcbiAgICAgIF90aGlzLnByb3BzLm9uVG91Y2hFbmQoZXZlbnQpO1xuICAgIH0sIF90ZW1wKSwgKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMy5kZWZhdWx0KShfdGhpcywgX3JldCk7XG4gIH1cblxuICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShMaXN0SXRlbSwgW3tcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsTW91bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgb3BlbjogdGhpcy5wcm9wcy5vcGVuID09PSBudWxsID8gdGhpcy5wcm9wcy5pbml0aWFsbHlPcGVuID09PSB0cnVlIDogdGhpcy5wcm9wcy5vcGVuXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIC8vIHVwZGF0ZSB0aGUgc3RhdGUgd2hlbiB0aGUgY29tcG9uZW50IGlzIGNvbnRyb2xsZWQuXG4gICAgICBpZiAobmV4dFByb3BzLm9wZW4gIT09IG51bGwpIHRoaXMuc2V0U3RhdGUoeyBvcGVuOiBuZXh0UHJvcHMub3BlbiB9KTtcbiAgICAgIGlmIChuZXh0UHJvcHMuZGlzYWJsZWQgJiYgdGhpcy5zdGF0ZS5ob3ZlcmVkKSB0aGlzLnNldFN0YXRlKHsgaG92ZXJlZDogZmFsc2UgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2hvdWxkQ29tcG9uZW50VXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcywgbmV4dFN0YXRlLCBuZXh0Q29udGV4dCkge1xuICAgICAgcmV0dXJuICEoMCwgX3NoYWxsb3dFcXVhbDIuZGVmYXVsdCkodGhpcy5wcm9wcywgbmV4dFByb3BzKSB8fCAhKDAsIF9zaGFsbG93RXF1YWwyLmRlZmF1bHQpKHRoaXMuc3RhdGUsIG5leHRTdGF0ZSkgfHwgISgwLCBfc2hhbGxvd0VxdWFsMi5kZWZhdWx0KSh0aGlzLmNvbnRleHQsIG5leHRDb250ZXh0KTtcbiAgICB9XG5cbiAgICAvLyBUaGlzIG1ldGhvZCBpcyBuZWVkZWQgYnkgdGhlIGBNZW51SXRlbWAgY29tcG9uZW50LlxuXG4gIH0sIHtcbiAgICBrZXk6ICdhcHBseUZvY3VzU3RhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhcHBseUZvY3VzU3RhdGUoZm9jdXNTdGF0ZSkge1xuICAgICAgaWYgKHRoaXMuYnV0dG9uKSB7XG4gICAgICAgIHZhciBidXR0b25FbCA9IF9yZWFjdERvbTIuZGVmYXVsdC5maW5kRE9NTm9kZSh0aGlzLmJ1dHRvbik7XG5cbiAgICAgICAgc3dpdGNoIChmb2N1c1N0YXRlKSB7XG4gICAgICAgICAgY2FzZSAnbm9uZSc6XG4gICAgICAgICAgICBidXR0b25FbC5ibHVyKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdmb2N1c2VkJzpcbiAgICAgICAgICAgIGJ1dHRvbkVsLmZvY3VzKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdrZXlib2FyZC1mb2N1c2VkJzpcbiAgICAgICAgICAgIHRoaXMuYnV0dG9uLnNldEtleWJvYXJkRm9jdXMoKTtcbiAgICAgICAgICAgIGJ1dHRvbkVsLmZvY3VzKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NyZWF0ZURpc2FibGVkRWxlbWVudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZURpc2FibGVkRWxlbWVudChzdHlsZXMsIGNvbnRlbnRDaGlsZHJlbiwgYWRkaXRpb25hbFByb3BzKSB7XG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBpbm5lckRpdlN0eWxlID0gX3Byb3BzLmlubmVyRGl2U3R5bGUsXG4gICAgICAgICAgc3R5bGUgPSBfcHJvcHMuc3R5bGU7XG5cblxuICAgICAgdmFyIG1lcmdlZERpdlN0eWxlcyA9ICgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KSh7fSwgc3R5bGVzLnJvb3QsIHN0eWxlcy5pbm5lckRpdiwgaW5uZXJEaXZTdHlsZSwgc3R5bGUpO1xuXG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICAoMCwgX2V4dGVuZHMzLmRlZmF1bHQpKHt9LCBhZGRpdGlvbmFsUHJvcHMsIHtcbiAgICAgICAgICBzdHlsZTogdGhpcy5jb250ZXh0Lm11aVRoZW1lLnByZXBhcmVTdHlsZXMobWVyZ2VkRGl2U3R5bGVzKVxuICAgICAgICB9KSxcbiAgICAgICAgY29udGVudENoaWxkcmVuXG4gICAgICApO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NyZWF0ZUxhYmVsRWxlbWVudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZUxhYmVsRWxlbWVudChzdHlsZXMsIGNvbnRlbnRDaGlsZHJlbiwgYWRkaXRpb25hbFByb3BzKSB7XG4gICAgICB2YXIgX3Byb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgaW5uZXJEaXZTdHlsZSA9IF9wcm9wczIuaW5uZXJEaXZTdHlsZSxcbiAgICAgICAgICBzdHlsZSA9IF9wcm9wczIuc3R5bGU7XG5cblxuICAgICAgdmFyIG1lcmdlZExhYmVsU3R5bGVzID0gKDAsIF9zaW1wbGVBc3NpZ24yLmRlZmF1bHQpKHt9LCBzdHlsZXMucm9vdCwgc3R5bGVzLmlubmVyRGl2LCBpbm5lckRpdlN0eWxlLCBzdHlsZXMubGFiZWwsIHN0eWxlKTtcblxuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnbGFiZWwnLFxuICAgICAgICAoMCwgX2V4dGVuZHMzLmRlZmF1bHQpKHt9LCBhZGRpdGlvbmFsUHJvcHMsIHtcbiAgICAgICAgICBzdHlsZTogdGhpcy5jb250ZXh0Lm11aVRoZW1lLnByZXBhcmVTdHlsZXMobWVyZ2VkTGFiZWxTdHlsZXMpXG4gICAgICAgIH0pLFxuICAgICAgICBjb250ZW50Q2hpbGRyZW5cbiAgICAgICk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY3JlYXRlVGV4dEVsZW1lbnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVUZXh0RWxlbWVudChzdHlsZXMsIGRhdGEsIGtleSkge1xuICAgICAgdmFyIHByZXBhcmVTdHlsZXMgPSB0aGlzLmNvbnRleHQubXVpVGhlbWUucHJlcGFyZVN0eWxlcztcblxuICAgICAgaWYgKF9yZWFjdDIuZGVmYXVsdC5pc1ZhbGlkRWxlbWVudChkYXRhKSkge1xuICAgICAgICB2YXIgc3R5bGUgPSAoMCwgX3NpbXBsZUFzc2lnbjIuZGVmYXVsdCkoe30sIHN0eWxlcywgZGF0YS5wcm9wcy5zdHlsZSk7XG4gICAgICAgIGlmICh0eXBlb2YgZGF0YS50eXBlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIC8vIGlmIGVsZW1lbnQgaXMgYSBuYXRpdmUgZG9tIG5vZGVcbiAgICAgICAgICBzdHlsZSA9IHByZXBhcmVTdHlsZXMoc3R5bGUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY2xvbmVFbGVtZW50KGRhdGEsIHtcbiAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICBzdHlsZTogc3R5bGVcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHsga2V5OiBrZXksIHN0eWxlOiBwcmVwYXJlU3R5bGVzKHN0eWxlcykgfSxcbiAgICAgICAgZGF0YVxuICAgICAgKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdwdXNoRWxlbWVudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHB1c2hFbGVtZW50KGNoaWxkcmVuLCBlbGVtZW50LCBiYXNlU3R5bGVzLCBhZGRpdGlvbmFsUHJvcHMpIHtcbiAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgIHZhciBzdHlsZXMgPSAoMCwgX3NpbXBsZUFzc2lnbjIuZGVmYXVsdCkoe30sIGJhc2VTdHlsZXMsIGVsZW1lbnQucHJvcHMuc3R5bGUpO1xuICAgICAgICBjaGlsZHJlbi5wdXNoKF9yZWFjdDIuZGVmYXVsdC5jbG9uZUVsZW1lbnQoZWxlbWVudCwgKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7XG4gICAgICAgICAga2V5OiBjaGlsZHJlbi5sZW5ndGgsXG4gICAgICAgICAgc3R5bGU6IHN0eWxlc1xuICAgICAgICB9LCBhZGRpdGlvbmFsUHJvcHMpKSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBfcHJvcHMzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBhdXRvR2VuZXJhdGVOZXN0ZWRJbmRpY2F0b3IgPSBfcHJvcHMzLmF1dG9HZW5lcmF0ZU5lc3RlZEluZGljYXRvcixcbiAgICAgICAgICBjaGlsZHJlbiA9IF9wcm9wczMuY2hpbGRyZW4sXG4gICAgICAgICAgY29udGFpbmVyRWxlbWVudCA9IF9wcm9wczMuY29udGFpbmVyRWxlbWVudCxcbiAgICAgICAgICBkaXNhYmxlZCA9IF9wcm9wczMuZGlzYWJsZWQsXG4gICAgICAgICAgZGlzYWJsZUtleWJvYXJkRm9jdXMgPSBfcHJvcHMzLmRpc2FibGVLZXlib2FyZEZvY3VzLFxuICAgICAgICAgIGhvdmVyQ29sb3IgPSBfcHJvcHMzLmhvdmVyQ29sb3IsXG4gICAgICAgICAgaW5pdGlhbGx5T3BlbiA9IF9wcm9wczMuaW5pdGlhbGx5T3BlbixcbiAgICAgICAgICBpbm5lckRpdlN0eWxlID0gX3Byb3BzMy5pbm5lckRpdlN0eWxlLFxuICAgICAgICAgIGluc2V0Q2hpbGRyZW4gPSBfcHJvcHMzLmluc2V0Q2hpbGRyZW4sXG4gICAgICAgICAgbGVmdEF2YXRhciA9IF9wcm9wczMubGVmdEF2YXRhcixcbiAgICAgICAgICBsZWZ0Q2hlY2tib3ggPSBfcHJvcHMzLmxlZnRDaGVja2JveCxcbiAgICAgICAgICBsZWZ0SWNvbiA9IF9wcm9wczMubGVmdEljb24sXG4gICAgICAgICAgbmVzdGVkSXRlbXMgPSBfcHJvcHMzLm5lc3RlZEl0ZW1zLFxuICAgICAgICAgIG5lc3RlZExldmVsID0gX3Byb3BzMy5uZXN0ZWRMZXZlbCxcbiAgICAgICAgICBuZXN0ZWRMaXN0U3R5bGUgPSBfcHJvcHMzLm5lc3RlZExpc3RTdHlsZSxcbiAgICAgICAgICBvbktleWJvYXJkRm9jdXMgPSBfcHJvcHMzLm9uS2V5Ym9hcmRGb2N1cyxcbiAgICAgICAgICBpc0tleWJvYXJkRm9jdXNlZCA9IF9wcm9wczMuaXNLZXlib2FyZEZvY3VzZWQsXG4gICAgICAgICAgb25Nb3VzZUVudGVyID0gX3Byb3BzMy5vbk1vdXNlRW50ZXIsXG4gICAgICAgICAgb25Nb3VzZUxlYXZlID0gX3Byb3BzMy5vbk1vdXNlTGVhdmUsXG4gICAgICAgICAgb25OZXN0ZWRMaXN0VG9nZ2xlID0gX3Byb3BzMy5vbk5lc3RlZExpc3RUb2dnbGUsXG4gICAgICAgICAgb25Ub3VjaFN0YXJ0ID0gX3Byb3BzMy5vblRvdWNoU3RhcnQsXG4gICAgICAgICAgb25Ub3VjaFRhcCA9IF9wcm9wczMub25Ub3VjaFRhcCxcbiAgICAgICAgICByaWdodEF2YXRhciA9IF9wcm9wczMucmlnaHRBdmF0YXIsXG4gICAgICAgICAgcmlnaHRJY29uID0gX3Byb3BzMy5yaWdodEljb24sXG4gICAgICAgICAgcmlnaHRJY29uQnV0dG9uID0gX3Byb3BzMy5yaWdodEljb25CdXR0b24sXG4gICAgICAgICAgcmlnaHRUb2dnbGUgPSBfcHJvcHMzLnJpZ2h0VG9nZ2xlLFxuICAgICAgICAgIHByaW1hcnlUZXh0ID0gX3Byb3BzMy5wcmltYXJ5VGV4dCxcbiAgICAgICAgICBwcmltYXJ5VG9nZ2xlc05lc3RlZExpc3QgPSBfcHJvcHMzLnByaW1hcnlUb2dnbGVzTmVzdGVkTGlzdCxcbiAgICAgICAgICBzZWNvbmRhcnlUZXh0ID0gX3Byb3BzMy5zZWNvbmRhcnlUZXh0LFxuICAgICAgICAgIHNlY29uZGFyeVRleHRMaW5lcyA9IF9wcm9wczMuc2Vjb25kYXJ5VGV4dExpbmVzLFxuICAgICAgICAgIHN0eWxlID0gX3Byb3BzMy5zdHlsZSxcbiAgICAgICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMzLmRlZmF1bHQpKF9wcm9wczMsIFsnYXV0b0dlbmVyYXRlTmVzdGVkSW5kaWNhdG9yJywgJ2NoaWxkcmVuJywgJ2NvbnRhaW5lckVsZW1lbnQnLCAnZGlzYWJsZWQnLCAnZGlzYWJsZUtleWJvYXJkRm9jdXMnLCAnaG92ZXJDb2xvcicsICdpbml0aWFsbHlPcGVuJywgJ2lubmVyRGl2U3R5bGUnLCAnaW5zZXRDaGlsZHJlbicsICdsZWZ0QXZhdGFyJywgJ2xlZnRDaGVja2JveCcsICdsZWZ0SWNvbicsICduZXN0ZWRJdGVtcycsICduZXN0ZWRMZXZlbCcsICduZXN0ZWRMaXN0U3R5bGUnLCAnb25LZXlib2FyZEZvY3VzJywgJ2lzS2V5Ym9hcmRGb2N1c2VkJywgJ29uTW91c2VFbnRlcicsICdvbk1vdXNlTGVhdmUnLCAnb25OZXN0ZWRMaXN0VG9nZ2xlJywgJ29uVG91Y2hTdGFydCcsICdvblRvdWNoVGFwJywgJ3JpZ2h0QXZhdGFyJywgJ3JpZ2h0SWNvbicsICdyaWdodEljb25CdXR0b24nLCAncmlnaHRUb2dnbGUnLCAncHJpbWFyeVRleHQnLCAncHJpbWFyeVRvZ2dsZXNOZXN0ZWRMaXN0JywgJ3NlY29uZGFyeVRleHQnLCAnc2Vjb25kYXJ5VGV4dExpbmVzJywgJ3N0eWxlJ10pO1xuICAgICAgdmFyIHByZXBhcmVTdHlsZXMgPSB0aGlzLmNvbnRleHQubXVpVGhlbWUucHJlcGFyZVN0eWxlcztcblxuICAgICAgdmFyIHN0eWxlcyA9IGdldFN0eWxlcyh0aGlzLnByb3BzLCB0aGlzLmNvbnRleHQsIHRoaXMuc3RhdGUpO1xuICAgICAgdmFyIGNvbnRlbnRDaGlsZHJlbiA9IFtjaGlsZHJlbl07XG5cbiAgICAgIGlmIChsZWZ0SWNvbikge1xuICAgICAgICB2YXIgYWRkaXRpb25hbFByb3BzID0ge1xuICAgICAgICAgIGNvbG9yOiBsZWZ0SWNvbi5wcm9wcy5jb2xvciB8fCB0aGlzLmNvbnRleHQubXVpVGhlbWUubGlzdEl0ZW0ubGVmdEljb25Db2xvclxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnB1c2hFbGVtZW50KGNvbnRlbnRDaGlsZHJlbiwgbGVmdEljb24sICgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KSh7fSwgc3R5bGVzLmljb25zLCBzdHlsZXMubGVmdEljb24pLCBhZGRpdGlvbmFsUHJvcHMpO1xuICAgICAgfVxuXG4gICAgICBpZiAocmlnaHRJY29uKSB7XG4gICAgICAgIHZhciBfYWRkaXRpb25hbFByb3BzID0ge1xuICAgICAgICAgIGNvbG9yOiByaWdodEljb24ucHJvcHMuY29sb3IgfHwgdGhpcy5jb250ZXh0Lm11aVRoZW1lLmxpc3RJdGVtLnJpZ2h0SWNvbkNvbG9yXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMucHVzaEVsZW1lbnQoY29udGVudENoaWxkcmVuLCByaWdodEljb24sICgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KSh7fSwgc3R5bGVzLmljb25zLCBzdHlsZXMucmlnaHRJY29uKSwgX2FkZGl0aW9uYWxQcm9wcyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChsZWZ0QXZhdGFyKSB7XG4gICAgICAgIHRoaXMucHVzaEVsZW1lbnQoY29udGVudENoaWxkcmVuLCBsZWZ0QXZhdGFyLCAoMCwgX3NpbXBsZUFzc2lnbjIuZGVmYXVsdCkoe30sIHN0eWxlcy5hdmF0YXJzLCBzdHlsZXMubGVmdEF2YXRhcikpO1xuICAgICAgfVxuXG4gICAgICBpZiAocmlnaHRBdmF0YXIpIHtcbiAgICAgICAgdGhpcy5wdXNoRWxlbWVudChjb250ZW50Q2hpbGRyZW4sIHJpZ2h0QXZhdGFyLCAoMCwgX3NpbXBsZUFzc2lnbjIuZGVmYXVsdCkoe30sIHN0eWxlcy5hdmF0YXJzLCBzdHlsZXMucmlnaHRBdmF0YXIpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGxlZnRDaGVja2JveCkge1xuICAgICAgICB0aGlzLnB1c2hFbGVtZW50KGNvbnRlbnRDaGlsZHJlbiwgbGVmdENoZWNrYm94LCAoMCwgX3NpbXBsZUFzc2lnbjIuZGVmYXVsdCkoe30sIHN0eWxlcy5sZWZ0Q2hlY2tib3gpKTtcbiAgICAgIH1cblxuICAgICAgLy8gUmlnaHRJY29uQnV0dG9uRWxlbWVudFxuICAgICAgdmFyIGhhc05lc3RMaXN0SXRlbXMgPSBuZXN0ZWRJdGVtcy5sZW5ndGg7XG4gICAgICB2YXIgaGFzUmlnaHRFbGVtZW50ID0gcmlnaHRBdmF0YXIgfHwgcmlnaHRJY29uIHx8IHJpZ2h0SWNvbkJ1dHRvbiB8fCByaWdodFRvZ2dsZTtcbiAgICAgIHZhciBuZWVkc05lc3RlZEluZGljYXRvciA9IGhhc05lc3RMaXN0SXRlbXMgJiYgYXV0b0dlbmVyYXRlTmVzdGVkSW5kaWNhdG9yICYmICFoYXNSaWdodEVsZW1lbnQ7XG5cbiAgICAgIGlmIChyaWdodEljb25CdXR0b24gfHwgbmVlZHNOZXN0ZWRJbmRpY2F0b3IpIHtcbiAgICAgICAgdmFyIHJpZ2h0SWNvbkJ1dHRvbkVsZW1lbnQgPSByaWdodEljb25CdXR0b247XG4gICAgICAgIHZhciByaWdodEljb25CdXR0b25IYW5kbGVycyA9IHtcbiAgICAgICAgICBvbktleWJvYXJkRm9jdXM6IHRoaXMuaGFuZGxlUmlnaHRJY29uQnV0dG9uS2V5Ym9hcmRGb2N1cyxcbiAgICAgICAgICBvbk1vdXNlRW50ZXI6IHRoaXMuaGFuZGxlUmlnaHRJY29uQnV0dG9uTW91c2VFbnRlcixcbiAgICAgICAgICBvbk1vdXNlTGVhdmU6IHRoaXMuaGFuZGxlUmlnaHRJY29uQnV0dG9uTW91c2VMZWF2ZSxcbiAgICAgICAgICBvblRvdWNoVGFwOiB0aGlzLmhhbmRsZVJpZ2h0SWNvbkJ1dHRvblRvdWNoVGFwLFxuICAgICAgICAgIG9uTW91c2VEb3duOiB0aGlzLmhhbmRsZVJpZ2h0SWNvbkJ1dHRvbk1vdXNlVXAsXG4gICAgICAgICAgb25Nb3VzZVVwOiB0aGlzLmhhbmRsZVJpZ2h0SWNvbkJ1dHRvbk1vdXNlVXBcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBDcmVhdGUgYSBuZXN0ZWQgbGlzdCBpbmRpY2F0b3IgaWNvbiBpZiB3ZSBkb24ndCBoYXZlIGFuIGljb24gb24gdGhlIHJpZ2h0XG4gICAgICAgIGlmIChuZWVkc05lc3RlZEluZGljYXRvcikge1xuICAgICAgICAgIHJpZ2h0SWNvbkJ1dHRvbkVsZW1lbnQgPSB0aGlzLnN0YXRlLm9wZW4gPyBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgIF9JY29uQnV0dG9uMi5kZWZhdWx0LFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9leHBhbmRMZXNzMi5kZWZhdWx0LCBudWxsKVxuICAgICAgICAgICkgOiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgIF9JY29uQnV0dG9uMi5kZWZhdWx0LFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9leHBhbmRNb3JlMi5kZWZhdWx0LCBudWxsKVxuICAgICAgICAgICk7XG4gICAgICAgICAgcmlnaHRJY29uQnV0dG9uSGFuZGxlcnMub25Ub3VjaFRhcCA9IHRoaXMuaGFuZGxlTmVzdGVkTGlzdFRvZ2dsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucHVzaEVsZW1lbnQoY29udGVudENoaWxkcmVuLCByaWdodEljb25CdXR0b25FbGVtZW50LCAoMCwgX3NpbXBsZUFzc2lnbjIuZGVmYXVsdCkoe30sIHN0eWxlcy5yaWdodEljb25CdXR0b24pLCByaWdodEljb25CdXR0b25IYW5kbGVycyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChyaWdodFRvZ2dsZSkge1xuICAgICAgICB0aGlzLnB1c2hFbGVtZW50KGNvbnRlbnRDaGlsZHJlbiwgcmlnaHRUb2dnbGUsICgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KSh7fSwgc3R5bGVzLnJpZ2h0VG9nZ2xlKSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcmltYXJ5VGV4dCkge1xuICAgICAgICB2YXIgcHJpbWFyeVRleHRFbGVtZW50ID0gdGhpcy5jcmVhdGVUZXh0RWxlbWVudChzdHlsZXMucHJpbWFyeVRleHQsIHByaW1hcnlUZXh0LCAncHJpbWFyeVRleHQnKTtcbiAgICAgICAgY29udGVudENoaWxkcmVuLnB1c2gocHJpbWFyeVRleHRFbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNlY29uZGFyeVRleHQpIHtcbiAgICAgICAgdmFyIHNlY29uZGFyeVRleHRFbGVtZW50ID0gdGhpcy5jcmVhdGVUZXh0RWxlbWVudChzdHlsZXMuc2Vjb25kYXJ5VGV4dCwgc2Vjb25kYXJ5VGV4dCwgJ3NlY29uZGFyeVRleHQnKTtcbiAgICAgICAgY29udGVudENoaWxkcmVuLnB1c2goc2Vjb25kYXJ5VGV4dEVsZW1lbnQpO1xuICAgICAgfVxuXG4gICAgICB2YXIgbmVzdGVkTGlzdCA9IG5lc3RlZEl0ZW1zLmxlbmd0aCA/IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBfTmVzdGVkTGlzdDIuZGVmYXVsdCxcbiAgICAgICAgeyBuZXN0ZWRMZXZlbDogbmVzdGVkTGV2ZWwsIG9wZW46IHRoaXMuc3RhdGUub3Blbiwgc3R5bGU6IG5lc3RlZExpc3RTdHlsZSB9LFxuICAgICAgICBuZXN0ZWRJdGVtc1xuICAgICAgKSA6IHVuZGVmaW5lZDtcblxuICAgICAgdmFyIHNpbXBsZUxhYmVsID0gIXByaW1hcnlUb2dnbGVzTmVzdGVkTGlzdCAmJiAobGVmdENoZWNrYm94IHx8IHJpZ2h0VG9nZ2xlKTtcblxuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgc2ltcGxlTGFiZWwgPyB0aGlzLmNyZWF0ZUxhYmVsRWxlbWVudChzdHlsZXMsIGNvbnRlbnRDaGlsZHJlbiwgb3RoZXIpIDogZGlzYWJsZWQgPyB0aGlzLmNyZWF0ZURpc2FibGVkRWxlbWVudChzdHlsZXMsIGNvbnRlbnRDaGlsZHJlbiwgb3RoZXIpIDogX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgX0VuaGFuY2VkQnV0dG9uMi5kZWZhdWx0LFxuICAgICAgICAgICgwLCBfZXh0ZW5kczMuZGVmYXVsdCkoe1xuICAgICAgICAgICAgY29udGFpbmVyRWxlbWVudDogY29udGFpbmVyRWxlbWVudFxuICAgICAgICAgIH0sIG90aGVyLCB7XG4gICAgICAgICAgICBkaXNhYmxlS2V5Ym9hcmRGb2N1czogZGlzYWJsZUtleWJvYXJkRm9jdXMgfHwgdGhpcy5zdGF0ZS5yaWdodEljb25CdXR0b25LZXlib2FyZEZvY3VzZWQsXG4gICAgICAgICAgICBvbktleWJvYXJkRm9jdXM6IHRoaXMuaGFuZGxlS2V5Ym9hcmRGb2N1cyxcbiAgICAgICAgICAgIG9uTW91c2VMZWF2ZTogdGhpcy5oYW5kbGVNb3VzZUxlYXZlLFxuICAgICAgICAgICAgb25Nb3VzZUVudGVyOiB0aGlzLmhhbmRsZU1vdXNlRW50ZXIsXG4gICAgICAgICAgICBvblRvdWNoU3RhcnQ6IHRoaXMuaGFuZGxlVG91Y2hTdGFydCxcbiAgICAgICAgICAgIG9uVG91Y2hFbmQ6IHRoaXMuaGFuZGxlVG91Y2hFbmQsXG4gICAgICAgICAgICBvblRvdWNoVGFwOiB0aGlzLmhhbmRsZVRvdWNoVGFwLFxuICAgICAgICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgICAgICAgICAgcmVmOiBmdW5jdGlvbiByZWYobm9kZSkge1xuICAgICAgICAgICAgICByZXR1cm4gX3RoaXMyLmJ1dHRvbiA9IG5vZGU7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3R5bGU6ICgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KSh7fSwgc3R5bGVzLnJvb3QsIHN0eWxlKVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICB7IHN0eWxlOiBwcmVwYXJlU3R5bGVzKCgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KShzdHlsZXMuaW5uZXJEaXYsIGlubmVyRGl2U3R5bGUpKSB9LFxuICAgICAgICAgICAgY29udGVudENoaWxkcmVuXG4gICAgICAgICAgKVxuICAgICAgICApLFxuICAgICAgICBuZXN0ZWRMaXN0XG4gICAgICApO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gTGlzdEl0ZW07XG59KF9yZWFjdC5Db21wb25lbnQpO1xuXG5MaXN0SXRlbS5tdWlOYW1lID0gJ0xpc3RJdGVtJztcbkxpc3RJdGVtLmRlZmF1bHRQcm9wcyA9IHtcbiAgYXV0b0dlbmVyYXRlTmVzdGVkSW5kaWNhdG9yOiB0cnVlLFxuICBjb250YWluZXJFbGVtZW50OiAnc3BhbicsXG4gIGRpc2FibGVLZXlib2FyZEZvY3VzOiBmYWxzZSxcbiAgZGlzYWJsZWQ6IGZhbHNlLFxuICBpbml0aWFsbHlPcGVuOiBmYWxzZSxcbiAgaW5zZXRDaGlsZHJlbjogZmFsc2UsXG4gIG5lc3RlZEl0ZW1zOiBbXSxcbiAgbmVzdGVkTGV2ZWw6IDAsXG4gIG9uS2V5Ym9hcmRGb2N1czogZnVuY3Rpb24gb25LZXlib2FyZEZvY3VzKCkge30sXG4gIG9uTW91c2VFbnRlcjogZnVuY3Rpb24gb25Nb3VzZUVudGVyKCkge30sXG4gIG9uTW91c2VMZWF2ZTogZnVuY3Rpb24gb25Nb3VzZUxlYXZlKCkge30sXG4gIG9uTmVzdGVkTGlzdFRvZ2dsZTogZnVuY3Rpb24gb25OZXN0ZWRMaXN0VG9nZ2xlKCkge30sXG4gIG9uVG91Y2hFbmQ6IGZ1bmN0aW9uIG9uVG91Y2hFbmQoKSB7fSxcbiAgb25Ub3VjaFN0YXJ0OiBmdW5jdGlvbiBvblRvdWNoU3RhcnQoKSB7fSxcbiAgb3BlbjogbnVsbCxcbiAgcHJpbWFyeVRvZ2dsZXNOZXN0ZWRMaXN0OiBmYWxzZSxcbiAgc2Vjb25kYXJ5VGV4dExpbmVzOiAxXG59O1xuTGlzdEl0ZW0uY29udGV4dFR5cGVzID0ge1xuICBtdWlUaGVtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZFxufTtcbkxpc3RJdGVtLnByb3BUeXBlcyA9ICBmYWxzZSA/IHtcbiAgLyoqXG4gICAqIElmIHRydWUsIGdlbmVyYXRlIGEgbmVzdGVkLWxpc3QtaW5kaWNhdG9yIGljb24gd2hlbiBuZXN0ZWQgbGlzdFxuICAgKiBpdGVtcyBhcmUgZGV0ZWN0ZWQuIE5vdGUgdGhhdCBhbiBpbmRpY2F0b3Igd2lsbCBub3QgYmUgY3JlYXRlZFxuICAgKiBpZiBhIGByaWdodEljb25gIG9yIGByaWdodEljb25CdXR0b25gIGhhcyBiZWVuIHByb3ZpZGVkIHRvXG4gICAqIHRoZSBlbGVtZW50LlxuICAgKi9cbiAgYXV0b0dlbmVyYXRlTmVzdGVkSW5kaWNhdG9yOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIC8qKlxuICAgKiBDaGlsZHJlbiBwYXNzZWQgaW50byB0aGUgYExpc3RJdGVtYC5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm5vZGUsXG4gIC8qKlxuICAgKiBUaGUgZWxlbWVudCB0byB1c2UgYXMgdGhlIGNvbnRhaW5lciBmb3IgdGhlIExpc3RJdGVtLiBFaXRoZXIgYSBzdHJpbmcgdG9cbiAgICogdXNlIGEgRE9NIGVsZW1lbnQgb3IgYSBSZWFjdEVsZW1lbnQuIFRoaXMgaXMgdXNlZnVsIGZvciB3cmFwcGluZyB0aGVcbiAgICogTGlzdEl0ZW0gaW4gYSBjdXN0b20gTGluayBjb21wb25lbnQuIElmIGEgUmVhY3RFbGVtZW50IGlzIGdpdmVuLCBlbnN1cmVcbiAgICogdGhhdCBpdCBwYXNzZXMgYWxsIG9mIGl0cyBnaXZlbiBwcm9wcyB0aHJvdWdoIHRvIHRoZSB1bmRlcmx5aW5nIERPTVxuICAgKiBlbGVtZW50IGFuZCByZW5kZXJzIGl0cyBjaGlsZHJlbiBwcm9wIGZvciBwcm9wZXIgaW50ZWdyYXRpb24uXG4gICAqL1xuICBjb250YWluZXJFbGVtZW50OiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMyLmRlZmF1bHQuZWxlbWVudF0pLFxuICAvKipcbiAgICogSWYgdHJ1ZSwgdGhlIGVsZW1lbnQgd2lsbCBub3QgYmUgYWJsZSB0byBiZSBmb2N1c2VkIGJ5IHRoZSBrZXlib2FyZC5cbiAgICovXG4gIGRpc2FibGVLZXlib2FyZEZvY3VzOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIC8qKlxuICAgKiBJZiB0cnVlLCB0aGUgZWxlbWVudCB3aWxsIG5vdCBiZSBjbGlja2FibGVcbiAgICogYW5kIHdpbGwgbm90IGRpc3BsYXkgaG92ZXIgZWZmZWN0cy5cbiAgICogVGhpcyBpcyBhdXRvbWF0aWNhbGx5IGRpc2FibGVkIGlmIGVpdGhlciBgbGVmdENoZWNrYm94YFxuICAgKiBvciBgcmlnaHRUb2dnbGVgIGlzIHNldC5cbiAgICovXG4gIGRpc2FibGVkOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIC8qKlxuICAqIE92ZXJyaWRlIHRoZSBob3ZlciBiYWNrZ3JvdW5kIGNvbG9yLlxuICAqL1xuICBob3ZlckNvbG9yOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgLyoqXG4gICAqIElmIHRydWUsIHRoZSBuZXN0ZWQgYExpc3RJdGVtYHMgYXJlIGluaXRpYWxseSBkaXNwbGF5ZWQuXG4gICAqL1xuICBpbml0aWFsbHlPcGVuOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIC8qKlxuICAgKiBPdmVycmlkZSB0aGUgaW5saW5lLXN0eWxlcyBvZiB0aGUgaW5uZXIgZGl2IGVsZW1lbnQuXG4gICAqL1xuICBpbm5lckRpdlN0eWxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCxcbiAgLyoqXG4gICAqIElmIHRydWUsIHRoZSBjaGlsZHJlbiB3aWxsIGJlIGluZGVudGVkIGJ5IDcycHguXG4gICAqIFRoaXMgaXMgdXNlZnVsIGlmIHRoZXJlIGlzIG5vIGxlZnQgYXZhdGFyIG9yIGxlZnQgaWNvbi5cbiAgICovXG4gIGluc2V0Q2hpbGRyZW46IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgLyoqXG4gICAqIFVzZSB0byBjb250cm9sIGlmIHRoZSBsaXN0IGl0ZW0gc2hvdWxkIHJlbmRlciBhcyBrZXlib2FyZCBmb2N1c2VkLiAgSWZcbiAgICogdW5kZWZpbmVkIChkZWZhdWx0KSwgdGhpcyB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgbWFuYWdlZC4gIElmIHByb3ZpZGVkLFxuICAgKiBpdCB3aWxsIGNoYW5nZSB0aGUgY29tcG9uZW50cyBzdHlsZS4gIE5vdGUgdGhhdCB0aGlzIHdpbGwgbm90IGNoYW5nZSB0aGVcbiAgICogYWN0dWFsIGZvY3VzIC0gYW5kIHNob3VsZCBvbmx5IGJlIHVzZWQgd2hlbiB5b3Ugd2FudCB0byBzaW11bGF0ZVxuICAgKiBrZXlib2FyZCBmb2N1cyAoZWcuIGluIGEgcmljaCB0ZXh0IGlucHV0IGF1dG9jb21wbGV0ZSkuXG4gICAqL1xuICBpc0tleWJvYXJkRm9jdXNlZDogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAvKipcbiAgICogVGhpcyBpcyB0aGUgYEF2YXRhcmAgZWxlbWVudCB0byBiZSBkaXNwbGF5ZWQgb24gdGhlIGxlZnQgc2lkZS5cbiAgICovXG4gIGxlZnRBdmF0YXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZWxlbWVudCxcbiAgLyoqXG4gICAqIFRoaXMgaXMgdGhlIGBDaGVja2JveGAgZWxlbWVudCB0byBiZSBkaXNwbGF5ZWQgb24gdGhlIGxlZnQgc2lkZS5cbiAgICovXG4gIGxlZnRDaGVja2JveDogX3Byb3BUeXBlczIuZGVmYXVsdC5lbGVtZW50LFxuICAvKipcbiAgICogVGhpcyBpcyB0aGUgYFN2Z0ljb25gIG9yIGBGb250SWNvbmAgdG8gYmUgZGlzcGxheWVkIG9uIHRoZSBsZWZ0IHNpZGUuXG4gICAqL1xuICBsZWZ0SWNvbjogX3Byb3BUeXBlczIuZGVmYXVsdC5lbGVtZW50LFxuICAvKipcbiAgICogQW4gYXJyYXkgb2YgYExpc3RJdGVtYHMgdG8gbmVzdCB1bmRlcm5lYXRoIHRoZSBjdXJyZW50IGBMaXN0SXRlbWAuXG4gICAqL1xuICBuZXN0ZWRJdGVtczogX3Byb3BUeXBlczIuZGVmYXVsdC5hcnJheU9mKF9wcm9wVHlwZXMyLmRlZmF1bHQuZWxlbWVudCksXG4gIC8qKlxuICAgKiBDb250cm9scyBob3cgZGVlcCBhIGBMaXN0SXRlbWAgYXBwZWFycy5cbiAgICogVGhpcyBwcm9wZXJ0eSBpcyBhdXRvbWF0aWNhbGx5IG1hbmFnZWQsIHNvIG1vZGlmeSBhdCB5b3VyIG93biByaXNrLlxuICAgKi9cbiAgbmVzdGVkTGV2ZWw6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyLFxuICAvKipcbiAgICogT3ZlcnJpZGUgdGhlIGlubGluZS1zdHlsZXMgb2YgdGhlIG5lc3RlZCBpdGVtcycgYE5lc3RlZExpc3RgLlxuICAgKi9cbiAgbmVzdGVkTGlzdFN0eWxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCxcbiAgLyoqXG4gICAqIENhbGxiYWNrIGZ1bmN0aW9uIGZpcmVkIHdoZW4gdGhlIGBMaXN0SXRlbWAgaXMgZm9jdXNlZCBvciBibHVycmVkIGJ5IHRoZSBrZXlib2FyZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IGBmb2N1c2Agb3IgYGJsdXJgIGV2ZW50IHRhcmdldGluZyB0aGUgYExpc3RJdGVtYC5cbiAgICogQHBhcmFtIHtib29sZWFufSBpc0tleWJvYXJkRm9jdXNlZCBJZiB0cnVlLCB0aGUgYExpc3RJdGVtYCBpcyBmb2N1c2VkLlxuICAgKi9cbiAgb25LZXlib2FyZEZvY3VzOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIC8qKiBAaWdub3JlICovXG4gIG9uTW91c2VFbnRlcjogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICAvKiogQGlnbm9yZSAqL1xuICBvbk1vdXNlTGVhdmU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgLyoqXG4gICAqIENhbGxiYWsgZnVuY3Rpb24gZmlyZWQgd2hlbiB0aGUgYExpc3RJdGVtYCB0b2dnbGVzIGl0cyBuZXN0ZWQgbGlzdC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGxpc3RJdGVtIFRoZSBgTGlzdEl0ZW1gLlxuICAgKi9cbiAgb25OZXN0ZWRMaXN0VG9nZ2xlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIC8qKiBAaWdub3JlICovXG4gIG9uVG91Y2hFbmQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgLyoqIEBpZ25vcmUgKi9cbiAgb25Ub3VjaFN0YXJ0OiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmdW5jdGlvbiBmaXJlZCB3aGVuIHRoZSBsaXN0IGl0ZW0gaXMgdG91Y2gtdGFwcGVkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVG91Y2hUYXAgZXZlbnQgdGFyZ2V0aW5nIHRoZSBsaXN0IGl0ZW0uXG4gICAqL1xuICBvblRvdWNoVGFwOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIC8qKlxuICAgKiBDb250cm9sIHRvZ2dsZSBzdGF0ZSBvZiBuZXN0ZWQgbGlzdC5cbiAgICovXG4gIG9wZW46IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgLyoqXG4gICAqIFRoaXMgaXMgdGhlIGJsb2NrIGVsZW1lbnQgdGhhdCBjb250YWlucyB0aGUgcHJpbWFyeSB0ZXh0LlxuICAgKiBJZiBhIHN0cmluZyBpcyBwYXNzZWQgaW4sIGEgZGl2IHRhZyB3aWxsIGJlIHJlbmRlcmVkLlxuICAgKi9cbiAgcHJpbWFyeVRleHQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQubm9kZSxcbiAgLyoqXG4gICAqIElmIHRydWUsIGNsaWNraW5nIG9yIHRhcHBpbmcgdGhlIHByaW1hcnkgdGV4dCBvZiB0aGUgYExpc3RJdGVtYFxuICAgKiB0b2dnbGVzIHRoZSBuZXN0ZWQgbGlzdC5cbiAgICovXG4gIHByaW1hcnlUb2dnbGVzTmVzdGVkTGlzdDogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAvKipcbiAgICogVGhpcyBpcyB0aGUgYEF2YXRhcmAgZWxlbWVudCB0byBiZSBkaXNwbGF5ZWQgb24gdGhlIHJpZ2h0IHNpZGUuXG4gICAqL1xuICByaWdodEF2YXRhcjogX3Byb3BUeXBlczIuZGVmYXVsdC5lbGVtZW50LFxuICAvKipcbiAgICogVGhpcyBpcyB0aGUgYFN2Z0ljb25gIG9yIGBGb250SWNvbmAgdG8gYmUgZGlzcGxheWVkIG9uIHRoZSByaWdodCBzaWRlLlxuICAgKi9cbiAgcmlnaHRJY29uOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmVsZW1lbnQsXG4gIC8qKlxuICAgKiBUaGlzIGlzIHRoZSBgSWNvbkJ1dHRvbmAgdG8gYmUgZGlzcGxheWVkIG9uIHRoZSByaWdodCBzaWRlLlxuICAgKiBIb3ZlcmluZyBvdmVyIHRoaXMgYnV0dG9uIHdpbGwgcmVtb3ZlIHRoZSBgTGlzdEl0ZW1gIGhvdmVyLlxuICAgKiBBbHNvLCBjbGlja2luZyBvbiB0aGlzIGJ1dHRvbiB3aWxsIG5vdCB0cmlnZ2VyIGFcbiAgICogcmlwcGxlIG9uIHRoZSBgTGlzdEl0ZW1gOyB0aGUgZXZlbnQgd2lsbCBiZSBzdG9wcGVkIGFuZCBwcmV2ZW50ZWRcbiAgICogZnJvbSBidWJibGluZyB1cCB0byBjYXVzZSBhIGBMaXN0SXRlbWAgY2xpY2suXG4gICAqL1xuICByaWdodEljb25CdXR0b246IF9wcm9wVHlwZXMyLmRlZmF1bHQuZWxlbWVudCxcbiAgLyoqXG4gICAqIFRoaXMgaXMgdGhlIGBUb2dnbGVgIGVsZW1lbnQgdG8gZGlzcGxheSBvbiB0aGUgcmlnaHQgc2lkZS5cbiAgICovXG4gIHJpZ2h0VG9nZ2xlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmVsZW1lbnQsXG4gIC8qKlxuICAgKiBUaGlzIGlzIHRoZSBibG9jayBlbGVtZW50IHRoYXQgY29udGFpbnMgdGhlIHNlY29uZGFyeSB0ZXh0LlxuICAgKiBJZiBhIHN0cmluZyBpcyBwYXNzZWQgaW4sIGEgZGl2IHRhZyB3aWxsIGJlIHJlbmRlcmVkLlxuICAgKi9cbiAgc2Vjb25kYXJ5VGV4dDogX3Byb3BUeXBlczIuZGVmYXVsdC5ub2RlLFxuICAvKipcbiAgICogQ2FuIGJlIDEgb3IgMi4gVGhpcyBpcyB0aGUgbnVtYmVyIG9mIHNlY29uZGFyeVxuICAgKiB0ZXh0IGxpbmVzIGJlZm9yZSBlbGxpcHNpcyB3aWxsIHNob3cuXG4gICAqL1xuICBzZWNvbmRhcnlUZXh0TGluZXM6IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2YoWzEsIDJdKSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRoZSBpbmxpbmUtc3R5bGVzIG9mIHRoZSByb290IGVsZW1lbnQuXG4gICAqL1xuICBzdHlsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3Rcbn0gOiB7fTtcbmV4cG9ydHMuZGVmYXVsdCA9IExpc3RJdGVtO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMzExOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9MaXN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNDYpO1xuXG52YXIgX0xpc3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTGlzdCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBOZXN0ZWRMaXN0ID0gZnVuY3Rpb24gTmVzdGVkTGlzdChwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIG9wZW4gPSBwcm9wcy5vcGVuLFxuICAgICAgbmVzdGVkTGV2ZWwgPSBwcm9wcy5uZXN0ZWRMZXZlbCxcbiAgICAgIHN0eWxlID0gcHJvcHMuc3R5bGU7XG5cblxuICBpZiAoIW9wZW4pIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICBfTGlzdDIuZGVmYXVsdCxcbiAgICB7IHN0eWxlOiBzdHlsZSB9LFxuICAgIF9yZWFjdC5DaGlsZHJlbi5tYXAoY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgcmV0dXJuICgwLCBfcmVhY3QuaXNWYWxpZEVsZW1lbnQpKGNoaWxkKSA/ICgwLCBfcmVhY3QuY2xvbmVFbGVtZW50KShjaGlsZCwge1xuICAgICAgICBuZXN0ZWRMZXZlbDogbmVzdGVkTGV2ZWwgKyAxXG4gICAgICB9KSA6IGNoaWxkO1xuICAgIH0pXG4gICk7XG59O1xuXG5OZXN0ZWRMaXN0LnByb3BUeXBlcyA9ICBmYWxzZSA/IHtcbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMyLmRlZmF1bHQubm9kZSxcbiAgbmVzdGVkTGV2ZWw6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyLmlzUmVxdWlyZWQsXG4gIG9wZW46IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbC5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogT3ZlcnJpZGUgdGhlIGlubGluZS1zdHlsZXMgb2YgdGhlIHJvb3QgZWxlbWVudC5cbiAgICovXG4gIHN0eWxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdFxufSA6IHt9O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBOZXN0ZWRMaXN0O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMzEyOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2V4dGVuZHMyID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMik7XG5cbnZhciBfZXh0ZW5kczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leHRlbmRzMik7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5KTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vYmplY3RXaXRob3V0UHJvcGVydGllczIpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcblxudmFyIF9nZXRQcm90b3R5cGVPZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRQcm90b3R5cGVPZik7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cbnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IF9fd2VicGFja19yZXF1aXJlX18oNyk7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMik7XG5cbnZhciBfaW5oZXJpdHMyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcblxudmFyIF9pbmhlcml0czMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbmhlcml0czIpO1xuXG52YXIgX3NpbXBsZUFzc2lnbiA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cbnZhciBfc2ltcGxlQXNzaWduMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NpbXBsZUFzc2lnbik7XG5cbnZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX3JlYWN0RG9tID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNik7XG5cbnZhciBfcmVhY3REb20yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3REb20pO1xuXG52YXIgX3NoYWxsb3dFcXVhbCA9IF9fd2VicGFja19yZXF1aXJlX18oMzYpO1xuXG52YXIgX3NoYWxsb3dFcXVhbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zaGFsbG93RXF1YWwpO1xuXG52YXIgX1BvcG92ZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMxNik7XG5cbnZhciBfUG9wb3ZlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Qb3BvdmVyKTtcblxudmFyIF9jaGVjayA9IF9fd2VicGFja19yZXF1aXJlX18oMzQ3KTtcblxudmFyIF9jaGVjazIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jaGVjayk7XG5cbnZhciBfTGlzdEl0ZW0gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMxMCk7XG5cbnZhciBfTGlzdEl0ZW0yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTGlzdEl0ZW0pO1xuXG52YXIgX01lbnUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMxMyk7XG5cbnZhciBfTWVudTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9NZW51KTtcblxudmFyIF9wcm9wVHlwZXMzID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMSk7XG5cbnZhciBfcHJvcFR5cGVzNCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlczMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgbmVzdGVkTWVudVN0eWxlID0ge1xuICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xufTtcblxuZnVuY3Rpb24gZ2V0U3R5bGVzKHByb3BzLCBjb250ZXh0KSB7XG4gIHZhciBkaXNhYmxlZENvbG9yID0gY29udGV4dC5tdWlUaGVtZS5iYXNlVGhlbWUucGFsZXR0ZS5kaXNhYmxlZENvbG9yO1xuICB2YXIgdGV4dENvbG9yID0gY29udGV4dC5tdWlUaGVtZS5iYXNlVGhlbWUucGFsZXR0ZS50ZXh0Q29sb3I7XG4gIHZhciBpbmRlbnQgPSBwcm9wcy5kZXNrdG9wID8gNjQgOiA3MjtcbiAgdmFyIHNpZGVQYWRkaW5nID0gcHJvcHMuZGVza3RvcCA/IDI0IDogMTY7XG5cbiAgdmFyIHN0eWxlcyA9IHtcbiAgICByb290OiB7XG4gICAgICBjb2xvcjogcHJvcHMuZGlzYWJsZWQgPyBkaXNhYmxlZENvbG9yIDogdGV4dENvbG9yLFxuICAgICAgY3Vyc29yOiBwcm9wcy5kaXNhYmxlZCA/ICdkZWZhdWx0JyA6ICdwb2ludGVyJyxcbiAgICAgIG1pbkhlaWdodDogcHJvcHMuZGVza3RvcCA/ICczMnB4JyA6ICc0OHB4JyxcbiAgICAgIGxpbmVIZWlnaHQ6IHByb3BzLmRlc2t0b3AgPyAnMzJweCcgOiAnNDhweCcsXG4gICAgICBmb250U2l6ZTogcHJvcHMuZGVza3RvcCA/IDE1IDogMTYsXG4gICAgICB3aGl0ZVNwYWNlOiAnbm93cmFwJ1xuICAgIH0sXG5cbiAgICBpbm5lckRpdlN0eWxlOiB7XG4gICAgICBwYWRkaW5nTGVmdDogcHJvcHMubGVmdEljb24gfHwgcHJvcHMuaW5zZXRDaGlsZHJlbiB8fCBwcm9wcy5jaGVja2VkID8gaW5kZW50IDogc2lkZVBhZGRpbmcsXG4gICAgICBwYWRkaW5nUmlnaHQ6IHByb3BzLnJpZ2h0SWNvbiA/IGluZGVudCA6IHNpZGVQYWRkaW5nLFxuICAgICAgcGFkZGluZ0JvdHRvbTogMCxcbiAgICAgIHBhZGRpbmdUb3A6IDBcbiAgICB9LFxuXG4gICAgc2Vjb25kYXJ5VGV4dDoge1xuICAgICAgZmxvYXQ6ICdyaWdodCdcbiAgICB9LFxuXG4gICAgbGVmdEljb25EZXNrdG9wOiB7XG4gICAgICBtYXJnaW46IDAsXG4gICAgICBsZWZ0OiAyNCxcbiAgICAgIHRvcDogNFxuICAgIH0sXG5cbiAgICByaWdodEljb25EZXNrdG9wOiB7XG4gICAgICBtYXJnaW46IDAsXG4gICAgICByaWdodDogMjQsXG4gICAgICB0b3A6IDQsXG4gICAgICBmaWxsOiBjb250ZXh0Lm11aVRoZW1lLm1lbnVJdGVtLnJpZ2h0SWNvbkRlc2t0b3BGaWxsXG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBzdHlsZXM7XG59XG5cbnZhciBNZW51SXRlbSA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHMzLmRlZmF1bHQpKE1lbnVJdGVtLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBNZW51SXRlbSgpIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBNZW51SXRlbSk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9ICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMuZGVmYXVsdCkodGhpcywgKF9yZWYgPSBNZW51SXRlbS5fX3Byb3RvX18gfHwgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoTWVudUl0ZW0pKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIG9wZW46IGZhbHNlXG4gICAgfSwgX3RoaXMuY2xvbmVNZW51SXRlbSA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNsb25lRWxlbWVudChpdGVtLCB7XG4gICAgICAgIG9uVG91Y2hUYXA6IGZ1bmN0aW9uIG9uVG91Y2hUYXAoZXZlbnQpIHtcbiAgICAgICAgICBpZiAoIWl0ZW0ucHJvcHMubWVudUl0ZW1zKSB7XG4gICAgICAgICAgICBfdGhpcy5oYW5kbGVSZXF1ZXN0Q2xvc2UoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoaXRlbS5wcm9wcy5vblRvdWNoVGFwKSB7XG4gICAgICAgICAgICBpdGVtLnByb3BzLm9uVG91Y2hUYXAoZXZlbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSwgX3RoaXMuaGFuZGxlVG91Y2hUYXAgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgb3BlbjogdHJ1ZSxcbiAgICAgICAgYW5jaG9yRWw6IF9yZWFjdERvbTIuZGVmYXVsdC5maW5kRE9NTm9kZShfdGhpcylcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub25Ub3VjaFRhcCkge1xuICAgICAgICBfdGhpcy5wcm9wcy5vblRvdWNoVGFwKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9LCBfdGhpcy5oYW5kbGVSZXF1ZXN0Q2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIG9wZW46IGZhbHNlLFxuICAgICAgICBhbmNob3JFbDogbnVsbFxuICAgICAgfSk7XG4gICAgfSwgX3RlbXApLCAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zLmRlZmF1bHQpKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKE1lbnVJdGVtLCBbe1xuICAgIGtleTogJ2NvbXBvbmVudERpZE1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB0aGlzLmFwcGx5Rm9jdXNTdGF0ZSgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgaWYgKHRoaXMuc3RhdGUub3BlbiAmJiBuZXh0UHJvcHMuZm9jdXNTdGF0ZSA9PT0gJ25vbmUnKSB7XG4gICAgICAgIHRoaXMuaGFuZGxlUmVxdWVzdENsb3NlKCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2hvdWxkQ29tcG9uZW50VXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcywgbmV4dFN0YXRlLCBuZXh0Q29udGV4dCkge1xuICAgICAgcmV0dXJuICEoMCwgX3NoYWxsb3dFcXVhbDIuZGVmYXVsdCkodGhpcy5wcm9wcywgbmV4dFByb3BzKSB8fCAhKDAsIF9zaGFsbG93RXF1YWwyLmRlZmF1bHQpKHRoaXMuc3RhdGUsIG5leHRTdGF0ZSkgfHwgISgwLCBfc2hhbGxvd0VxdWFsMi5kZWZhdWx0KSh0aGlzLmNvbnRleHQsIG5leHRDb250ZXh0KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnREaWRVcGRhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgICB0aGlzLmFwcGx5Rm9jdXNTdGF0ZSgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxVbm1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5zdGF0ZS5vcGVuKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIG9wZW46IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2FwcGx5Rm9jdXNTdGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFwcGx5Rm9jdXNTdGF0ZSgpIHtcbiAgICAgIHRoaXMucmVmcy5saXN0SXRlbS5hcHBseUZvY3VzU3RhdGUodGhpcy5wcm9wcy5mb2N1c1N0YXRlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjaGVja2VkID0gX3Byb3BzLmNoZWNrZWQsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgZGVza3RvcCA9IF9wcm9wcy5kZXNrdG9wLFxuICAgICAgICAgIGRpc2FibGVkID0gX3Byb3BzLmRpc2FibGVkLFxuICAgICAgICAgIGZvY3VzU3RhdGUgPSBfcHJvcHMuZm9jdXNTdGF0ZSxcbiAgICAgICAgICBpbm5lckRpdlN0eWxlID0gX3Byb3BzLmlubmVyRGl2U3R5bGUsXG4gICAgICAgICAgaW5zZXRDaGlsZHJlbiA9IF9wcm9wcy5pbnNldENoaWxkcmVuLFxuICAgICAgICAgIGxlZnRJY29uID0gX3Byb3BzLmxlZnRJY29uLFxuICAgICAgICAgIG1lbnVJdGVtcyA9IF9wcm9wcy5tZW51SXRlbXMsXG4gICAgICAgICAgcmlnaHRJY29uID0gX3Byb3BzLnJpZ2h0SWNvbixcbiAgICAgICAgICBzZWNvbmRhcnlUZXh0ID0gX3Byb3BzLnNlY29uZGFyeVRleHQsXG4gICAgICAgICAgc3R5bGUgPSBfcHJvcHMuc3R5bGUsXG4gICAgICAgICAgYW5pbWF0aW9uID0gX3Byb3BzLmFuaW1hdGlvbixcbiAgICAgICAgICBhbmNob3JPcmlnaW4gPSBfcHJvcHMuYW5jaG9yT3JpZ2luLFxuICAgICAgICAgIHRhcmdldE9yaWdpbiA9IF9wcm9wcy50YXJnZXRPcmlnaW4sXG4gICAgICAgICAgdmFsdWUgPSBfcHJvcHMudmFsdWUsXG4gICAgICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMy5kZWZhdWx0KShfcHJvcHMsIFsnY2hlY2tlZCcsICdjaGlsZHJlbicsICdkZXNrdG9wJywgJ2Rpc2FibGVkJywgJ2ZvY3VzU3RhdGUnLCAnaW5uZXJEaXZTdHlsZScsICdpbnNldENoaWxkcmVuJywgJ2xlZnRJY29uJywgJ21lbnVJdGVtcycsICdyaWdodEljb24nLCAnc2Vjb25kYXJ5VGV4dCcsICdzdHlsZScsICdhbmltYXRpb24nLCAnYW5jaG9yT3JpZ2luJywgJ3RhcmdldE9yaWdpbicsICd2YWx1ZSddKTtcbiAgICAgIHZhciBwcmVwYXJlU3R5bGVzID0gdGhpcy5jb250ZXh0Lm11aVRoZW1lLnByZXBhcmVTdHlsZXM7XG5cbiAgICAgIHZhciBzdHlsZXMgPSBnZXRTdHlsZXModGhpcy5wcm9wcywgdGhpcy5jb250ZXh0KTtcbiAgICAgIHZhciBtZXJnZWRSb290U3R5bGVzID0gKDAsIF9zaW1wbGVBc3NpZ24yLmRlZmF1bHQpKHN0eWxlcy5yb290LCBzdHlsZSk7XG4gICAgICB2YXIgbWVyZ2VkSW5uZXJEaXZTdHlsZXMgPSAoMCwgX3NpbXBsZUFzc2lnbjIuZGVmYXVsdCkoc3R5bGVzLmlubmVyRGl2U3R5bGUsIGlubmVyRGl2U3R5bGUpO1xuXG4gICAgICAvLyBMZWZ0IEljb25cbiAgICAgIHZhciBsZWZ0SWNvbkVsZW1lbnQgPSBsZWZ0SWNvbiA/IGxlZnRJY29uIDogY2hlY2tlZCA/IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9jaGVjazIuZGVmYXVsdCwgbnVsbCkgOiBudWxsO1xuICAgICAgaWYgKGxlZnRJY29uRWxlbWVudCkge1xuICAgICAgICB2YXIgbWVyZ2VkTGVmdEljb25TdHlsZXMgPSBkZXNrdG9wID8gKDAsIF9zaW1wbGVBc3NpZ24yLmRlZmF1bHQpKHN0eWxlcy5sZWZ0SWNvbkRlc2t0b3AsIGxlZnRJY29uRWxlbWVudC5wcm9wcy5zdHlsZSkgOiBsZWZ0SWNvbkVsZW1lbnQucHJvcHMuc3R5bGU7XG4gICAgICAgIGxlZnRJY29uRWxlbWVudCA9IF9yZWFjdDIuZGVmYXVsdC5jbG9uZUVsZW1lbnQobGVmdEljb25FbGVtZW50LCB7IHN0eWxlOiBtZXJnZWRMZWZ0SWNvblN0eWxlcyB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gUmlnaHQgSWNvblxuICAgICAgdmFyIHJpZ2h0SWNvbkVsZW1lbnQgPSB2b2lkIDA7XG4gICAgICBpZiAocmlnaHRJY29uKSB7XG4gICAgICAgIHZhciBtZXJnZWRSaWdodEljb25TdHlsZXMgPSBkZXNrdG9wID8gKDAsIF9zaW1wbGVBc3NpZ24yLmRlZmF1bHQpKHN0eWxlcy5yaWdodEljb25EZXNrdG9wLCByaWdodEljb24ucHJvcHMuc3R5bGUpIDogcmlnaHRJY29uLnByb3BzLnN0eWxlO1xuICAgICAgICByaWdodEljb25FbGVtZW50ID0gX3JlYWN0Mi5kZWZhdWx0LmNsb25lRWxlbWVudChyaWdodEljb24sIHsgc3R5bGU6IG1lcmdlZFJpZ2h0SWNvblN0eWxlcyB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gU2Vjb25kYXJ5IFRleHRcbiAgICAgIHZhciBzZWNvbmRhcnlUZXh0RWxlbWVudCA9IHZvaWQgMDtcbiAgICAgIGlmIChzZWNvbmRhcnlUZXh0KSB7XG4gICAgICAgIHZhciBzZWNvbmRhcnlUZXh0SXNBbkVsZW1lbnQgPSBfcmVhY3QyLmRlZmF1bHQuaXNWYWxpZEVsZW1lbnQoc2Vjb25kYXJ5VGV4dCk7XG4gICAgICAgIHZhciBtZXJnZWRTZWNvbmRhcnlUZXh0U3R5bGVzID0gc2Vjb25kYXJ5VGV4dElzQW5FbGVtZW50ID8gKDAsIF9zaW1wbGVBc3NpZ24yLmRlZmF1bHQpKHN0eWxlcy5zZWNvbmRhcnlUZXh0LCBzZWNvbmRhcnlUZXh0LnByb3BzLnN0eWxlKSA6IG51bGw7XG5cbiAgICAgICAgc2Vjb25kYXJ5VGV4dEVsZW1lbnQgPSBzZWNvbmRhcnlUZXh0SXNBbkVsZW1lbnQgPyBfcmVhY3QyLmRlZmF1bHQuY2xvbmVFbGVtZW50KHNlY29uZGFyeVRleHQsIHsgc3R5bGU6IG1lcmdlZFNlY29uZGFyeVRleHRTdHlsZXMgfSkgOiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICB7IHN0eWxlOiBwcmVwYXJlU3R5bGVzKHN0eWxlcy5zZWNvbmRhcnlUZXh0KSB9LFxuICAgICAgICAgIHNlY29uZGFyeVRleHRcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHZhciBjaGlsZE1lbnVQb3BvdmVyID0gdm9pZCAwO1xuICAgICAgaWYgKG1lbnVJdGVtcykge1xuICAgICAgICBjaGlsZE1lbnVQb3BvdmVyID0gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgX1BvcG92ZXIyLmRlZmF1bHQsXG4gICAgICAgICAge1xuICAgICAgICAgICAgYW5pbWF0aW9uOiBhbmltYXRpb24sXG4gICAgICAgICAgICBhbmNob3JPcmlnaW46IGFuY2hvck9yaWdpbixcbiAgICAgICAgICAgIGFuY2hvckVsOiB0aGlzLnN0YXRlLmFuY2hvckVsLFxuICAgICAgICAgICAgb3BlbjogdGhpcy5zdGF0ZS5vcGVuLFxuICAgICAgICAgICAgdGFyZ2V0T3JpZ2luOiB0YXJnZXRPcmlnaW4sXG4gICAgICAgICAgICB1c2VMYXllckZvckNsaWNrQXdheTogZmFsc2UsXG4gICAgICAgICAgICBvblJlcXVlc3RDbG9zZTogdGhpcy5oYW5kbGVSZXF1ZXN0Q2xvc2VcbiAgICAgICAgICB9LFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgX01lbnUyLmRlZmF1bHQsXG4gICAgICAgICAgICB7IGRlc2t0b3A6IGRlc2t0b3AsIGRpc2FibGVkOiBkaXNhYmxlZCwgc3R5bGU6IG5lc3RlZE1lbnVTdHlsZSB9LFxuICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LkNoaWxkcmVuLm1hcChtZW51SXRlbXMsIHRoaXMuY2xvbmVNZW51SXRlbSlcbiAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICAgIG90aGVyLm9uVG91Y2hUYXAgPSB0aGlzLmhhbmRsZVRvdWNoVGFwO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIF9MaXN0SXRlbTIuZGVmYXVsdCxcbiAgICAgICAgKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7fSwgb3RoZXIsIHtcbiAgICAgICAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgICAgICAgaG92ZXJDb2xvcjogdGhpcy5jb250ZXh0Lm11aVRoZW1lLm1lbnVJdGVtLmhvdmVyQ29sb3IsXG4gICAgICAgICAgaW5uZXJEaXZTdHlsZTogbWVyZ2VkSW5uZXJEaXZTdHlsZXMsXG4gICAgICAgICAgaW5zZXRDaGlsZHJlbjogaW5zZXRDaGlsZHJlbixcbiAgICAgICAgICBsZWZ0SWNvbjogbGVmdEljb25FbGVtZW50LFxuICAgICAgICAgIHJlZjogJ2xpc3RJdGVtJyxcbiAgICAgICAgICByaWdodEljb246IHJpZ2h0SWNvbkVsZW1lbnQsXG4gICAgICAgICAgcm9sZTogJ21lbnVpdGVtJyxcbiAgICAgICAgICBzdHlsZTogbWVyZ2VkUm9vdFN0eWxlc1xuICAgICAgICB9KSxcbiAgICAgICAgY2hpbGRyZW4sXG4gICAgICAgIHNlY29uZGFyeVRleHRFbGVtZW50LFxuICAgICAgICBjaGlsZE1lbnVQb3BvdmVyXG4gICAgICApO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gTWVudUl0ZW07XG59KF9yZWFjdC5Db21wb25lbnQpO1xuXG5NZW51SXRlbS5tdWlOYW1lID0gJ01lbnVJdGVtJztcbk1lbnVJdGVtLmRlZmF1bHRQcm9wcyA9IHtcbiAgYW5jaG9yT3JpZ2luOiB7IGhvcml6b250YWw6ICdyaWdodCcsIHZlcnRpY2FsOiAndG9wJyB9LFxuICBjaGVja2VkOiBmYWxzZSxcbiAgZGVza3RvcDogZmFsc2UsXG4gIGRpc2FibGVkOiBmYWxzZSxcbiAgZm9jdXNTdGF0ZTogJ25vbmUnLFxuICBpbnNldENoaWxkcmVuOiBmYWxzZSxcbiAgdGFyZ2V0T3JpZ2luOiB7IGhvcml6b250YWw6ICdsZWZ0JywgdmVydGljYWw6ICd0b3AnIH1cbn07XG5NZW51SXRlbS5jb250ZXh0VHlwZXMgPSB7XG4gIG11aVRoZW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkXG59O1xuTWVudUl0ZW0ucHJvcFR5cGVzID0gIGZhbHNlID8ge1xuICAvKipcbiAgICogTG9jYXRpb24gb2YgdGhlIGFuY2hvciBmb3IgdGhlIHBvcG92ZXIgb2YgbmVzdGVkIGBNZW51SXRlbWBcbiAgICogZWxlbWVudHMuXG4gICAqIE9wdGlvbnM6XG4gICAqIGhvcml6b250YWw6IFtsZWZ0LCBtaWRkbGUsIHJpZ2h0XVxuICAgKiB2ZXJ0aWNhbDogW3RvcCwgY2VudGVyLCBib3R0b21dLlxuICAgKi9cbiAgYW5jaG9yT3JpZ2luOiBfcHJvcFR5cGVzNC5kZWZhdWx0Lm9yaWdpbixcbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRoZSBkZWZhdWx0IGFuaW1hdGlvbiBjb21wb25lbnQgdXNlZC5cbiAgICovXG4gIGFuaW1hdGlvbjogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICAvKipcbiAgICogSWYgdHJ1ZSwgYSBsZWZ0IGNoZWNrIG1hcmsgd2lsbCBiZSByZW5kZXJlZC5cbiAgICovXG4gIGNoZWNrZWQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgLyoqXG4gICAqIEVsZW1lbnRzIHBhc3NlZCBhcyBjaGlsZHJlbiB0byB0aGUgdW5kZXJseWluZyBgTGlzdEl0ZW1gLlxuICAgKi9cbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMyLmRlZmF1bHQubm9kZSxcbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICogSWYgdHJ1ZSwgdGhlIG1lbnUgaXRlbSB3aWxsIHJlbmRlciB3aXRoIGNvbXBhY3QgZGVza3RvcFxuICAgKiBzdHlsZXMuXG4gICAqL1xuICBkZXNrdG9wOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIC8qKlxuICAgKiBJZiB0cnVlLCB0aGUgbWVudSBpdGVtIHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZDogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAvKipcbiAgICogVGhlIGZvY3VzIHN0YXRlIG9mIHRoZSBtZW51IGl0ZW0uIFRoaXMgcHJvcCBpcyB1c2VkIHRvIHNldCB0aGUgZm9jdXNcbiAgICogc3RhdGUgb2YgdGhlIHVuZGVybHlpbmcgYExpc3RJdGVtYC5cbiAgICovXG4gIGZvY3VzU3RhdGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2YoWydub25lJywgJ2ZvY3VzZWQnLCAna2V5Ym9hcmQtZm9jdXNlZCddKSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRoZSBpbmxpbmUtc3R5bGVzIG9mIHRoZSBpbm5lciBkaXYuXG4gICAqL1xuICBpbm5lckRpdlN0eWxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCxcbiAgLyoqXG4gICAqIElmIHRydWUsIHRoZSBjaGlsZHJlbiB3aWxsIGJlIGluZGVudGVkLlxuICAgKiBUaGlzIGlzIG9ubHkgbmVlZGVkIHdoZW4gdGhlcmUgaXMgbm8gYGxlZnRJY29uYC5cbiAgICovXG4gIGluc2V0Q2hpbGRyZW46IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBgU3ZnSWNvbmAgb3IgYEZvbnRJY29uYCB0byBiZSBkaXNwbGF5ZWQgb24gdGhlIGxlZnQgc2lkZS5cbiAgICovXG4gIGxlZnRJY29uOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmVsZW1lbnQsXG4gIC8qKlxuICAgKiBgTWVudUl0ZW1gIGVsZW1lbnRzIHRvIG5lc3Qgd2l0aGluIHRoZSBtZW51IGl0ZW0uXG4gICAqL1xuICBtZW51SXRlbXM6IF9wcm9wVHlwZXMyLmRlZmF1bHQubm9kZSxcbiAgLyoqXG4gICAqIENhbGxiYWNrIGZ1bmN0aW9uIGZpcmVkIHdoZW4gdGhlIG1lbnUgaXRlbSBpcyB0b3VjaC10YXBwZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUb3VjaFRhcCBldmVudCB0YXJnZXRpbmcgdGhlIG1lbnUgaXRlbS5cbiAgICovXG4gIG9uVG91Y2hUYXA6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgLyoqXG4gICAqIENhbiBiZSB1c2VkIHRvIHJlbmRlciBwcmltYXJ5IHRleHQgd2l0aGluIHRoZSBtZW51IGl0ZW0uXG4gICAqL1xuICBwcmltYXJ5VGV4dDogX3Byb3BUeXBlczIuZGVmYXVsdC5ub2RlLFxuICAvKipcbiAgICogVGhlIGBTdmdJY29uYCBvciBgRm9udEljb25gIHRvIGJlIGRpc3BsYXllZCBvbiB0aGUgcmlnaHQgc2lkZS5cbiAgICovXG4gIHJpZ2h0SWNvbjogX3Byb3BUeXBlczIuZGVmYXVsdC5lbGVtZW50LFxuICAvKipcbiAgICogQ2FuIGJlIHVzZWQgdG8gcmVuZGVyIHNlY29uZGFyeSB0ZXh0IHdpdGhpbiB0aGUgbWVudSBpdGVtLlxuICAgKi9cbiAgc2Vjb25kYXJ5VGV4dDogX3Byb3BUeXBlczIuZGVmYXVsdC5ub2RlLFxuICAvKipcbiAgICogT3ZlcnJpZGUgdGhlIGlubGluZS1zdHlsZXMgb2YgdGhlIHJvb3QgZWxlbWVudC5cbiAgICovXG4gIHN0eWxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCxcbiAgLyoqXG4gICAqIExvY2F0aW9uIG9uIHRoZSBwb3BvdmVyIG9mIG5lc3RlZCBgTWVudUl0ZW1gIGVsZW1lbnRzIHRoYXQgd2lsbCBhdHRhY2hcbiAgICogdG8gdGhlIGFuY2hvcidzIG9yaWdpbi5cbiAgICogT3B0aW9uczpcbiAgICogaG9yaXpvbnRhbDogW2xlZnQsIG1pZGRsZSwgcmlnaHRdXG4gICAqIHZlcnRpY2FsOiBbdG9wLCBjZW50ZXIsIGJvdHRvbV0uXG4gICAqL1xuICB0YXJnZXRPcmlnaW46IF9wcm9wVHlwZXM0LmRlZmF1bHQub3JpZ2luLFxuICAvKipcbiAgICogVGhlIHZhbHVlIG9mIHRoZSBtZW51IGl0ZW0uXG4gICAqL1xuICB2YWx1ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5hbnlcbn0gOiB7fTtcbmV4cG9ydHMuZGVmYXVsdCA9IE1lbnVJdGVtO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMzEzOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2V4dGVuZHMyID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMik7XG5cbnZhciBfZXh0ZW5kczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leHRlbmRzMik7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5KTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vYmplY3RXaXRob3V0UHJvcGVydGllczIpO1xuXG52YXIgX3RvQXJyYXkyID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMjQpO1xuXG52YXIgX3RvQXJyYXkzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdG9BcnJheTIpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcblxudmFyIF9nZXRQcm90b3R5cGVPZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRQcm90b3R5cGVPZik7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cbnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IF9fd2VicGFja19yZXF1aXJlX18oNyk7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMik7XG5cbnZhciBfaW5oZXJpdHMyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcblxudmFyIF9pbmhlcml0czMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbmhlcml0czIpO1xuXG52YXIgX3NpbXBsZUFzc2lnbiA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cbnZhciBfc2ltcGxlQXNzaWduMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NpbXBsZUFzc2lnbik7XG5cbnZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX3JlYWN0RG9tID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNik7XG5cbnZhciBfcmVhY3REb20yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3REb20pO1xuXG52YXIgX3NoYWxsb3dFcXVhbCA9IF9fd2VicGFja19yZXF1aXJlX18oMzYpO1xuXG52YXIgX3NoYWxsb3dFcXVhbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zaGFsbG93RXF1YWwpO1xuXG52YXIgX0NsaWNrQXdheUxpc3RlbmVyID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMjkpO1xuXG52YXIgX0NsaWNrQXdheUxpc3RlbmVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0NsaWNrQXdheUxpc3RlbmVyKTtcblxudmFyIF9rZXljb2RlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5Myk7XG5cbnZhciBfa2V5Y29kZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9rZXljb2RlKTtcblxudmFyIF9wcm9wVHlwZXMzID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMSk7XG5cbnZhciBfcHJvcFR5cGVzNCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlczMpO1xuXG52YXIgX0xpc3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE0Nik7XG5cbnZhciBfTGlzdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9MaXN0KTtcblxudmFyIF9tZW51VXRpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMxNCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGdldFN0eWxlcyhwcm9wcywgY29udGV4dCkge1xuICB2YXIgZGVza3RvcCA9IHByb3BzLmRlc2t0b3AsXG4gICAgICBtYXhIZWlnaHQgPSBwcm9wcy5tYXhIZWlnaHQsXG4gICAgICB3aWR0aCA9IHByb3BzLndpZHRoO1xuICB2YXIgbXVpVGhlbWUgPSBjb250ZXh0Lm11aVRoZW1lO1xuXG5cbiAgdmFyIHN0eWxlcyA9IHtcbiAgICByb290OiB7XG4gICAgICAvLyBOZXN0ZWQgZGl2IGJhY2F1c2UgdGhlIExpc3Qgc2NhbGVzIHggZmFzdGVyIHRoYW4gaXQgc2NhbGVzIHlcbiAgICAgIHpJbmRleDogbXVpVGhlbWUuekluZGV4Lm1lbnUsXG4gICAgICBtYXhIZWlnaHQ6IG1heEhlaWdodCxcbiAgICAgIG92ZXJmbG93WTogbWF4SGVpZ2h0ID8gJ2F1dG8nIDogbnVsbFxuICAgIH0sXG4gICAgZGl2aWRlcjoge1xuICAgICAgbWFyZ2luVG9wOiA3LFxuICAgICAgbWFyZ2luQm90dG9tOiA4XG4gICAgfSxcbiAgICBsaXN0OiB7XG4gICAgICBkaXNwbGF5OiAndGFibGUtY2VsbCcsXG4gICAgICBwYWRkaW5nQm90dG9tOiBkZXNrdG9wID8gMTYgOiA4LFxuICAgICAgcGFkZGluZ1RvcDogZGVza3RvcCA/IDE2IDogOCxcbiAgICAgIHVzZXJTZWxlY3Q6ICdub25lJyxcbiAgICAgIHdpZHRoOiB3aWR0aFxuICAgIH0sXG4gICAgc2VsZWN0ZWRNZW51SXRlbToge1xuICAgICAgY29sb3I6IG11aVRoZW1lLm1lbnVJdGVtLnNlbGVjdGVkVGV4dENvbG9yXG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBzdHlsZXM7XG59XG5cbnZhciBNZW51ID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0czMuZGVmYXVsdCkoTWVudSwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTWVudShwcm9wcywgY29udGV4dCkge1xuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIE1lbnUpO1xuXG4gICAgdmFyIF90aGlzID0gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMy5kZWZhdWx0KSh0aGlzLCAoTWVudS5fX3Byb3RvX18gfHwgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoTWVudSkpLmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpKTtcblxuICAgIF9pbml0aWFsaXNlUHJvcHMuY2FsbChfdGhpcyk7XG5cbiAgICB2YXIgZmlsdGVyZWRDaGlsZHJlbiA9IF90aGlzLmdldEZpbHRlcmVkQ2hpbGRyZW4ocHJvcHMuY2hpbGRyZW4pO1xuICAgIHZhciBzZWxlY3RlZEluZGV4ID0gX3RoaXMuZ2V0TGFzdFNlbGVjdGVkSW5kZXgocHJvcHMsIGZpbHRlcmVkQ2hpbGRyZW4pO1xuXG4gICAgdmFyIG5ld0ZvY3VzSW5kZXggPSBwcm9wcy5kaXNhYmxlQXV0b0ZvY3VzID8gLTEgOiBzZWxlY3RlZEluZGV4ID49IDAgPyBzZWxlY3RlZEluZGV4IDogMDtcbiAgICBpZiAobmV3Rm9jdXNJbmRleCAhPT0gLTEgJiYgcHJvcHMub25NZW51SXRlbUZvY3VzQ2hhbmdlKSB7XG4gICAgICBwcm9wcy5vbk1lbnVJdGVtRm9jdXNDaGFuZ2UobnVsbCwgbmV3Rm9jdXNJbmRleCk7XG4gICAgfVxuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgZm9jdXNJbmRleDogbmV3Rm9jdXNJbmRleCxcbiAgICAgIGlzS2V5Ym9hcmRGb2N1c2VkOiBwcm9wcy5pbml0aWFsbHlLZXlib2FyZEZvY3VzZWQsXG4gICAgICBrZXlXaWR0aDogcHJvcHMuZGVza3RvcCA/IDY0IDogNTZcbiAgICB9O1xuXG4gICAgX3RoaXMuaG90S2V5SG9sZGVyID0gbmV3IF9tZW51VXRpbHMuSG90S2V5SG9sZGVyKCk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoTWVudSwgW3tcbiAgICBrZXk6ICdjb21wb25lbnREaWRNb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgaWYgKHRoaXMucHJvcHMuYXV0b1dpZHRoKSB7XG4gICAgICAgIHRoaXMuc2V0V2lkdGgoKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc2V0U2NvbGxQb3NpdGlvbigpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgdmFyIHNlbGVjdGVkSW5kZXggPSB2b2lkIDA7XG4gICAgICB2YXIgZmlsdGVyZWRDaGlsZHJlbiA9IHRoaXMuZ2V0RmlsdGVyZWRDaGlsZHJlbihuZXh0UHJvcHMuY2hpbGRyZW4pO1xuXG4gICAgICBpZiAodGhpcy5wcm9wcy5tdWx0aXBsZSAhPT0gdHJ1ZSkge1xuICAgICAgICBzZWxlY3RlZEluZGV4ID0gdGhpcy5nZXRMYXN0U2VsZWN0ZWRJbmRleChuZXh0UHJvcHMsIGZpbHRlcmVkQ2hpbGRyZW4pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VsZWN0ZWRJbmRleCA9IHRoaXMuc3RhdGUuZm9jdXNJbmRleDtcbiAgICAgIH1cblxuICAgICAgdmFyIG5ld0ZvY3VzSW5kZXggPSBuZXh0UHJvcHMuZGlzYWJsZUF1dG9Gb2N1cyA/IC0xIDogc2VsZWN0ZWRJbmRleCA+PSAwID8gc2VsZWN0ZWRJbmRleCA6IDA7XG4gICAgICBpZiAobmV3Rm9jdXNJbmRleCAhPT0gdGhpcy5zdGF0ZS5mb2N1c0luZGV4ICYmIHRoaXMucHJvcHMub25NZW51SXRlbUZvY3VzQ2hhbmdlKSB7XG4gICAgICAgIHRoaXMucHJvcHMub25NZW51SXRlbUZvY3VzQ2hhbmdlKG51bGwsIG5ld0ZvY3VzSW5kZXgpO1xuICAgICAgfVxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGZvY3VzSW5kZXg6IG5ld0ZvY3VzSW5kZXgsXG4gICAgICAgIGtleVdpZHRoOiBuZXh0UHJvcHMuZGVza3RvcCA/IDY0IDogNTZcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3Nob3VsZENvbXBvbmVudFVwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNob3VsZENvbXBvbmVudFVwZGF0ZShuZXh0UHJvcHMsIG5leHRTdGF0ZSwgbmV4dENvbnRleHQpIHtcbiAgICAgIHJldHVybiAhKDAsIF9zaGFsbG93RXF1YWwyLmRlZmF1bHQpKHRoaXMucHJvcHMsIG5leHRQcm9wcykgfHwgISgwLCBfc2hhbGxvd0VxdWFsMi5kZWZhdWx0KSh0aGlzLnN0YXRlLCBuZXh0U3RhdGUpIHx8ICEoMCwgX3NoYWxsb3dFcXVhbDIuZGVmYXVsdCkodGhpcy5jb250ZXh0LCBuZXh0Q29udGV4dCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50RGlkVXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgICAgaWYgKHRoaXMucHJvcHMuYXV0b1dpZHRoKSB0aGlzLnNldFdpZHRoKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0VmFsdWVMaW5rJyxcblxuXG4gICAgLy8gRG8gbm90IHVzZSBvdXRzaWRlIG9mIHRoaXMgY29tcG9uZW50LCBpdCB3aWxsIGJlIHJlbW92ZWQgb25jZSB2YWx1ZUxpbmsgaXMgZGVwcmVjYXRlZFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRWYWx1ZUxpbmsocHJvcHMpIHtcbiAgICAgIHJldHVybiBwcm9wcy52YWx1ZUxpbmsgfHwge1xuICAgICAgICB2YWx1ZTogcHJvcHMudmFsdWUsXG4gICAgICAgIHJlcXVlc3RDaGFuZ2U6IHByb3BzLm9uQ2hhbmdlXG4gICAgICB9O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3NldEtleWJvYXJkRm9jdXNlZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldEtleWJvYXJkRm9jdXNlZChrZXlib2FyZEZvY3VzZWQpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBpc0tleWJvYXJkRm9jdXNlZDoga2V5Ym9hcmRGb2N1c2VkXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRGaWx0ZXJlZENoaWxkcmVuJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RmlsdGVyZWRDaGlsZHJlbihjaGlsZHJlbikge1xuICAgICAgdmFyIGZpbHRlcmVkQ2hpbGRyZW4gPSBbXTtcbiAgICAgIF9yZWFjdDIuZGVmYXVsdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgaWYgKGNoaWxkKSB7XG4gICAgICAgICAgZmlsdGVyZWRDaGlsZHJlbi5wdXNoKGNoaWxkKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZmlsdGVyZWRDaGlsZHJlbjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjbG9uZU1lbnVJdGVtJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2xvbmVNZW51SXRlbShjaGlsZCwgY2hpbGRJbmRleCwgc3R5bGVzLCBpbmRleCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBjaGlsZElzRGlzYWJsZWQgPSBjaGlsZC5wcm9wcy5kaXNhYmxlZDtcblxuICAgICAgdmFyIHNlbGVjdGVkQ2hpbGRTdHlsZXMgPSB7fTtcbiAgICAgIGlmICghY2hpbGRJc0Rpc2FibGVkKSB7XG4gICAgICAgIHZhciBzZWxlY3RlZCA9IHRoaXMuaXNDaGlsZFNlbGVjdGVkKGNoaWxkLCB0aGlzLnByb3BzKTtcblxuICAgICAgICBpZiAoc2VsZWN0ZWQpIHtcbiAgICAgICAgICAoMCwgX3NpbXBsZUFzc2lnbjIuZGVmYXVsdCkoc2VsZWN0ZWRDaGlsZFN0eWxlcywgc3R5bGVzLnNlbGVjdGVkTWVudUl0ZW0sIHRoaXMucHJvcHMuc2VsZWN0ZWRNZW51SXRlbVN0eWxlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIG1lcmdlZENoaWxkU3R5bGVzID0gKDAsIF9zaW1wbGVBc3NpZ24yLmRlZmF1bHQpKHt9LCBjaGlsZC5wcm9wcy5zdHlsZSwgdGhpcy5wcm9wcy5tZW51SXRlbVN0eWxlLCBzZWxlY3RlZENoaWxkU3R5bGVzKTtcblxuICAgICAgdmFyIGV4dHJhUHJvcHMgPSB7XG4gICAgICAgIGRlc2t0b3A6IHRoaXMucHJvcHMuZGVza3RvcCxcbiAgICAgICAgc3R5bGU6IG1lcmdlZENoaWxkU3R5bGVzXG4gICAgICB9O1xuICAgICAgaWYgKCFjaGlsZElzRGlzYWJsZWQpIHtcbiAgICAgICAgdmFyIGlzRm9jdXNlZCA9IGNoaWxkSW5kZXggPT09IHRoaXMuc3RhdGUuZm9jdXNJbmRleDtcbiAgICAgICAgdmFyIGZvY3VzU3RhdGUgPSAnbm9uZSc7XG4gICAgICAgIGlmIChpc0ZvY3VzZWQpIHtcbiAgICAgICAgICBmb2N1c1N0YXRlID0gdGhpcy5zdGF0ZS5pc0tleWJvYXJkRm9jdXNlZCA/ICdrZXlib2FyZC1mb2N1c2VkJyA6ICdmb2N1c2VkJztcbiAgICAgICAgfVxuXG4gICAgICAgICgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KShleHRyYVByb3BzLCB7XG4gICAgICAgICAgZm9jdXNTdGF0ZTogZm9jdXNTdGF0ZSxcbiAgICAgICAgICBvblRvdWNoVGFwOiBmdW5jdGlvbiBvblRvdWNoVGFwKGV2ZW50KSB7XG4gICAgICAgICAgICBfdGhpczIuaGFuZGxlTWVudUl0ZW1Ub3VjaFRhcChldmVudCwgY2hpbGQsIGluZGV4KTtcbiAgICAgICAgICAgIGlmIChjaGlsZC5wcm9wcy5vblRvdWNoVGFwKSBjaGlsZC5wcm9wcy5vblRvdWNoVGFwKGV2ZW50KTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHJlZjogaXNGb2N1c2VkID8gJ2ZvY3VzZWRNZW51SXRlbScgOiBudWxsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jbG9uZUVsZW1lbnQoY2hpbGQsIGV4dHJhUHJvcHMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2RlY3JlbWVudEtleWJvYXJkRm9jdXNJbmRleCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlY3JlbWVudEtleWJvYXJkRm9jdXNJbmRleChldmVudCkge1xuICAgICAgdmFyIGluZGV4ID0gdGhpcy5zdGF0ZS5mb2N1c0luZGV4O1xuXG4gICAgICBpbmRleC0tO1xuICAgICAgaWYgKGluZGV4IDwgMCkgaW5kZXggPSAwO1xuXG4gICAgICB0aGlzLnNldEZvY3VzSW5kZXgoZXZlbnQsIGluZGV4LCB0cnVlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRNZW51SXRlbUNvdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TWVudUl0ZW1Db3VudChmaWx0ZXJlZENoaWxkcmVuKSB7XG4gICAgICB2YXIgbWVudUl0ZW1Db3VudCA9IDA7XG4gICAgICBmaWx0ZXJlZENoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIHZhciBjaGlsZElzQURpdmlkZXIgPSBjaGlsZC50eXBlICYmIGNoaWxkLnR5cGUubXVpTmFtZSA9PT0gJ0RpdmlkZXInO1xuICAgICAgICB2YXIgY2hpbGRJc0Rpc2FibGVkID0gY2hpbGQucHJvcHMuZGlzYWJsZWQ7XG4gICAgICAgIGlmICghY2hpbGRJc0FEaXZpZGVyICYmICFjaGlsZElzRGlzYWJsZWQpIG1lbnVJdGVtQ291bnQrKztcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG1lbnVJdGVtQ291bnQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0TGFzdFNlbGVjdGVkSW5kZXgnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRMYXN0U2VsZWN0ZWRJbmRleChwcm9wcywgZmlsdGVyZWRDaGlsZHJlbikge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIHZhciBzZWxlY3RlZEluZGV4ID0gLTE7XG4gICAgICB2YXIgbWVudUl0ZW1JbmRleCA9IDA7XG5cbiAgICAgIGZpbHRlcmVkQ2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgdmFyIGNoaWxkSXNBRGl2aWRlciA9IGNoaWxkLnR5cGUgJiYgY2hpbGQudHlwZS5tdWlOYW1lID09PSAnRGl2aWRlcic7XG5cbiAgICAgICAgaWYgKF90aGlzMy5pc0NoaWxkU2VsZWN0ZWQoY2hpbGQsIHByb3BzKSkgc2VsZWN0ZWRJbmRleCA9IG1lbnVJdGVtSW5kZXg7XG4gICAgICAgIGlmICghY2hpbGRJc0FEaXZpZGVyKSBtZW51SXRlbUluZGV4Kys7XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIHNlbGVjdGVkSW5kZXg7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2V0Rm9jdXNJbmRleFN0YXJ0c1dpdGgnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRGb2N1c0luZGV4U3RhcnRzV2l0aChldmVudCwga2V5cykge1xuICAgICAgdmFyIGZvdW5kSW5kZXggPSAtMTtcbiAgICAgIF9yZWFjdDIuZGVmYXVsdC5DaGlsZHJlbi5mb3JFYWNoKHRoaXMucHJvcHMuY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCwgaW5kZXgpIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggPj0gMCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcHJpbWFyeVRleHQgPSBjaGlsZC5wcm9wcy5wcmltYXJ5VGV4dDtcblxuICAgICAgICBpZiAodHlwZW9mIHByaW1hcnlUZXh0ID09PSAnc3RyaW5nJyAmJiBwcmltYXJ5VGV4dC5zdWJzdHIoMCwga2V5cy5sZW5ndGgpLnRvTG93ZXJDYXNlKCkgPT09IGtleXMudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICAgIGZvdW5kSW5kZXggPSBpbmRleDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZiAoZm91bmRJbmRleCA+PSAwKSB7XG4gICAgICAgIHRoaXMuc2V0Rm9jdXNJbmRleChldmVudCwgZm91bmRJbmRleCwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2hhbmRsZU1lbnVJdGVtVG91Y2hUYXAnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBoYW5kbGVNZW51SXRlbVRvdWNoVGFwKGV2ZW50LCBpdGVtLCBpbmRleCkge1xuICAgICAgdmFyIGNoaWxkcmVuID0gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgICAgIHZhciBtdWx0aXBsZSA9IHRoaXMucHJvcHMubXVsdGlwbGU7XG4gICAgICB2YXIgdmFsdWVMaW5rID0gdGhpcy5nZXRWYWx1ZUxpbmsodGhpcy5wcm9wcyk7XG4gICAgICB2YXIgbWVudVZhbHVlID0gdmFsdWVMaW5rLnZhbHVlO1xuICAgICAgdmFyIGl0ZW1WYWx1ZSA9IGl0ZW0ucHJvcHMudmFsdWU7XG4gICAgICB2YXIgZm9jdXNJbmRleCA9IF9yZWFjdDIuZGVmYXVsdC5pc1ZhbGlkRWxlbWVudChjaGlsZHJlbikgPyAwIDogY2hpbGRyZW4uaW5kZXhPZihpdGVtKTtcblxuICAgICAgdGhpcy5zZXRGb2N1c0luZGV4KGV2ZW50LCBmb2N1c0luZGV4LCBmYWxzZSk7XG5cbiAgICAgIGlmIChtdWx0aXBsZSkge1xuICAgICAgICBtZW51VmFsdWUgPSBtZW51VmFsdWUgfHwgW107XG5cbiAgICAgICAgdmFyIGl0ZW1JbmRleCA9IG1lbnVWYWx1ZS5pbmRleE9mKGl0ZW1WYWx1ZSk7XG5cbiAgICAgICAgdmFyIF9tZW51VmFsdWUgPSBtZW51VmFsdWUsXG4gICAgICAgICAgICBfbWVudVZhbHVlMiA9ICgwLCBfdG9BcnJheTMuZGVmYXVsdCkoX21lbnVWYWx1ZSksXG4gICAgICAgICAgICBuZXdNZW51VmFsdWUgPSBfbWVudVZhbHVlMi5zbGljZSgwKTtcblxuICAgICAgICBpZiAoaXRlbUluZGV4ID09PSAtMSkge1xuICAgICAgICAgIG5ld01lbnVWYWx1ZS5wdXNoKGl0ZW1WYWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV3TWVudVZhbHVlLnNwbGljZShpdGVtSW5kZXgsIDEpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFsdWVMaW5rLnJlcXVlc3RDaGFuZ2UoZXZlbnQsIG5ld01lbnVWYWx1ZSk7XG4gICAgICB9IGVsc2UgaWYgKCFtdWx0aXBsZSAmJiBpdGVtVmFsdWUgIT09IG1lbnVWYWx1ZSkge1xuICAgICAgICB2YWx1ZUxpbmsucmVxdWVzdENoYW5nZShldmVudCwgaXRlbVZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5wcm9wcy5vbkl0ZW1Ub3VjaFRhcChldmVudCwgaXRlbSwgaW5kZXgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2luY3JlbWVudEtleWJvYXJkRm9jdXNJbmRleCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluY3JlbWVudEtleWJvYXJkRm9jdXNJbmRleChldmVudCwgZmlsdGVyZWRDaGlsZHJlbikge1xuICAgICAgdmFyIGluZGV4ID0gdGhpcy5zdGF0ZS5mb2N1c0luZGV4O1xuICAgICAgdmFyIG1heEluZGV4ID0gdGhpcy5nZXRNZW51SXRlbUNvdW50KGZpbHRlcmVkQ2hpbGRyZW4pIC0gMTtcblxuICAgICAgaW5kZXgrKztcbiAgICAgIGlmIChpbmRleCA+IG1heEluZGV4KSBpbmRleCA9IG1heEluZGV4O1xuXG4gICAgICB0aGlzLnNldEZvY3VzSW5kZXgoZXZlbnQsIGluZGV4LCB0cnVlKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdpc0NoaWxkU2VsZWN0ZWQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpc0NoaWxkU2VsZWN0ZWQoY2hpbGQsIHByb3BzKSB7XG4gICAgICB2YXIgbWVudVZhbHVlID0gdGhpcy5nZXRWYWx1ZUxpbmsocHJvcHMpLnZhbHVlO1xuICAgICAgdmFyIGNoaWxkVmFsdWUgPSBjaGlsZC5wcm9wcy52YWx1ZTtcblxuICAgICAgaWYgKHByb3BzLm11bHRpcGxlKSB7XG4gICAgICAgIHJldHVybiBtZW51VmFsdWUgJiYgbWVudVZhbHVlLmxlbmd0aCAmJiBtZW51VmFsdWUuaW5kZXhPZihjaGlsZFZhbHVlKSAhPT0gLTE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gY2hpbGQucHJvcHMuaGFzT3duUHJvcGVydHkoJ3ZhbHVlJykgJiYgbWVudVZhbHVlID09PSBjaGlsZFZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3NldEZvY3VzSW5kZXgnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRGb2N1c0luZGV4KGV2ZW50LCBuZXdJbmRleCwgaXNLZXlib2FyZEZvY3VzZWQpIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLm9uTWVudUl0ZW1Gb2N1c0NoYW5nZSkge1xuICAgICAgICAvLyBEbyB0aGlzIGV2ZW4gaWYgYG5ld0luZGV4ID09PSB0aGlzLnN0YXRlLmZvY3VzSW5kZXhgIHRvIGFsbG93IHVzZXJzXG4gICAgICAgIC8vIHRvIGRldGVjdCB1cC1hcnJvdyBvbiB0aGUgZmlyc3QgTWVudUl0ZW0gb3IgZG93bi1hcnJvdyBvbiB0aGUgbGFzdC5cbiAgICAgICAgdGhpcy5wcm9wcy5vbk1lbnVJdGVtRm9jdXNDaGFuZ2UoZXZlbnQsIG5ld0luZGV4KTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBmb2N1c0luZGV4OiBuZXdJbmRleCxcbiAgICAgICAgaXNLZXlib2FyZEZvY3VzZWQ6IGlzS2V5Ym9hcmRGb2N1c2VkXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzZXRTY29sbFBvc2l0aW9uJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0U2NvbGxQb3NpdGlvbigpIHtcbiAgICAgIHZhciBkZXNrdG9wID0gdGhpcy5wcm9wcy5kZXNrdG9wO1xuICAgICAgdmFyIGZvY3VzZWRNZW51SXRlbSA9IHRoaXMucmVmcy5mb2N1c2VkTWVudUl0ZW07XG4gICAgICB2YXIgbWVudUl0ZW1IZWlnaHQgPSBkZXNrdG9wID8gMzIgOiA0ODtcblxuICAgICAgaWYgKGZvY3VzZWRNZW51SXRlbSkge1xuICAgICAgICB2YXIgc2VsZWN0ZWRPZmZTZXQgPSBfcmVhY3REb20yLmRlZmF1bHQuZmluZERPTU5vZGUoZm9jdXNlZE1lbnVJdGVtKS5vZmZzZXRUb3A7XG5cbiAgICAgICAgLy8gTWFrZSB0aGUgZm9jdXNlZCBpdGVtIGJlIHRoZSAybmQgaXRlbSBpbiB0aGUgbGlzdCB0aGUgdXNlciBzZWVzXG4gICAgICAgIHZhciBzY3JvbGxUb3AgPSBzZWxlY3RlZE9mZlNldCAtIG1lbnVJdGVtSGVpZ2h0O1xuICAgICAgICBpZiAoc2Nyb2xsVG9wIDwgbWVudUl0ZW1IZWlnaHQpIHNjcm9sbFRvcCA9IDA7XG5cbiAgICAgICAgX3JlYWN0RG9tMi5kZWZhdWx0LmZpbmRET01Ob2RlKHRoaXMucmVmcy5zY3JvbGxDb250YWluZXIpLnNjcm9sbFRvcCA9IHNjcm9sbFRvcDtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjYW5jZWxTY3JvbGxFdmVudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNhbmNlbFNjcm9sbEV2ZW50KGV2ZW50KSB7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2V0V2lkdGgnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRXaWR0aCgpIHtcbiAgICAgIHZhciBlbCA9IF9yZWFjdERvbTIuZGVmYXVsdC5maW5kRE9NTm9kZSh0aGlzKTtcbiAgICAgIHZhciBsaXN0RWwgPSBfcmVhY3REb20yLmRlZmF1bHQuZmluZERPTU5vZGUodGhpcy5yZWZzLmxpc3QpO1xuICAgICAgdmFyIGVsV2lkdGggPSBlbC5vZmZzZXRXaWR0aDtcbiAgICAgIHZhciBrZXlXaWR0aCA9IHRoaXMuc3RhdGUua2V5V2lkdGg7XG4gICAgICB2YXIgbWluV2lkdGggPSBrZXlXaWR0aCAqIDEuNTtcbiAgICAgIHZhciBrZXlJbmNyZW1lbnRzID0gZWxXaWR0aCAvIGtleVdpZHRoO1xuICAgICAgdmFyIG5ld1dpZHRoID0gdm9pZCAwO1xuXG4gICAgICBrZXlJbmNyZW1lbnRzID0ga2V5SW5jcmVtZW50cyA8PSAxLjUgPyAxLjUgOiBNYXRoLmNlaWwoa2V5SW5jcmVtZW50cyk7XG4gICAgICBuZXdXaWR0aCA9IGtleUluY3JlbWVudHMgKiBrZXlXaWR0aDtcblxuICAgICAgaWYgKG5ld1dpZHRoIDwgbWluV2lkdGgpIG5ld1dpZHRoID0gbWluV2lkdGg7XG5cbiAgICAgIGVsLnN0eWxlLndpZHRoID0gbmV3V2lkdGggKyAncHgnO1xuICAgICAgbGlzdEVsLnN0eWxlLndpZHRoID0gbmV3V2lkdGggKyAncHgnO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBhdXRvV2lkdGggPSBfcHJvcHMuYXV0b1dpZHRoLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3Byb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIGRlc2t0b3AgPSBfcHJvcHMuZGVza3RvcCxcbiAgICAgICAgICBkaXNhYmxlQXV0b0ZvY3VzID0gX3Byb3BzLmRpc2FibGVBdXRvRm9jdXMsXG4gICAgICAgICAgaW5pdGlhbGx5S2V5Ym9hcmRGb2N1c2VkID0gX3Byb3BzLmluaXRpYWxseUtleWJvYXJkRm9jdXNlZCxcbiAgICAgICAgICBsaXN0U3R5bGUgPSBfcHJvcHMubGlzdFN0eWxlLFxuICAgICAgICAgIG1heEhlaWdodCA9IF9wcm9wcy5tYXhIZWlnaHQsXG4gICAgICAgICAgbXVsdGlwbGUgPSBfcHJvcHMubXVsdGlwbGUsXG4gICAgICAgICAgb25JdGVtVG91Y2hUYXAgPSBfcHJvcHMub25JdGVtVG91Y2hUYXAsXG4gICAgICAgICAgb25Fc2NLZXlEb3duID0gX3Byb3BzLm9uRXNjS2V5RG93bixcbiAgICAgICAgICBvbk1lbnVJdGVtRm9jdXNDaGFuZ2UgPSBfcHJvcHMub25NZW51SXRlbUZvY3VzQ2hhbmdlLFxuICAgICAgICAgIHNlbGVjdGVkTWVudUl0ZW1TdHlsZSA9IF9wcm9wcy5zZWxlY3RlZE1lbnVJdGVtU3R5bGUsXG4gICAgICAgICAgbWVudUl0ZW1TdHlsZSA9IF9wcm9wcy5tZW51SXRlbVN0eWxlLFxuICAgICAgICAgIHN0eWxlID0gX3Byb3BzLnN0eWxlLFxuICAgICAgICAgIHZhbHVlID0gX3Byb3BzLnZhbHVlLFxuICAgICAgICAgIHZhbHVlTGluayA9IF9wcm9wcy52YWx1ZUxpbmssXG4gICAgICAgICAgd2lkdGggPSBfcHJvcHMud2lkdGgsXG4gICAgICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMy5kZWZhdWx0KShfcHJvcHMsIFsnYXV0b1dpZHRoJywgJ2NoaWxkcmVuJywgJ2Rlc2t0b3AnLCAnZGlzYWJsZUF1dG9Gb2N1cycsICdpbml0aWFsbHlLZXlib2FyZEZvY3VzZWQnLCAnbGlzdFN0eWxlJywgJ21heEhlaWdodCcsICdtdWx0aXBsZScsICdvbkl0ZW1Ub3VjaFRhcCcsICdvbkVzY0tleURvd24nLCAnb25NZW51SXRlbUZvY3VzQ2hhbmdlJywgJ3NlbGVjdGVkTWVudUl0ZW1TdHlsZScsICdtZW51SXRlbVN0eWxlJywgJ3N0eWxlJywgJ3ZhbHVlJywgJ3ZhbHVlTGluaycsICd3aWR0aCddKTtcbiAgICAgIHZhciBwcmVwYXJlU3R5bGVzID0gdGhpcy5jb250ZXh0Lm11aVRoZW1lLnByZXBhcmVTdHlsZXM7XG5cbiAgICAgIHZhciBzdHlsZXMgPSBnZXRTdHlsZXModGhpcy5wcm9wcywgdGhpcy5jb250ZXh0KTtcblxuICAgICAgdmFyIG1lcmdlZFJvb3RTdHlsZXMgPSAoMCwgX3NpbXBsZUFzc2lnbjIuZGVmYXVsdCkoc3R5bGVzLnJvb3QsIHN0eWxlKTtcbiAgICAgIHZhciBtZXJnZWRMaXN0U3R5bGVzID0gKDAsIF9zaW1wbGVBc3NpZ24yLmRlZmF1bHQpKHN0eWxlcy5saXN0LCBsaXN0U3R5bGUpO1xuXG4gICAgICB2YXIgZmlsdGVyZWRDaGlsZHJlbiA9IHRoaXMuZ2V0RmlsdGVyZWRDaGlsZHJlbihjaGlsZHJlbik7XG5cbiAgICAgIHZhciBtZW51SXRlbUluZGV4ID0gMDtcbiAgICAgIHZhciBuZXdDaGlsZHJlbiA9IF9yZWFjdDIuZGVmYXVsdC5DaGlsZHJlbi5tYXAoZmlsdGVyZWRDaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkLCBpbmRleCkge1xuICAgICAgICB2YXIgY2hpbGRJc0Rpc2FibGVkID0gY2hpbGQucHJvcHMuZGlzYWJsZWQ7XG4gICAgICAgIHZhciBjaGlsZE5hbWUgPSBjaGlsZC50eXBlID8gY2hpbGQudHlwZS5tdWlOYW1lIDogJyc7XG4gICAgICAgIHZhciBuZXdDaGlsZCA9IGNoaWxkO1xuXG4gICAgICAgIHN3aXRjaCAoY2hpbGROYW1lKSB7XG4gICAgICAgICAgY2FzZSAnTWVudUl0ZW0nOlxuICAgICAgICAgICAgbmV3Q2hpbGQgPSBfdGhpczQuY2xvbmVNZW51SXRlbShjaGlsZCwgbWVudUl0ZW1JbmRleCwgc3R5bGVzLCBpbmRleCk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgJ0RpdmlkZXInOlxuICAgICAgICAgICAgbmV3Q2hpbGQgPSBfcmVhY3QyLmRlZmF1bHQuY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICAgICAgICAgIHN0eWxlOiAoMCwgX3NpbXBsZUFzc2lnbjIuZGVmYXVsdCkoe30sIHN0eWxlcy5kaXZpZGVyLCBjaGlsZC5wcm9wcy5zdHlsZSlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2hpbGROYW1lID09PSAnTWVudUl0ZW0nICYmICFjaGlsZElzRGlzYWJsZWQpIHtcbiAgICAgICAgICBtZW51SXRlbUluZGV4Kys7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3Q2hpbGQ7XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBfQ2xpY2tBd2F5TGlzdGVuZXIyLmRlZmF1bHQsXG4gICAgICAgIHsgb25DbGlja0F3YXk6IHRoaXMuaGFuZGxlQ2xpY2tBd2F5IH0sXG4gICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIG9uS2V5RG93bjogdGhpcy5oYW5kbGVLZXlEb3duLFxuICAgICAgICAgICAgb25XaGVlbDogdGhpcy5oYW5kbGVPbldoZWVsLFxuICAgICAgICAgICAgc3R5bGU6IHByZXBhcmVTdHlsZXMobWVyZ2VkUm9vdFN0eWxlcyksXG4gICAgICAgICAgICByZWY6ICdzY3JvbGxDb250YWluZXInLFxuICAgICAgICAgICAgcm9sZTogJ3ByZXNlbnRhdGlvbidcbiAgICAgICAgICB9LFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgX0xpc3QyLmRlZmF1bHQsXG4gICAgICAgICAgICAoMCwgX2V4dGVuZHMzLmRlZmF1bHQpKHt9LCBvdGhlciwge1xuICAgICAgICAgICAgICByZWY6ICdsaXN0JyxcbiAgICAgICAgICAgICAgc3R5bGU6IG1lcmdlZExpc3RTdHlsZXMsXG4gICAgICAgICAgICAgIHJvbGU6ICdtZW51J1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBuZXdDaGlsZHJlblxuICAgICAgICAgIClcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIE1lbnU7XG59KF9yZWFjdC5Db21wb25lbnQpO1xuXG5NZW51LmRlZmF1bHRQcm9wcyA9IHtcbiAgYXV0b1dpZHRoOiB0cnVlLFxuICBkZXNrdG9wOiBmYWxzZSxcbiAgZGlzYWJsZUF1dG9Gb2N1czogZmFsc2UsXG4gIGluaXRpYWxseUtleWJvYXJkRm9jdXNlZDogZmFsc2UsXG4gIG1heEhlaWdodDogbnVsbCxcbiAgbXVsdGlwbGU6IGZhbHNlLFxuICBvbkNoYW5nZTogZnVuY3Rpb24gb25DaGFuZ2UoKSB7fSxcbiAgb25Fc2NLZXlEb3duOiBmdW5jdGlvbiBvbkVzY0tleURvd24oKSB7fSxcbiAgb25JdGVtVG91Y2hUYXA6IGZ1bmN0aW9uIG9uSXRlbVRvdWNoVGFwKCkge30sXG4gIG9uS2V5RG93bjogZnVuY3Rpb24gb25LZXlEb3duKCkge31cbn07XG5NZW51LmNvbnRleHRUeXBlcyA9IHtcbiAgbXVpVGhlbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWRcbn07XG5cbnZhciBfaW5pdGlhbGlzZVByb3BzID0gZnVuY3Rpb24gX2luaXRpYWxpc2VQcm9wcygpIHtcbiAgdmFyIF90aGlzNSA9IHRoaXM7XG5cbiAgdGhpcy5oYW5kbGVDbGlja0F3YXkgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIF90aGlzNS5zZXRGb2N1c0luZGV4KGV2ZW50LCAtMSwgZmFsc2UpO1xuICB9O1xuXG4gIHRoaXMuaGFuZGxlS2V5RG93biA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgIHZhciBmaWx0ZXJlZENoaWxkcmVuID0gX3RoaXM1LmdldEZpbHRlcmVkQ2hpbGRyZW4oX3RoaXM1LnByb3BzLmNoaWxkcmVuKTtcbiAgICB2YXIga2V5ID0gKDAsIF9rZXljb2RlMi5kZWZhdWx0KShldmVudCk7XG4gICAgc3dpdGNoIChrZXkpIHtcbiAgICAgIGNhc2UgJ2Rvd24nOlxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBfdGhpczUuaW5jcmVtZW50S2V5Ym9hcmRGb2N1c0luZGV4KGV2ZW50LCBmaWx0ZXJlZENoaWxkcmVuKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdlc2MnOlxuICAgICAgICBfdGhpczUucHJvcHMub25Fc2NLZXlEb3duKGV2ZW50KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd0YWInOlxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBpZiAoZXZlbnQuc2hpZnRLZXkpIHtcbiAgICAgICAgICBfdGhpczUuZGVjcmVtZW50S2V5Ym9hcmRGb2N1c0luZGV4KGV2ZW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpczUuaW5jcmVtZW50S2V5Ym9hcmRGb2N1c0luZGV4KGV2ZW50LCBmaWx0ZXJlZENoaWxkcmVuKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3VwJzpcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgX3RoaXM1LmRlY3JlbWVudEtleWJvYXJkRm9jdXNJbmRleChldmVudCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGtleSAmJiBrZXkubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgdmFyIGhvdEtleXMgPSBfdGhpczUuaG90S2V5SG9sZGVyLmFwcGVuZChrZXkpO1xuICAgICAgICAgIGlmIChfdGhpczUuc2V0Rm9jdXNJbmRleFN0YXJ0c1dpdGgoZXZlbnQsIGhvdEtleXMpKSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBfdGhpczUucHJvcHMub25LZXlEb3duKGV2ZW50KTtcbiAgfTtcblxuICB0aGlzLmhhbmRsZU9uV2hlZWwgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICB2YXIgc2Nyb2xsQ29udGFpbmVyID0gX3RoaXM1LnJlZnMuc2Nyb2xsQ29udGFpbmVyO1xuICAgIC8vIE9ubHkgc2Nyb2xsIGxvY2sgaWYgdGhlIHRoZSBNZW51IGlzIHNjcm9sbGFibGUuXG4gICAgaWYgKHNjcm9sbENvbnRhaW5lci5zY3JvbGxIZWlnaHQgPD0gc2Nyb2xsQ29udGFpbmVyLmNsaWVudEhlaWdodCkgcmV0dXJuO1xuXG4gICAgdmFyIHNjcm9sbFRvcCA9IHNjcm9sbENvbnRhaW5lci5zY3JvbGxUb3AsXG4gICAgICAgIHNjcm9sbEhlaWdodCA9IHNjcm9sbENvbnRhaW5lci5zY3JvbGxIZWlnaHQsXG4gICAgICAgIGNsaWVudEhlaWdodCA9IHNjcm9sbENvbnRhaW5lci5jbGllbnRIZWlnaHQ7XG5cbiAgICB2YXIgd2hlZWxEZWx0YSA9IGV2ZW50LmRlbHRhWTtcbiAgICB2YXIgaXNEZWx0YVBvc2l0aXZlID0gd2hlZWxEZWx0YSA+IDA7XG5cbiAgICBpZiAoaXNEZWx0YVBvc2l0aXZlICYmIHdoZWVsRGVsdGEgPiBzY3JvbGxIZWlnaHQgLSBjbGllbnRIZWlnaHQgLSBzY3JvbGxUb3ApIHtcbiAgICAgIHNjcm9sbENvbnRhaW5lci5zY3JvbGxUb3AgPSBzY3JvbGxIZWlnaHQ7XG4gICAgICByZXR1cm4gX3RoaXM1LmNhbmNlbFNjcm9sbEV2ZW50KGV2ZW50KTtcbiAgICB9IGVsc2UgaWYgKCFpc0RlbHRhUG9zaXRpdmUgJiYgLXdoZWVsRGVsdGEgPiBzY3JvbGxUb3ApIHtcbiAgICAgIHNjcm9sbENvbnRhaW5lci5zY3JvbGxUb3AgPSAwO1xuICAgICAgcmV0dXJuIF90aGlzNS5jYW5jZWxTY3JvbGxFdmVudChldmVudCk7XG4gICAgfVxuICB9O1xufTtcblxuTWVudS5wcm9wVHlwZXMgPSAgZmFsc2UgPyB7XG4gIC8qKlxuICAgKiBJZiB0cnVlLCB0aGUgd2lkdGggb2YgdGhlIG1lbnUgd2lsbCBiZSBzZXQgYXV0b21hdGljYWxseVxuICAgKiBhY2NvcmRpbmcgdG8gdGhlIHdpZHRocyBvZiBpdHMgY2hpbGRyZW4sXG4gICAqIHVzaW5nIHByb3BlciBrZXlsaW5lIGluY3JlbWVudHMgKDY0cHggZm9yIGRlc2t0b3AsXG4gICAqIDU2cHggb3RoZXJ3aXNlKS5cbiAgICovXG4gIGF1dG9XaWR0aDogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIG1lbnUuIFRoaXMgaXMgdXN1YWxseSB1c2VkIHRvIHBhc3MgYE1lbnVJdGVtYFxuICAgKiBlbGVtZW50cy5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm5vZGUsXG4gIC8qKlxuICAgKiBJZiB0cnVlLCB0aGUgbWVudSBpdGVtIHdpbGwgcmVuZGVyIHdpdGggY29tcGFjdCBkZXNrdG9wIHN0eWxlcy5cbiAgICovXG4gIGRlc2t0b3A6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgLyoqXG4gICAqIElmIHRydWUsIHRoZSBtZW51IHdpbGwgbm90IGJlIGF1dG8tZm9jdXNlZC5cbiAgICovXG4gIGRpc2FibGVBdXRvRm9jdXM6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgLyoqXG4gICAqIElmIHRydWUsIHRoZSBtZW51IHdpbGwgYmUga2V5Ym9hcmQtZm9jdXNlZCBpbml0aWFsbHkuXG4gICAqL1xuICBpbml0aWFsbHlLZXlib2FyZEZvY3VzZWQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRoZSBpbmxpbmUtc3R5bGVzIG9mIHRoZSB1bmRlcmx5aW5nIGBMaXN0YCBlbGVtZW50LlxuICAgKi9cbiAgbGlzdFN0eWxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCxcbiAgLyoqXG4gICAqIFRoZSBtYXhpbXVtIGhlaWdodCBvZiB0aGUgbWVudSBpbiBwaXhlbHMuIElmIHNwZWNpZmllZCxcbiAgICogdGhlIG1lbnUgd2lsbCBiZSBzY3JvbGxhYmxlIGlmIGl0IGlzIHRhbGxlciB0aGFuIHRoZSBwcm92aWRlZFxuICAgKiBoZWlnaHQuXG4gICAqL1xuICBtYXhIZWlnaHQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyLFxuICAvKipcbiAgICogT3ZlcnJpZGUgdGhlIGlubGluZS1zdHlsZXMgb2YgbWVudSBpdGVtcy5cbiAgICovXG4gIG1lbnVJdGVtU3R5bGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LFxuICAvKipcbiAgICogSWYgdHJ1ZSwgYHZhbHVlYCBtdXN0IGJlIGFuIGFycmF5IGFuZCB0aGUgbWVudSB3aWxsIHN1cHBvcnRcbiAgICogbXVsdGlwbGUgc2VsZWN0aW9ucy5cbiAgICovXG4gIG11bHRpcGxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmdW5jdGlvbiBmaXJlZCB3aGVuIGEgbWVudSBpdGVtIHdpdGggYHZhbHVlYCBub3RcbiAgICogZXF1YWwgdG8gdGhlIGN1cnJlbnQgYHZhbHVlYCBvZiB0aGUgbWVudSBpcyB0b3VjaC10YXBwZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUb3VjaFRhcCBldmVudCB0YXJnZXRpbmcgdGhlIG1lbnUgaXRlbS5cbiAgICogQHBhcmFtIHthbnl9ICB2YWx1ZSBJZiBgbXVsdGlwbGVgIGlzIHRydWUsIHRoZSBtZW51J3MgYHZhbHVlYFxuICAgKiBhcnJheSB3aXRoIGVpdGhlciB0aGUgbWVudSBpdGVtJ3MgYHZhbHVlYCBhZGRlZCAoaWZcbiAgICogaXQgd2Fzbid0IGFscmVhZHkgc2VsZWN0ZWQpIG9yIG9taXR0ZWQgKGlmIGl0IHdhcyBhbHJlYWR5IHNlbGVjdGVkKS5cbiAgICogT3RoZXJ3aXNlLCB0aGUgYHZhbHVlYCBvZiB0aGUgbWVudSBpdGVtLlxuICAgKi9cbiAgb25DaGFuZ2U6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgLyoqXG4gICAqIENhbGxiYWNrIGZ1bmN0aW9uIGZpcmVkIHdoZW4gdGhlIG1lbnUgaXMgZm9jdXNlZCBhbmQgdGhlICpFc2MqIGtleVxuICAgKiBpcyBwcmVzc2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgYGtleWRvd25gIGV2ZW50IHRhcmdldGluZyB0aGUgbWVudS5cbiAgICovXG4gIG9uRXNjS2V5RG93bjogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZnVuY3Rpb24gZmlyZWQgd2hlbiBhIG1lbnUgaXRlbSBpcyB0b3VjaC10YXBwZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUb3VjaFRhcCBldmVudCB0YXJnZXRpbmcgdGhlIG1lbnUgaXRlbS5cbiAgICogQHBhcmFtIHtvYmplY3R9IG1lbnVJdGVtIFRoZSBtZW51IGl0ZW0uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCBUaGUgaW5kZXggb2YgdGhlIG1lbnUgaXRlbS5cbiAgICovXG4gIG9uSXRlbVRvdWNoVGFwOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIC8qKiBAaWdub3JlICovXG4gIG9uS2V5RG93bjogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZnVuY3Rpb24gZmlyZWQgd2hlbiB0aGUgZm9jdXMgb24gYSBgTWVudUl0ZW1gIGlzIGNoYW5nZWQuXG4gICAqIFRoZXJlIHdpbGwgYmUgc29tZSBcImR1cGxpY2F0ZVwiIGNoYW5nZXMgcmVwb3J0ZWQgaWYgdHdvIGRpZmZlcmVudFxuICAgKiBmb2N1c2luZyBldmVudCBoYXBwZW4sIGZvciBleGFtcGxlIGlmIGEgYE1lbnVJdGVtYCBpcyBmb2N1c2VkIHZpYVxuICAgKiB0aGUga2V5Ym9hcmQgYW5kIHRoZW4gaXQgaXMgY2xpY2tlZCBvbi5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRoZSBldmVudCB0aGF0IHRyaWdnZXJlZCB0aGUgZm9jdXMgY2hhbmdlLlxuICAgKiBUaGUgZXZlbnQgY2FuIGJlIG51bGwgc2luY2UgdGhlIGZvY3VzIGNhbiBiZSBjaGFuZ2VkIGZvciBub24tZXZlbnRcbiAgICogcmVhc29ucyBzdWNoIGFzIHByb3AgY2hhbmdlcy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IG5ld0ZvY3VzSW5kZXggVGhlIGluZGV4IG9mIHRoZSBuZXdseSBmb2N1c2VkXG4gICAqIGBNZW51SXRlbWAgb3IgYC0xYCBpZiBmb2N1cyB3YXMgbG9zdC5cbiAgICovXG4gIG9uTWVudUl0ZW1Gb2N1c0NoYW5nZTogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICAvKipcbiAgICogT3ZlcnJpZGUgdGhlIGlubGluZS1zdHlsZXMgb2Ygc2VsZWN0ZWQgbWVudSBpdGVtcy5cbiAgICovXG4gIHNlbGVjdGVkTWVudUl0ZW1TdHlsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsXG4gIC8qKlxuICAgKiBPdmVycmlkZSB0aGUgaW5saW5lLXN0eWxlcyBvZiB0aGUgcm9vdCBlbGVtZW50LlxuICAgKi9cbiAgc3R5bGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LFxuICAvKipcbiAgICogSWYgYG11bHRpcGxlYCBpcyB0cnVlLCBhbiBhcnJheSBvZiB0aGUgYHZhbHVlYHMgb2YgdGhlIHNlbGVjdGVkXG4gICAqIG1lbnUgaXRlbXMuIE90aGVyd2lzZSwgdGhlIGB2YWx1ZWAgb2YgdGhlIHNlbGVjdGVkIG1lbnUgaXRlbS5cbiAgICogSWYgcHJvdmlkZWQsIHRoZSBtZW51IHdpbGwgYmUgYSBjb250cm9sbGVkIGNvbXBvbmVudC5cbiAgICogVGhpcyBjb21wb25lbnQgYWxzbyBzdXBwb3J0cyB2YWx1ZUxpbmsuXG4gICAqL1xuICB2YWx1ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5hbnksXG4gIC8qKlxuICAgKiBWYWx1ZUxpbmsgZm9yIHRoZSBtZW51J3MgYHZhbHVlYC5cbiAgICovXG4gIHZhbHVlTGluazogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsXG4gIC8qKlxuICAgKiBUaGUgd2lkdGggb2YgdGhlIG1lbnUuIElmIG5vdCBzcGVjaWZpZWQsIHRoZSBtZW51J3Mgd2lkdGhcbiAgICogd2lsbCBiZSBzZXQgYWNjb3JkaW5nIHRvIHRoZSB3aWR0aHMgb2YgaXRzIGNoaWxkcmVuLCB1c2luZ1xuICAgKiBwcm9wZXIga2V5bGluZSBpbmNyZW1lbnRzICg2NHB4IGZvciBkZXNrdG9wLCA1NnB4IG90aGVyd2lzZSkuXG4gICAqL1xuICB3aWR0aDogX3Byb3BUeXBlczQuZGVmYXVsdC5zdHJpbmdPck51bWJlclxufSA6IHt9O1xuZXhwb3J0cy5kZWZhdWx0ID0gTWVudTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDMxNDpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuSG90S2V5SG9sZGVyID0gdW5kZWZpbmVkO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBIb3RLZXlIb2xkZXIgPSBleHBvcnRzLkhvdEtleUhvbGRlciA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gSG90S2V5SG9sZGVyKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBIb3RLZXlIb2xkZXIpO1xuXG4gICAgdGhpcy5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLnRpbWVySWQgPSBudWxsO1xuICAgICAgX3RoaXMubGFzdEtleXMgPSBudWxsO1xuICAgIH07XG4gIH1cblxuICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShIb3RLZXlIb2xkZXIsIFt7XG4gICAga2V5OiAnYXBwZW5kJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYXBwZW5kKGtleSkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZXJJZCk7XG4gICAgICB0aGlzLnRpbWVySWQgPSBzZXRUaW1lb3V0KHRoaXMuY2xlYXIsIDUwMCk7XG4gICAgICByZXR1cm4gdGhpcy5sYXN0S2V5cyA9ICh0aGlzLmxhc3RLZXlzIHx8ICcnKSArIGtleTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIEhvdEtleUhvbGRlcjtcbn0oKTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDMxNjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9leHRlbmRzMiA9IF9fd2VicGFja19yZXF1aXJlX18oMTIpO1xuXG52YXIgX2V4dGVuZHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXh0ZW5kczIpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9fd2VicGFja19yZXF1aXJlX18oOSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyKTtcblxudmFyIF9nZXRQcm90b3R5cGVPZiA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0UHJvdG90eXBlT2YpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIpO1xuXG52YXIgX2luaGVyaXRzMiA9IF9fd2VicGFja19yZXF1aXJlX18oNik7XG5cbnZhciBfaW5oZXJpdHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5oZXJpdHMyKTtcblxudmFyIF9zaW1wbGVBc3NpZ24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXG52YXIgX3NpbXBsZUFzc2lnbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zaW1wbGVBc3NpZ24pO1xuXG52YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9yZWFjdERvbSA9IF9fd2VicGFja19yZXF1aXJlX18oMTYpO1xuXG52YXIgX3JlYWN0RG9tMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0RG9tKTtcblxudmFyIF9yZWFjdEV2ZW50TGlzdGVuZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDExMyk7XG5cbnZhciBfcmVhY3RFdmVudExpc3RlbmVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0RXZlbnRMaXN0ZW5lcik7XG5cbnZhciBfUmVuZGVyVG9MYXllciA9IF9fd2VicGFja19yZXF1aXJlX18oMzMyKTtcblxudmFyIF9SZW5kZXJUb0xheWVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1JlbmRlclRvTGF5ZXIpO1xuXG52YXIgX3Byb3BUeXBlczMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMxKTtcblxudmFyIF9wcm9wVHlwZXM0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzMyk7XG5cbnZhciBfUGFwZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQzKTtcblxudmFyIF9QYXBlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9QYXBlcik7XG5cbnZhciBfbG9kYXNoID0gX193ZWJwYWNrX3JlcXVpcmVfXygyOTQpO1xuXG52YXIgX2xvZGFzaDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9sb2Rhc2gpO1xuXG52YXIgX1BvcG92ZXJBbmltYXRpb25EZWZhdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMTcpO1xuXG52YXIgX1BvcG92ZXJBbmltYXRpb25EZWZhdWx0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1BvcG92ZXJBbmltYXRpb25EZWZhdWx0KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIHN0eWxlcyA9IHtcbiAgcm9vdDoge1xuICAgIGRpc3BsYXk6ICdub25lJ1xuICB9XG59O1xuXG52YXIgUG9wb3ZlciA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHMzLmRlZmF1bHQpKFBvcG92ZXIsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFBvcG92ZXIocHJvcHMsIGNvbnRleHQpIHtcbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBQb3BvdmVyKTtcblxuICAgIHZhciBfdGhpcyA9ICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMuZGVmYXVsdCkodGhpcywgKFBvcG92ZXIuX19wcm90b19fIHx8ICgwLCBfZ2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKFBvcG92ZXIpKS5jYWxsKHRoaXMsIHByb3BzLCBjb250ZXh0KSk7XG5cbiAgICBfdGhpcy50aW1lb3V0ID0gbnVsbDtcblxuICAgIF90aGlzLnJlbmRlckxheWVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgYW5pbWF0ZWQgPSBfdGhpcyRwcm9wcy5hbmltYXRlZCxcbiAgICAgICAgICBhbmltYXRpb24gPSBfdGhpcyRwcm9wcy5hbmltYXRpb24sXG4gICAgICAgICAgYW5jaG9yRWwgPSBfdGhpcyRwcm9wcy5hbmNob3JFbCxcbiAgICAgICAgICBhbmNob3JPcmlnaW4gPSBfdGhpcyRwcm9wcy5hbmNob3JPcmlnaW4sXG4gICAgICAgICAgYXV0b0Nsb3NlV2hlbk9mZlNjcmVlbiA9IF90aGlzJHByb3BzLmF1dG9DbG9zZVdoZW5PZmZTY3JlZW4sXG4gICAgICAgICAgY2FuQXV0b1Bvc2l0aW9uID0gX3RoaXMkcHJvcHMuY2FuQXV0b1Bvc2l0aW9uLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgb25SZXF1ZXN0Q2xvc2UgPSBfdGhpcyRwcm9wcy5vblJlcXVlc3RDbG9zZSxcbiAgICAgICAgICBzdHlsZSA9IF90aGlzJHByb3BzLnN0eWxlLFxuICAgICAgICAgIHRhcmdldE9yaWdpbiA9IF90aGlzJHByb3BzLnRhcmdldE9yaWdpbixcbiAgICAgICAgICB1c2VMYXllckZvckNsaWNrQXdheSA9IF90aGlzJHByb3BzLnVzZUxheWVyRm9yQ2xpY2tBd2F5LFxuICAgICAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczMuZGVmYXVsdCkoX3RoaXMkcHJvcHMsIFsnYW5pbWF0ZWQnLCAnYW5pbWF0aW9uJywgJ2FuY2hvckVsJywgJ2FuY2hvck9yaWdpbicsICdhdXRvQ2xvc2VXaGVuT2ZmU2NyZWVuJywgJ2NhbkF1dG9Qb3NpdGlvbicsICdjaGlsZHJlbicsICdvblJlcXVlc3RDbG9zZScsICdzdHlsZScsICd0YXJnZXRPcmlnaW4nLCAndXNlTGF5ZXJGb3JDbGlja0F3YXknXSk7XG5cblxuICAgICAgdmFyIHN0eWxlUm9vdCA9IHN0eWxlO1xuXG4gICAgICBpZiAoIWFuaW1hdGVkKSB7XG4gICAgICAgIHN0eWxlUm9vdCA9IHtcbiAgICAgICAgICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgICAgICAgICB6SW5kZXg6IF90aGlzLmNvbnRleHQubXVpVGhlbWUuekluZGV4LnBvcG92ZXJcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoIV90aGlzLnN0YXRlLm9wZW4pIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBfUGFwZXIyLmRlZmF1bHQsXG4gICAgICAgICAgKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7IHN0eWxlOiAoMCwgX3NpbXBsZUFzc2lnbjIuZGVmYXVsdCkoc3R5bGVSb290LCBzdHlsZSkgfSwgb3RoZXIpLFxuICAgICAgICAgIGNoaWxkcmVuXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHZhciBBbmltYXRpb24gPSBhbmltYXRpb24gfHwgX1BvcG92ZXJBbmltYXRpb25EZWZhdWx0Mi5kZWZhdWx0O1xuXG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIEFuaW1hdGlvbixcbiAgICAgICAgKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7XG4gICAgICAgICAgdGFyZ2V0T3JpZ2luOiB0YXJnZXRPcmlnaW4sXG4gICAgICAgICAgc3R5bGU6IHN0eWxlUm9vdFxuICAgICAgICB9LCBvdGhlciwge1xuICAgICAgICAgIG9wZW46IF90aGlzLnN0YXRlLm9wZW4gJiYgIV90aGlzLnN0YXRlLmNsb3NpbmdcbiAgICAgICAgfSksXG4gICAgICAgIGNoaWxkcmVuXG4gICAgICApO1xuICAgIH07XG5cbiAgICBfdGhpcy5jb21wb25lbnRDbGlja0F3YXkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpcy5yZXF1ZXN0Q2xvc2UoJ2NsaWNrQXdheScpO1xuICAgIH07XG5cbiAgICBfdGhpcy5zZXRQbGFjZW1lbnQgPSBmdW5jdGlvbiAoc2Nyb2xsaW5nKSB7XG4gICAgICBpZiAoIV90aGlzLnN0YXRlLm9wZW4pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoIV90aGlzLnJlZnMubGF5ZXIuZ2V0TGF5ZXIoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciB0YXJnZXRFbCA9IF90aGlzLnJlZnMubGF5ZXIuZ2V0TGF5ZXIoKS5jaGlsZHJlblswXTtcbiAgICAgIGlmICghdGFyZ2V0RWwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgX3RoaXMkcHJvcHMyID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgdGFyZ2V0T3JpZ2luID0gX3RoaXMkcHJvcHMyLnRhcmdldE9yaWdpbixcbiAgICAgICAgICBhbmNob3JPcmlnaW4gPSBfdGhpcyRwcm9wczIuYW5jaG9yT3JpZ2luO1xuXG4gICAgICB2YXIgYW5jaG9yRWwgPSBfdGhpcy5wcm9wcy5hbmNob3JFbCB8fCBfdGhpcy5hbmNob3JFbDtcblxuICAgICAgdmFyIGFuY2hvciA9IF90aGlzLmdldEFuY2hvclBvc2l0aW9uKGFuY2hvckVsKTtcbiAgICAgIHZhciB0YXJnZXQgPSBfdGhpcy5nZXRUYXJnZXRQb3NpdGlvbih0YXJnZXRFbCk7XG5cbiAgICAgIHZhciB0YXJnZXRQb3NpdGlvbiA9IHtcbiAgICAgICAgdG9wOiBhbmNob3JbYW5jaG9yT3JpZ2luLnZlcnRpY2FsXSAtIHRhcmdldFt0YXJnZXRPcmlnaW4udmVydGljYWxdLFxuICAgICAgICBsZWZ0OiBhbmNob3JbYW5jaG9yT3JpZ2luLmhvcml6b250YWxdIC0gdGFyZ2V0W3RhcmdldE9yaWdpbi5ob3Jpem9udGFsXVxuICAgICAgfTtcblxuICAgICAgaWYgKHNjcm9sbGluZyAmJiBfdGhpcy5wcm9wcy5hdXRvQ2xvc2VXaGVuT2ZmU2NyZWVuKSB7XG4gICAgICAgIF90aGlzLmF1dG9DbG9zZVdoZW5PZmZTY3JlZW4oYW5jaG9yKTtcbiAgICAgIH1cblxuICAgICAgaWYgKF90aGlzLnByb3BzLmNhbkF1dG9Qb3NpdGlvbikge1xuICAgICAgICB0YXJnZXQgPSBfdGhpcy5nZXRUYXJnZXRQb3NpdGlvbih0YXJnZXRFbCk7IC8vIHVwZGF0ZSBhcyBoZWlnaHQgbWF5IGhhdmUgY2hhbmdlZFxuICAgICAgICB0YXJnZXRQb3NpdGlvbiA9IF90aGlzLmFwcGx5QXV0b1Bvc2l0aW9uSWZOZWVkZWQoYW5jaG9yLCB0YXJnZXQsIHRhcmdldE9yaWdpbiwgYW5jaG9yT3JpZ2luLCB0YXJnZXRQb3NpdGlvbik7XG4gICAgICB9XG5cbiAgICAgIHRhcmdldEVsLnN0eWxlLnRvcCA9IHRhcmdldFBvc2l0aW9uLnRvcCArICdweCc7XG4gICAgICB0YXJnZXRFbC5zdHlsZS5sZWZ0ID0gdGFyZ2V0UG9zaXRpb24ubGVmdCArICdweCc7XG4gICAgICB0YXJnZXRFbC5zdHlsZS5tYXhIZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQgKyAncHgnO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVSZXNpemUgPSAoMCwgX2xvZGFzaDIuZGVmYXVsdCkoX3RoaXMuc2V0UGxhY2VtZW50LCAxMDApO1xuICAgIF90aGlzLmhhbmRsZVNjcm9sbCA9ICgwLCBfbG9kYXNoMi5kZWZhdWx0KShfdGhpcy5zZXRQbGFjZW1lbnQuYmluZChfdGhpcywgdHJ1ZSksIDUwKTtcblxuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgb3BlbjogcHJvcHMub3BlbixcbiAgICAgIGNsb3Npbmc6IGZhbHNlXG4gICAgfTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShQb3BvdmVyLCBbe1xuICAgIGtleTogJ2NvbXBvbmVudERpZE1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB0aGlzLnNldFBsYWNlbWVudCgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIGlmIChuZXh0UHJvcHMub3BlbiA9PT0gdGhpcy5wcm9wcy5vcGVuKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKG5leHRQcm9wcy5vcGVuKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXQpO1xuICAgICAgICB0aGlzLnRpbWVvdXQgPSBudWxsO1xuICAgICAgICB0aGlzLmFuY2hvckVsID0gbmV4dFByb3BzLmFuY2hvckVsIHx8IHRoaXMucHJvcHMuYW5jaG9yRWw7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIG9wZW46IHRydWUsXG4gICAgICAgICAgY2xvc2luZzogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAobmV4dFByb3BzLmFuaW1hdGVkKSB7XG4gICAgICAgICAgaWYgKHRoaXMudGltZW91dCAhPT0gbnVsbCkgcmV0dXJuO1xuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBjbG9zaW5nOiB0cnVlIH0pO1xuICAgICAgICAgIHRoaXMudGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMyLnNldFN0YXRlKHtcbiAgICAgICAgICAgICAgb3BlbjogZmFsc2VcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgX3RoaXMyLnRpbWVvdXQgPSBudWxsO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSwgNTAwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIG9wZW46IGZhbHNlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnREaWRVcGRhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgICB0aGlzLnNldFBsYWNlbWVudCgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxVbm1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICB0aGlzLmhhbmRsZVJlc2l6ZS5jYW5jZWwoKTtcbiAgICAgIHRoaXMuaGFuZGxlU2Nyb2xsLmNhbmNlbCgpO1xuXG4gICAgICBpZiAodGhpcy50aW1lb3V0KSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXQpO1xuICAgICAgICB0aGlzLnRpbWVvdXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlcXVlc3RDbG9zZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlcXVlc3RDbG9zZShyZWFzb24pIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLm9uUmVxdWVzdENsb3NlKSB7XG4gICAgICAgIHRoaXMucHJvcHMub25SZXF1ZXN0Q2xvc2UocmVhc29uKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRBbmNob3JQb3NpdGlvbicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEFuY2hvclBvc2l0aW9uKGVsKSB7XG4gICAgICBpZiAoIWVsKSB7XG4gICAgICAgIGVsID0gX3JlYWN0RG9tMi5kZWZhdWx0LmZpbmRET01Ob2RlKHRoaXMpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgdmFyIGEgPSB7XG4gICAgICAgIHRvcDogcmVjdC50b3AsXG4gICAgICAgIGxlZnQ6IHJlY3QubGVmdCxcbiAgICAgICAgd2lkdGg6IGVsLm9mZnNldFdpZHRoLFxuICAgICAgICBoZWlnaHQ6IGVsLm9mZnNldEhlaWdodFxuICAgICAgfTtcblxuICAgICAgYS5yaWdodCA9IHJlY3QucmlnaHQgfHwgYS5sZWZ0ICsgYS53aWR0aDtcbiAgICAgIGEuYm90dG9tID0gcmVjdC5ib3R0b20gfHwgYS50b3AgKyBhLmhlaWdodDtcbiAgICAgIGEubWlkZGxlID0gYS5sZWZ0ICsgKGEucmlnaHQgLSBhLmxlZnQpIC8gMjtcbiAgICAgIGEuY2VudGVyID0gYS50b3AgKyAoYS5ib3R0b20gLSBhLnRvcCkgLyAyO1xuXG4gICAgICByZXR1cm4gYTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRUYXJnZXRQb3NpdGlvbicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFRhcmdldFBvc2l0aW9uKHRhcmdldEVsKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0b3A6IDAsXG4gICAgICAgIGNlbnRlcjogdGFyZ2V0RWwub2Zmc2V0SGVpZ2h0IC8gMixcbiAgICAgICAgYm90dG9tOiB0YXJnZXRFbC5vZmZzZXRIZWlnaHQsXG4gICAgICAgIGxlZnQ6IDAsXG4gICAgICAgIG1pZGRsZTogdGFyZ2V0RWwub2Zmc2V0V2lkdGggLyAyLFxuICAgICAgICByaWdodDogdGFyZ2V0RWwub2Zmc2V0V2lkdGhcbiAgICAgIH07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnYXV0b0Nsb3NlV2hlbk9mZlNjcmVlbicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGF1dG9DbG9zZVdoZW5PZmZTY3JlZW4oYW5jaG9yUG9zaXRpb24pIHtcbiAgICAgIGlmIChhbmNob3JQb3NpdGlvbi50b3AgPCAwIHx8IGFuY2hvclBvc2l0aW9uLnRvcCA+IHdpbmRvdy5pbm5lckhlaWdodCB8fCBhbmNob3JQb3NpdGlvbi5sZWZ0IDwgMCB8fCBhbmNob3JQb3NpdGlvbi5sZWZ0ID4gd2luZG93LmlubmVyV2lkdGgpIHtcbiAgICAgICAgdGhpcy5yZXF1ZXN0Q2xvc2UoJ29mZlNjcmVlbicpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldE92ZXJsYXBNb2RlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0T3ZlcmxhcE1vZGUoYW5jaG9yLCB0YXJnZXQsIG1lZGlhbikge1xuICAgICAgaWYgKFthbmNob3IsIHRhcmdldF0uaW5kZXhPZihtZWRpYW4pID49IDApIHJldHVybiAnYXV0byc7XG4gICAgICBpZiAoYW5jaG9yID09PSB0YXJnZXQpIHJldHVybiAnaW5jbHVzaXZlJztcbiAgICAgIHJldHVybiAnZXhjbHVzaXZlJztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRQb3NpdGlvbnMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRQb3NpdGlvbnMoYW5jaG9yLCB0YXJnZXQpIHtcbiAgICAgIHZhciBhID0gKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7fSwgYW5jaG9yKTtcbiAgICAgIHZhciB0ID0gKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7fSwgdGFyZ2V0KTtcblxuICAgICAgdmFyIHBvc2l0aW9ucyA9IHtcbiAgICAgICAgeDogWydsZWZ0JywgJ3JpZ2h0J10uZmlsdGVyKGZ1bmN0aW9uIChwKSB7XG4gICAgICAgICAgcmV0dXJuIHAgIT09IHQuaG9yaXpvbnRhbDtcbiAgICAgICAgfSksXG4gICAgICAgIHk6IFsndG9wJywgJ2JvdHRvbSddLmZpbHRlcihmdW5jdGlvbiAocCkge1xuICAgICAgICAgIHJldHVybiBwICE9PSB0LnZlcnRpY2FsO1xuICAgICAgICB9KVxuICAgICAgfTtcblxuICAgICAgdmFyIG92ZXJsYXAgPSB7XG4gICAgICAgIHg6IHRoaXMuZ2V0T3ZlcmxhcE1vZGUoYS5ob3Jpem9udGFsLCB0Lmhvcml6b250YWwsICdtaWRkbGUnKSxcbiAgICAgICAgeTogdGhpcy5nZXRPdmVybGFwTW9kZShhLnZlcnRpY2FsLCB0LnZlcnRpY2FsLCAnY2VudGVyJylcbiAgICAgIH07XG5cbiAgICAgIHBvc2l0aW9ucy54LnNwbGljZShvdmVybGFwLnggPT09ICdhdXRvJyA/IDAgOiAxLCAwLCAnbWlkZGxlJyk7XG4gICAgICBwb3NpdGlvbnMueS5zcGxpY2Uob3ZlcmxhcC55ID09PSAnYXV0bycgPyAwIDogMSwgMCwgJ2NlbnRlcicpO1xuXG4gICAgICBpZiAob3ZlcmxhcC55ICE9PSAnYXV0bycpIHtcbiAgICAgICAgYS52ZXJ0aWNhbCA9IGEudmVydGljYWwgPT09ICd0b3AnID8gJ2JvdHRvbScgOiAndG9wJztcbiAgICAgICAgaWYgKG92ZXJsYXAueSA9PT0gJ2luY2x1c2l2ZScpIHtcbiAgICAgICAgICB0LnZlcnRpY2FsID0gdC52ZXJ0aWNhbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAob3ZlcmxhcC54ICE9PSAnYXV0bycpIHtcbiAgICAgICAgYS5ob3Jpem9udGFsID0gYS5ob3Jpem9udGFsID09PSAnbGVmdCcgPyAncmlnaHQnIDogJ2xlZnQnO1xuICAgICAgICBpZiAob3ZlcmxhcC55ID09PSAnaW5jbHVzaXZlJykge1xuICAgICAgICAgIHQuaG9yaXpvbnRhbCA9IHQuaG9yaXpvbnRhbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBwb3NpdGlvbnM6IHBvc2l0aW9ucyxcbiAgICAgICAgYW5jaG9yUG9zOiBhXG4gICAgICB9O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2FwcGx5QXV0b1Bvc2l0aW9uSWZOZWVkZWQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhcHBseUF1dG9Qb3NpdGlvbklmTmVlZGVkKGFuY2hvciwgdGFyZ2V0LCB0YXJnZXRPcmlnaW4sIGFuY2hvck9yaWdpbiwgdGFyZ2V0UG9zaXRpb24pIHtcbiAgICAgIHZhciBfZ2V0UG9zaXRpb25zID0gdGhpcy5nZXRQb3NpdGlvbnMoYW5jaG9yT3JpZ2luLCB0YXJnZXRPcmlnaW4pLFxuICAgICAgICAgIHBvc2l0aW9ucyA9IF9nZXRQb3NpdGlvbnMucG9zaXRpb25zLFxuICAgICAgICAgIGFuY2hvclBvcyA9IF9nZXRQb3NpdGlvbnMuYW5jaG9yUG9zO1xuXG4gICAgICBpZiAodGFyZ2V0UG9zaXRpb24udG9wIDwgMCB8fCB0YXJnZXRQb3NpdGlvbi50b3AgKyB0YXJnZXQuYm90dG9tID4gd2luZG93LmlubmVySGVpZ2h0KSB7XG4gICAgICAgIHZhciBuZXdUb3AgPSBhbmNob3JbYW5jaG9yUG9zLnZlcnRpY2FsXSAtIHRhcmdldFtwb3NpdGlvbnMueVswXV07XG4gICAgICAgIGlmIChuZXdUb3AgKyB0YXJnZXQuYm90dG9tIDw9IHdpbmRvdy5pbm5lckhlaWdodCkge1xuICAgICAgICAgIHRhcmdldFBvc2l0aW9uLnRvcCA9IE1hdGgubWF4KDAsIG5ld1RvcCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV3VG9wID0gYW5jaG9yW2FuY2hvclBvcy52ZXJ0aWNhbF0gLSB0YXJnZXRbcG9zaXRpb25zLnlbMV1dO1xuICAgICAgICAgIGlmIChuZXdUb3AgKyB0YXJnZXQuYm90dG9tIDw9IHdpbmRvdy5pbm5lckhlaWdodCkge1xuICAgICAgICAgICAgdGFyZ2V0UG9zaXRpb24udG9wID0gTWF0aC5tYXgoMCwgbmV3VG9wKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRhcmdldFBvc2l0aW9uLmxlZnQgPCAwIHx8IHRhcmdldFBvc2l0aW9uLmxlZnQgKyB0YXJnZXQucmlnaHQgPiB3aW5kb3cuaW5uZXJXaWR0aCkge1xuICAgICAgICB2YXIgbmV3TGVmdCA9IGFuY2hvclthbmNob3JQb3MuaG9yaXpvbnRhbF0gLSB0YXJnZXRbcG9zaXRpb25zLnhbMF1dO1xuICAgICAgICBpZiAobmV3TGVmdCArIHRhcmdldC5yaWdodCA8PSB3aW5kb3cuaW5uZXJXaWR0aCkge1xuICAgICAgICAgIHRhcmdldFBvc2l0aW9uLmxlZnQgPSBNYXRoLm1heCgwLCBuZXdMZWZ0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXdMZWZ0ID0gYW5jaG9yW2FuY2hvclBvcy5ob3Jpem9udGFsXSAtIHRhcmdldFtwb3NpdGlvbnMueFsxXV07XG4gICAgICAgICAgaWYgKG5ld0xlZnQgKyB0YXJnZXQucmlnaHQgPD0gd2luZG93LmlubmVyV2lkdGgpIHtcbiAgICAgICAgICAgIHRhcmdldFBvc2l0aW9uLmxlZnQgPSBNYXRoLm1heCgwLCBuZXdMZWZ0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRhcmdldFBvc2l0aW9uO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHsgc3R5bGU6IHN0eWxlcy5yb290IH0sXG4gICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdEV2ZW50TGlzdGVuZXIyLmRlZmF1bHQsIHtcbiAgICAgICAgICB0YXJnZXQ6IHRoaXMucHJvcHMuc2Nyb2xsYWJsZUNvbnRhaW5lcixcbiAgICAgICAgICBvblNjcm9sbDogdGhpcy5oYW5kbGVTY3JvbGwsXG4gICAgICAgICAgb25SZXNpemU6IHRoaXMuaGFuZGxlUmVzaXplXG4gICAgICAgIH0pLFxuICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfUmVuZGVyVG9MYXllcjIuZGVmYXVsdCwge1xuICAgICAgICAgIHJlZjogJ2xheWVyJyxcbiAgICAgICAgICBvcGVuOiB0aGlzLnN0YXRlLm9wZW4sXG4gICAgICAgICAgY29tcG9uZW50Q2xpY2tBd2F5OiB0aGlzLmNvbXBvbmVudENsaWNrQXdheSxcbiAgICAgICAgICB1c2VMYXllckZvckNsaWNrQXdheTogdGhpcy5wcm9wcy51c2VMYXllckZvckNsaWNrQXdheSxcbiAgICAgICAgICByZW5kZXI6IHRoaXMucmVuZGVyTGF5ZXJcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBQb3BvdmVyO1xufShfcmVhY3QuQ29tcG9uZW50KTtcblxuUG9wb3Zlci5kZWZhdWx0UHJvcHMgPSB7XG4gIGFuY2hvck9yaWdpbjoge1xuICAgIHZlcnRpY2FsOiAnYm90dG9tJyxcbiAgICBob3Jpem9udGFsOiAnbGVmdCdcbiAgfSxcbiAgYW5pbWF0ZWQ6IHRydWUsXG4gIGF1dG9DbG9zZVdoZW5PZmZTY3JlZW46IHRydWUsXG4gIGNhbkF1dG9Qb3NpdGlvbjogdHJ1ZSxcbiAgb25SZXF1ZXN0Q2xvc2U6IGZ1bmN0aW9uIG9uUmVxdWVzdENsb3NlKCkge30sXG4gIG9wZW46IGZhbHNlLFxuICBzY3JvbGxhYmxlQ29udGFpbmVyOiAnd2luZG93JyxcbiAgc3R5bGU6IHtcbiAgICBvdmVyZmxvd1k6ICdhdXRvJ1xuICB9LFxuICB0YXJnZXRPcmlnaW46IHtcbiAgICB2ZXJ0aWNhbDogJ3RvcCcsXG4gICAgaG9yaXpvbnRhbDogJ2xlZnQnXG4gIH0sXG4gIHVzZUxheWVyRm9yQ2xpY2tBd2F5OiB0cnVlLFxuICB6RGVwdGg6IDFcbn07XG5Qb3BvdmVyLmNvbnRleHRUeXBlcyA9IHtcbiAgbXVpVGhlbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWRcbn07XG5Qb3BvdmVyLnByb3BUeXBlcyA9ICBmYWxzZSA/IHtcbiAgLyoqXG4gICAqIFRoaXMgaXMgdGhlIERPTSBlbGVtZW50IHRoYXQgd2lsbCBiZSB1c2VkIHRvIHNldCB0aGUgcG9zaXRpb24gb2YgdGhlXG4gICAqIHBvcG92ZXIuXG4gICAqL1xuICBhbmNob3JFbDogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsXG4gIC8qKlxuICAgKiBUaGlzIGlzIHRoZSBwb2ludCBvbiB0aGUgYW5jaG9yIHdoZXJlIHRoZSBwb3BvdmVyJ3NcbiAgICogYHRhcmdldE9yaWdpbmAgd2lsbCBhdHRhY2ggdG8uXG4gICAqIE9wdGlvbnM6XG4gICAqIHZlcnRpY2FsOiBbdG9wLCBjZW50ZXIsIGJvdHRvbV1cbiAgICogaG9yaXpvbnRhbDogW2xlZnQsIG1pZGRsZSwgcmlnaHRdLlxuICAgKi9cbiAgYW5jaG9yT3JpZ2luOiBfcHJvcFR5cGVzNC5kZWZhdWx0Lm9yaWdpbixcbiAgLyoqXG4gICAqIElmIHRydWUsIHRoZSBwb3BvdmVyIHdpbGwgYXBwbHkgdHJhbnNpdGlvbnMgd2hlblxuICAgKiBpdCBpcyBhZGRlZCB0byB0aGUgRE9NLlxuICAgKi9cbiAgYW5pbWF0ZWQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRoZSBkZWZhdWx0IGFuaW1hdGlvbiBjb21wb25lbnQgdXNlZC5cbiAgICovXG4gIGFuaW1hdGlvbjogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICAvKipcbiAgICogSWYgdHJ1ZSwgdGhlIHBvcG92ZXIgd2lsbCBoaWRlIHdoZW4gdGhlIGFuY2hvciBpcyBzY3JvbGxlZCBvZmYgdGhlIHNjcmVlbi5cbiAgICovXG4gIGF1dG9DbG9zZVdoZW5PZmZTY3JlZW46IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgLyoqXG4gICAqIElmIHRydWUsIHRoZSBwb3BvdmVyIChwb3RlbnRpYWxseSkgaWdub3JlcyBgdGFyZ2V0T3JpZ2luYFxuICAgKiBhbmQgYGFuY2hvck9yaWdpbmAgdG8gbWFrZSBpdHNlbGYgZml0IG9uIHNjcmVlbixcbiAgICogd2hpY2ggaXMgdXNlZnVsIGZvciBtb2JpbGUgZGV2aWNlcy5cbiAgICovXG4gIGNhbkF1dG9Qb3NpdGlvbjogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIHBvcG92ZXIuXG4gICAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlczIuZGVmYXVsdC5ub2RlLFxuICAvKipcbiAgICogVGhlIENTUyBjbGFzcyBuYW1lIG9mIHRoZSByb290IGVsZW1lbnQuXG4gICAqL1xuICBjbGFzc05hbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZnVuY3Rpb24gZmlyZWQgd2hlbiB0aGUgcG9wb3ZlciBpcyByZXF1ZXN0ZWQgdG8gYmUgY2xvc2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcmVhc29uIFRoZSByZWFzb24gZm9yIHRoZSBjbG9zZSByZXF1ZXN0LiBQb3NzaWJsZXMgdmFsdWVzXG4gICAqIGFyZSAnY2xpY2tBd2F5JyBhbmQgJ29mZlNjcmVlbicuXG4gICAqL1xuICBvblJlcXVlc3RDbG9zZTogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICAvKipcbiAgICogSWYgdHJ1ZSwgdGhlIHBvcG92ZXIgaXMgdmlzaWJsZS5cbiAgICovXG4gIG9wZW46IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgLyoqXG4gICAqIFJlcHJlc2VudHMgdGhlIHBhcmVudCBzY3JvbGxhYmxlIGNvbnRhaW5lci5cbiAgICogSXQgY2FuIGJlIGFuIGVsZW1lbnQgb3IgYSBzdHJpbmcgbGlrZSBgd2luZG93YC5cbiAgICovXG4gIHNjcm9sbGFibGVDb250YWluZXI6IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCwgX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmddKSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRoZSBpbmxpbmUtc3R5bGVzIG9mIHRoZSByb290IGVsZW1lbnQuXG4gICAqL1xuICBzdHlsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsXG4gIC8qKlxuICAgKiBUaGlzIGlzIHRoZSBwb2ludCBvbiB0aGUgcG9wb3ZlciB3aGljaCB3aWxsIGF0dGFjaCB0b1xuICAgKiB0aGUgYW5jaG9yJ3Mgb3JpZ2luLlxuICAgKiBPcHRpb25zOlxuICAgKiB2ZXJ0aWNhbDogW3RvcCwgY2VudGVyLCBib3R0b21dXG4gICAqIGhvcml6b250YWw6IFtsZWZ0LCBtaWRkbGUsIHJpZ2h0XS5cbiAgICovXG4gIHRhcmdldE9yaWdpbjogX3Byb3BUeXBlczQuZGVmYXVsdC5vcmlnaW4sXG4gIC8qKlxuICAgKiBJZiB0cnVlLCB0aGUgcG9wb3ZlciB3aWxsIHJlbmRlciBvbiB0b3Agb2YgYW4gaW52aXNpYmxlXG4gICAqIGxheWVyLCB3aGljaCB3aWxsIHByZXZlbnQgY2xpY2tzIHRvIHRoZSB1bmRlcmx5aW5nXG4gICAqIGVsZW1lbnRzLCBhbmQgdHJpZ2dlciBhbiBgb25SZXF1ZXN0Q2xvc2UoJ2NsaWNrQXdheScpYCBjYWxsLlxuICAgKi9cbiAgdXNlTGF5ZXJGb3JDbGlja0F3YXk6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSB6RGVwdGggb2YgdGhlIHBvcG92ZXIuXG4gICAqL1xuICB6RGVwdGg6IF9wcm9wVHlwZXM0LmRlZmF1bHQuekRlcHRoXG59IDoge307XG5leHBvcnRzLmRlZmF1bHQgPSBQb3BvdmVyO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMzE3OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2dldFByb3RvdHlwZU9mID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcblxudmFyIF9nZXRQcm90b3R5cGVPZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRQcm90b3R5cGVPZik7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cbnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IF9fd2VicGFja19yZXF1aXJlX18oNyk7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMik7XG5cbnZhciBfaW5oZXJpdHMyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcblxudmFyIF9pbmhlcml0czMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbmhlcml0czIpO1xuXG52YXIgX3NpbXBsZUFzc2lnbiA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cbnZhciBfc2ltcGxlQXNzaWduMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NpbXBsZUFzc2lnbik7XG5cbnZhciBfdHJhbnNpdGlvbnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE1KTtcblxudmFyIF90cmFuc2l0aW9uczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90cmFuc2l0aW9ucyk7XG5cbnZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX3Byb3BUeXBlczMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMxKTtcblxudmFyIF9wcm9wVHlwZXM0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzMyk7XG5cbnZhciBfUGFwZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQzKTtcblxudmFyIF9QYXBlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9QYXBlcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGdldFN0eWxlcyhwcm9wcywgY29udGV4dCwgc3RhdGUpIHtcbiAgdmFyIHRhcmdldE9yaWdpbiA9IHByb3BzLnRhcmdldE9yaWdpbjtcbiAgdmFyIG9wZW4gPSBzdGF0ZS5vcGVuO1xuICB2YXIgbXVpVGhlbWUgPSBjb250ZXh0Lm11aVRoZW1lO1xuXG4gIHZhciBob3Jpem9udGFsID0gdGFyZ2V0T3JpZ2luLmhvcml6b250YWwucmVwbGFjZSgnbWlkZGxlJywgJ3ZlcnRpY2FsJyk7XG5cbiAgcmV0dXJuIHtcbiAgICByb290OiB7XG4gICAgICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgICAgIHpJbmRleDogbXVpVGhlbWUuekluZGV4LnBvcG92ZXIsXG4gICAgICBvcGFjaXR5OiBvcGVuID8gMSA6IDAsXG4gICAgICB0cmFuc2Zvcm06IG9wZW4gPyAnc2NhbGUoMSwgMSknIDogJ3NjYWxlKDAsIDApJyxcbiAgICAgIHRyYW5zZm9ybU9yaWdpbjogaG9yaXpvbnRhbCArICcgJyArIHRhcmdldE9yaWdpbi52ZXJ0aWNhbCxcbiAgICAgIHRyYW5zaXRpb246IF90cmFuc2l0aW9uczIuZGVmYXVsdC5lYXNlT3V0KCcyNTBtcycsIFsndHJhbnNmb3JtJywgJ29wYWNpdHknXSksXG4gICAgICBtYXhIZWlnaHQ6ICcxMDAlJ1xuICAgIH0sXG4gICAgaG9yaXpvbnRhbDoge1xuICAgICAgbWF4SGVpZ2h0OiAnMTAwJScsXG4gICAgICBvdmVyZmxvd1k6ICdhdXRvJyxcbiAgICAgIHRyYW5zZm9ybTogb3BlbiA/ICdzY2FsZVgoMSknIDogJ3NjYWxlWCgwKScsXG4gICAgICBvcGFjaXR5OiBvcGVuID8gMSA6IDAsXG4gICAgICB0cmFuc2Zvcm1PcmlnaW46IGhvcml6b250YWwgKyAnICcgKyB0YXJnZXRPcmlnaW4udmVydGljYWwsXG4gICAgICB0cmFuc2l0aW9uOiBfdHJhbnNpdGlvbnMyLmRlZmF1bHQuZWFzZU91dCgnMjUwbXMnLCBbJ3RyYW5zZm9ybScsICdvcGFjaXR5J10pXG4gICAgfSxcbiAgICB2ZXJ0aWNhbDoge1xuICAgICAgb3BhY2l0eTogb3BlbiA/IDEgOiAwLFxuICAgICAgdHJhbnNmb3JtOiBvcGVuID8gJ3NjYWxlWSgxKScgOiAnc2NhbGVZKDApJyxcbiAgICAgIHRyYW5zZm9ybU9yaWdpbjogaG9yaXpvbnRhbCArICcgJyArIHRhcmdldE9yaWdpbi52ZXJ0aWNhbCxcbiAgICAgIHRyYW5zaXRpb246IF90cmFuc2l0aW9uczIuZGVmYXVsdC5lYXNlT3V0KCc1MDBtcycsIFsndHJhbnNmb3JtJywgJ29wYWNpdHknXSlcbiAgICB9XG4gIH07XG59XG5cbnZhciBQb3BvdmVyQW5pbWF0aW9uRGVmYXVsdCA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHMzLmRlZmF1bHQpKFBvcG92ZXJBbmltYXRpb25EZWZhdWx0LCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBQb3BvdmVyQW5pbWF0aW9uRGVmYXVsdCgpIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBQb3BvdmVyQW5pbWF0aW9uRGVmYXVsdCk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9ICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMuZGVmYXVsdCkodGhpcywgKF9yZWYgPSBQb3BvdmVyQW5pbWF0aW9uRGVmYXVsdC5fX3Byb3RvX18gfHwgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoUG9wb3ZlckFuaW1hdGlvbkRlZmF1bHQpKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIG9wZW46IGZhbHNlXG4gICAgfSwgX3RlbXApLCAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zLmRlZmF1bHQpKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKFBvcG92ZXJBbmltYXRpb25EZWZhdWx0LCBbe1xuICAgIGtleTogJ2NvbXBvbmVudERpZE1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgb3BlbjogdHJ1ZSB9KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZWFjdC9uby1kaWQtbW91bnQtc2V0LXN0YXRlXG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgb3BlbjogbmV4dFByb3BzLm9wZW5cbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGNsYXNzTmFtZSA9IF9wcm9wcy5jbGFzc05hbWUsXG4gICAgICAgICAgc3R5bGUgPSBfcHJvcHMuc3R5bGUsXG4gICAgICAgICAgekRlcHRoID0gX3Byb3BzLnpEZXB0aDtcbiAgICAgIHZhciBwcmVwYXJlU3R5bGVzID0gdGhpcy5jb250ZXh0Lm11aVRoZW1lLnByZXBhcmVTdHlsZXM7XG5cbiAgICAgIHZhciBzdHlsZXMgPSBnZXRTdHlsZXModGhpcy5wcm9wcywgdGhpcy5jb250ZXh0LCB0aGlzLnN0YXRlKTtcblxuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBfUGFwZXIyLmRlZmF1bHQsXG4gICAgICAgIHtcbiAgICAgICAgICBzdHlsZTogKDAsIF9zaW1wbGVBc3NpZ24yLmRlZmF1bHQpKHN0eWxlcy5yb290LCBzdHlsZSksXG4gICAgICAgICAgekRlcHRoOiB6RGVwdGgsXG4gICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVcbiAgICAgICAgfSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBzdHlsZTogcHJlcGFyZVN0eWxlcyhzdHlsZXMuaG9yaXpvbnRhbCkgfSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgeyBzdHlsZTogcHJlcGFyZVN0eWxlcyhzdHlsZXMudmVydGljYWwpIH0sXG4gICAgICAgICAgICB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgICApO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gUG9wb3ZlckFuaW1hdGlvbkRlZmF1bHQ7XG59KF9yZWFjdC5Db21wb25lbnQpO1xuXG5Qb3BvdmVyQW5pbWF0aW9uRGVmYXVsdC5kZWZhdWx0UHJvcHMgPSB7XG4gIHN0eWxlOiB7fSxcbiAgekRlcHRoOiAxXG59O1xuUG9wb3ZlckFuaW1hdGlvbkRlZmF1bHQuY29udGV4dFR5cGVzID0ge1xuICBtdWlUaGVtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZFxufTtcblBvcG92ZXJBbmltYXRpb25EZWZhdWx0LnByb3BUeXBlcyA9ICBmYWxzZSA/IHtcbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMyLmRlZmF1bHQubm9kZSxcbiAgLyoqXG4gICAqIFRoZSBjc3MgY2xhc3MgbmFtZSBvZiB0aGUgcm9vdCBlbGVtZW50LlxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgb3BlbjogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLmlzUmVxdWlyZWQsXG4gIC8qKlxuICAgKiBPdmVycmlkZSB0aGUgaW5saW5lLXN0eWxlcyBvZiB0aGUgcm9vdCBlbGVtZW50LlxuICAgKi9cbiAgc3R5bGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LFxuICB0YXJnZXRPcmlnaW46IF9wcm9wVHlwZXM0LmRlZmF1bHQub3JpZ2luLmlzUmVxdWlyZWQsXG4gIHpEZXB0aDogX3Byb3BUeXBlczQuZGVmYXVsdC56RGVwdGhcbn0gOiB7fTtcbmV4cG9ydHMuZGVmYXVsdCA9IFBvcG92ZXJBbmltYXRpb25EZWZhdWx0O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMzE5OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2V4dGVuZHMyID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMik7XG5cbnZhciBfZXh0ZW5kczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leHRlbmRzMik7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5KTtcblxudmFyIF9vYmplY3RXaXRob3V0UHJvcGVydGllczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9vYmplY3RXaXRob3V0UHJvcGVydGllczIpO1xuXG52YXIgX3NpbXBsZUFzc2lnbiA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cbnZhciBfc2ltcGxlQXNzaWduMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NpbXBsZUFzc2lnbik7XG5cbnZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgU3ViaGVhZGVyID0gZnVuY3Rpb24gU3ViaGVhZGVyKHByb3BzLCBjb250ZXh0KSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgaW5zZXQgPSBwcm9wcy5pbnNldCxcbiAgICAgIHN0eWxlID0gcHJvcHMuc3R5bGUsXG4gICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMzLmRlZmF1bHQpKHByb3BzLCBbJ2NoaWxkcmVuJywgJ2luc2V0JywgJ3N0eWxlJ10pO1xuICB2YXIgX2NvbnRleHQkbXVpVGhlbWUgPSBjb250ZXh0Lm11aVRoZW1lLFxuICAgICAgcHJlcGFyZVN0eWxlcyA9IF9jb250ZXh0JG11aVRoZW1lLnByZXBhcmVTdHlsZXMsXG4gICAgICBzdWJoZWFkZXIgPSBfY29udGV4dCRtdWlUaGVtZS5zdWJoZWFkZXI7XG5cblxuICB2YXIgc3R5bGVzID0ge1xuICAgIHJvb3Q6IHtcbiAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgY29sb3I6IHN1YmhlYWRlci5jb2xvcixcbiAgICAgIGZvbnRTaXplOiAxNCxcbiAgICAgIGZvbnRXZWlnaHQ6IHN1YmhlYWRlci5mb250V2VpZ2h0LFxuICAgICAgbGluZUhlaWdodDogJzQ4cHgnLFxuICAgICAgcGFkZGluZ0xlZnQ6IGluc2V0ID8gNzIgOiAxNixcbiAgICAgIHdpZHRoOiAnMTAwJSdcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICdkaXYnLFxuICAgICgwLCBfZXh0ZW5kczMuZGVmYXVsdCkoe30sIG90aGVyLCB7IHN0eWxlOiBwcmVwYXJlU3R5bGVzKCgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KShzdHlsZXMucm9vdCwgc3R5bGUpKSB9KSxcbiAgICBjaGlsZHJlblxuICApO1xufTtcblxuU3ViaGVhZGVyLm11aU5hbWUgPSAnU3ViaGVhZGVyJztcblxuU3ViaGVhZGVyLnByb3BUeXBlcyA9ICBmYWxzZSA/IHtcbiAgLyoqXG4gICAqIE5vZGUgdGhhdCB3aWxsIGJlIHBsYWNlZCBpbnNpZGUgdGhlIGBTdWJoZWFkZXJgLlxuICAgKi9cbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMyLmRlZmF1bHQubm9kZSxcbiAgLyoqXG4gICAqIElmIHRydWUsIHRoZSBgU3ViaGVhZGVyYCB3aWxsIGJlIGluZGVudGVkLlxuICAgKi9cbiAgaW5zZXQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRoZSBpbmxpbmUtc3R5bGVzIG9mIHRoZSByb290IGVsZW1lbnQuXG4gICAqL1xuICBzdHlsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3Rcbn0gOiB7fTtcblxuU3ViaGVhZGVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgaW5zZXQ6IGZhbHNlXG59O1xuXG5TdWJoZWFkZXIuY29udGV4dFR5cGVzID0ge1xuICBtdWlUaGVtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZFxufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gU3ViaGVhZGVyO1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMzIwOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdW5kZWZpbmVkO1xuXG52YXIgX1N1YmhlYWRlciA9IF9fd2VicGFja19yZXF1aXJlX18oMzE5KTtcblxudmFyIF9TdWJoZWFkZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU3ViaGVhZGVyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gX1N1YmhlYWRlcjIuZGVmYXVsdDtcblxuLyoqKi8gfSksXG5cbi8qKiovIDMyNzpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9nZXRQcm90b3R5cGVPZiA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0UHJvdG90eXBlT2YpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIpO1xuXG52YXIgX2luaGVyaXRzMiA9IF9fd2VicGFja19yZXF1aXJlX18oNik7XG5cbnZhciBfaW5oZXJpdHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5oZXJpdHMyKTtcblxudmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfcHJvcFR5cGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIG9yaWdpbmFsQm9keU92ZXJmbG93ID0gbnVsbDtcbnZhciBsb2NraW5nQ291bnRlciA9IDA7XG5cbnZhciBBdXRvTG9ja1Njcm9sbGluZyA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHMzLmRlZmF1bHQpKEF1dG9Mb2NrU2Nyb2xsaW5nLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBBdXRvTG9ja1Njcm9sbGluZygpIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBBdXRvTG9ja1Njcm9sbGluZyk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9ICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMuZGVmYXVsdCkodGhpcywgKF9yZWYgPSBBdXRvTG9ja1Njcm9sbGluZy5fX3Byb3RvX18gfHwgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoQXV0b0xvY2tTY3JvbGxpbmcpKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5sb2NrZWQgPSBmYWxzZSwgX3RlbXApLCAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zLmRlZmF1bHQpKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKEF1dG9Mb2NrU2Nyb2xsaW5nLCBbe1xuICAgIGtleTogJ2NvbXBvbmVudERpZE1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy5sb2NrID09PSB0cnVlKSB7XG4gICAgICAgIHRoaXMucHJldmVudFNjcm9sbGluZygpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgaWYgKHRoaXMucHJvcHMubG9jayAhPT0gbmV4dFByb3BzLmxvY2spIHtcbiAgICAgICAgaWYgKG5leHRQcm9wcy5sb2NrKSB7XG4gICAgICAgICAgdGhpcy5wcmV2ZW50U2Nyb2xsaW5nKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5hbGxvd1Njcm9sbGluZygpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50V2lsbFVubW91bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIHRoaXMuYWxsb3dTY3JvbGxpbmcoKTtcbiAgICB9XG5cbiAgICAvLyBmb3JjZSB0byBvbmx5IGxvY2svdW5sb2NrIG9uY2VcblxuICB9LCB7XG4gICAga2V5OiAncHJldmVudFNjcm9sbGluZycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHByZXZlbnRTY3JvbGxpbmcoKSB7XG4gICAgICBpZiAodGhpcy5sb2NrZWQgPT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBsb2NraW5nQ291bnRlciA9IGxvY2tpbmdDb3VudGVyICsgMTtcbiAgICAgIHRoaXMubG9ja2VkID0gdHJ1ZTtcblxuICAgICAgLy8gb25seSBsb2NrIHRoZSBmaXJzdCB0aW1lIHRoZSBjb21wb25lbnQgaXMgbW91bnRlZC5cbiAgICAgIGlmIChsb2NraW5nQ291bnRlciA9PT0gMSkge1xuICAgICAgICB2YXIgYm9keSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdib2R5JylbMF07XG4gICAgICAgIG9yaWdpbmFsQm9keU92ZXJmbG93ID0gYm9keS5zdHlsZS5vdmVyZmxvdztcbiAgICAgICAgYm9keS5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2FsbG93U2Nyb2xsaW5nJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWxsb3dTY3JvbGxpbmcoKSB7XG4gICAgICBpZiAodGhpcy5sb2NrZWQgPT09IHRydWUpIHtcbiAgICAgICAgbG9ja2luZ0NvdW50ZXIgPSBsb2NraW5nQ291bnRlciAtIDE7XG4gICAgICAgIHRoaXMubG9ja2VkID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmIChsb2NraW5nQ291bnRlciA9PT0gMCAmJiBvcmlnaW5hbEJvZHlPdmVyZmxvdyAhPT0gbnVsbCkge1xuICAgICAgICB2YXIgYm9keSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdib2R5JylbMF07XG4gICAgICAgIGJvZHkuc3R5bGUub3ZlcmZsb3cgPSBvcmlnaW5hbEJvZHlPdmVyZmxvdyB8fCAnJztcbiAgICAgICAgb3JpZ2luYWxCb2R5T3ZlcmZsb3cgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gQXV0b0xvY2tTY3JvbGxpbmc7XG59KF9yZWFjdC5Db21wb25lbnQpO1xuXG5BdXRvTG9ja1Njcm9sbGluZy5wcm9wVHlwZXMgPSAgZmFsc2UgPyB7XG4gIGxvY2s6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbC5pc1JlcXVpcmVkXG59IDoge307XG5leHBvcnRzLmRlZmF1bHQgPSBBdXRvTG9ja1Njcm9sbGluZztcblxuLyoqKi8gfSksXG5cbi8qKiovIDMyOTpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9nZXRQcm90b3R5cGVPZiA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0UHJvdG90eXBlT2YpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIpO1xuXG52YXIgX2luaGVyaXRzMiA9IF9fd2VicGFja19yZXF1aXJlX18oNik7XG5cbnZhciBfaW5oZXJpdHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5oZXJpdHMyKTtcblxudmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfcHJvcFR5cGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9yZWFjdERvbSA9IF9fd2VicGFja19yZXF1aXJlX18oMTYpO1xuXG52YXIgX3JlYWN0RG9tMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0RG9tKTtcblxudmFyIF9ldmVudHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE0OCk7XG5cbnZhciBfZXZlbnRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V2ZW50cyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBpc0Rlc2NlbmRhbnQgPSBmdW5jdGlvbiBpc0Rlc2NlbmRhbnQoZWwsIHRhcmdldCkge1xuICBpZiAodGFyZ2V0ICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIGVsID09PSB0YXJnZXQgfHwgaXNEZXNjZW5kYW50KGVsLCB0YXJnZXQucGFyZW50Tm9kZSk7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxudmFyIGNsaWNrQXdheUV2ZW50cyA9IFsnbW91c2V1cCcsICd0b3VjaGVuZCddO1xudmFyIGJpbmQgPSBmdW5jdGlvbiBiaW5kKGNhbGxiYWNrKSB7XG4gIHJldHVybiBjbGlja0F3YXlFdmVudHMuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICByZXR1cm4gX2V2ZW50czIuZGVmYXVsdC5vbihkb2N1bWVudCwgZXZlbnQsIGNhbGxiYWNrKTtcbiAgfSk7XG59O1xudmFyIHVuYmluZCA9IGZ1bmN0aW9uIHVuYmluZChjYWxsYmFjaykge1xuICByZXR1cm4gY2xpY2tBd2F5RXZlbnRzLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgcmV0dXJuIF9ldmVudHMyLmRlZmF1bHQub2ZmKGRvY3VtZW50LCBldmVudCwgY2FsbGJhY2spO1xuICB9KTtcbn07XG5cbnZhciBDbGlja0F3YXlMaXN0ZW5lciA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHMzLmRlZmF1bHQpKENsaWNrQXdheUxpc3RlbmVyLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBDbGlja0F3YXlMaXN0ZW5lcigpIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBDbGlja0F3YXlMaXN0ZW5lcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9ICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMuZGVmYXVsdCkodGhpcywgKF9yZWYgPSBDbGlja0F3YXlMaXN0ZW5lci5fX3Byb3RvX18gfHwgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoQ2xpY2tBd2F5TGlzdGVuZXIpKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5oYW5kbGVDbGlja0F3YXkgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gSUUxMSBzdXBwb3J0LCB3aGljaCB0cmlnZ2VyIHRoZSBoYW5kbGVDbGlja0F3YXkgZXZlbiBhZnRlciB0aGUgdW5iaW5kXG4gICAgICBpZiAoX3RoaXMuaXNDdXJyZW50bHlNb3VudGVkKSB7XG4gICAgICAgIHZhciBlbCA9IF9yZWFjdERvbTIuZGVmYXVsdC5maW5kRE9NTm9kZShfdGhpcyk7XG5cbiAgICAgICAgaWYgKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jb250YWlucyhldmVudC50YXJnZXQpICYmICFpc0Rlc2NlbmRhbnQoZWwsIGV2ZW50LnRhcmdldCkpIHtcbiAgICAgICAgICBfdGhpcy5wcm9wcy5vbkNsaWNrQXdheShldmVudCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCBfdGVtcCksICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMuZGVmYXVsdCkoX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoQ2xpY2tBd2F5TGlzdGVuZXIsIFt7XG4gICAga2V5OiAnY29tcG9uZW50RGlkTW91bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHRoaXMuaXNDdXJyZW50bHlNb3VudGVkID0gdHJ1ZTtcbiAgICAgIGlmICh0aGlzLnByb3BzLm9uQ2xpY2tBd2F5KSB7XG4gICAgICAgIGJpbmQodGhpcy5oYW5kbGVDbGlja0F3YXkpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudERpZFVwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICAgIGlmIChwcmV2UHJvcHMub25DbGlja0F3YXkgIT09IHRoaXMucHJvcHMub25DbGlja0F3YXkpIHtcbiAgICAgICAgdW5iaW5kKHRoaXMuaGFuZGxlQ2xpY2tBd2F5KTtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMub25DbGlja0F3YXkpIHtcbiAgICAgICAgICBiaW5kKHRoaXMuaGFuZGxlQ2xpY2tBd2F5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxVbm1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICB0aGlzLmlzQ3VycmVudGx5TW91bnRlZCA9IGZhbHNlO1xuICAgICAgdW5iaW5kKHRoaXMuaGFuZGxlQ2xpY2tBd2F5KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIENsaWNrQXdheUxpc3RlbmVyO1xufShfcmVhY3QuQ29tcG9uZW50KTtcblxuQ2xpY2tBd2F5TGlzdGVuZXIucHJvcFR5cGVzID0gIGZhbHNlID8ge1xuICBjaGlsZHJlbjogX3Byb3BUeXBlczIuZGVmYXVsdC5lbGVtZW50LFxuICBvbkNsaWNrQXdheTogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jXG59IDoge307XG5leHBvcnRzLmRlZmF1bHQgPSBDbGlja0F3YXlMaXN0ZW5lcjtcblxuLyoqKi8gfSksXG5cbi8qKiovIDMzMTpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9leHRlbmRzMiA9IF9fd2VicGFja19yZXF1aXJlX18oMTIpO1xuXG52YXIgX2V4dGVuZHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXh0ZW5kczIpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IF9fd2VicGFja19yZXF1aXJlX18oOSk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyKTtcblxudmFyIF9nZXRQcm90b3R5cGVPZiA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0UHJvdG90eXBlT2YpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIpO1xuXG52YXIgX2luaGVyaXRzMiA9IF9fd2VicGFja19yZXF1aXJlX18oNik7XG5cbnZhciBfaW5oZXJpdHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5oZXJpdHMyKTtcblxudmFyIF9zaW1wbGVBc3NpZ24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXG52YXIgX3NpbXBsZUFzc2lnbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zaW1wbGVBc3NpZ24pO1xuXG52YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF90cmFuc2l0aW9ucyA9IF9fd2VicGFja19yZXF1aXJlX18oMTUpO1xuXG52YXIgX3RyYW5zaXRpb25zMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3RyYW5zaXRpb25zKTtcblxudmFyIF9BdXRvTG9ja1Njcm9sbGluZyA9IF9fd2VicGFja19yZXF1aXJlX18oMzI3KTtcblxudmFyIF9BdXRvTG9ja1Njcm9sbGluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9BdXRvTG9ja1Njcm9sbGluZyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGdldFN0eWxlcyhwcm9wcywgY29udGV4dCkge1xuICB2YXIgb3ZlcmxheSA9IGNvbnRleHQubXVpVGhlbWUub3ZlcmxheTtcblxuXG4gIHZhciBzdHlsZSA9IHtcbiAgICByb290OiB7XG4gICAgICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgIHRvcDogMCxcbiAgICAgIGxlZnQ6ICctMTAwJScsXG4gICAgICBvcGFjaXR5OiAwLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiBvdmVybGF5LmJhY2tncm91bmRDb2xvcixcbiAgICAgIFdlYmtpdFRhcEhpZ2hsaWdodENvbG9yOiAncmdiYSgwLCAwLCAwLCAwKScsIC8vIFJlbW92ZSBtb2JpbGUgY29sb3IgZmxhc2hpbmcgKGRlcHJlY2F0ZWQpXG5cbiAgICAgIC8vIFR3byB3YXlzIHRvIHByb21vdGUgb3ZlcmxheSB0byBpdHMgb3duIHJlbmRlciBsYXllclxuICAgICAgd2lsbENoYW5nZTogJ29wYWNpdHknLFxuICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWigwKScsXG5cbiAgICAgIHRyYW5zaXRpb246IHByb3BzLnRyYW5zaXRpb25FbmFibGVkICYmIF90cmFuc2l0aW9uczIuZGVmYXVsdC5lYXNlT3V0KCcwbXMnLCAnbGVmdCcsICc0MDBtcycpICsgJywgJyArIF90cmFuc2l0aW9uczIuZGVmYXVsdC5lYXNlT3V0KCc0MDBtcycsICdvcGFjaXR5JylcbiAgICB9XG4gIH07XG5cbiAgaWYgKHByb3BzLnNob3cpIHtcbiAgICAoMCwgX3NpbXBsZUFzc2lnbjIuZGVmYXVsdCkoc3R5bGUucm9vdCwge1xuICAgICAgbGVmdDogMCxcbiAgICAgIG9wYWNpdHk6IDEsXG4gICAgICB0cmFuc2l0aW9uOiBfdHJhbnNpdGlvbnMyLmRlZmF1bHQuZWFzZU91dCgnMG1zJywgJ2xlZnQnKSArICcsICcgKyBfdHJhbnNpdGlvbnMyLmRlZmF1bHQuZWFzZU91dCgnNDAwbXMnLCAnb3BhY2l0eScpXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gc3R5bGU7XG59XG5cbnZhciBPdmVybGF5ID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0czMuZGVmYXVsdCkoT3ZlcmxheSwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gT3ZlcmxheSgpIHtcbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBPdmVybGF5KTtcbiAgICByZXR1cm4gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMy5kZWZhdWx0KSh0aGlzLCAoT3ZlcmxheS5fX3Byb3RvX18gfHwgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoT3ZlcmxheSkpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoT3ZlcmxheSwgW3tcbiAgICBrZXk6ICdzZXRPcGFjaXR5JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0T3BhY2l0eShvcGFjaXR5KSB7XG4gICAgICB0aGlzLnJlZnMub3ZlcmxheS5zdHlsZS5vcGFjaXR5ID0gb3BhY2l0eTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBhdXRvTG9ja1Njcm9sbGluZyA9IF9wcm9wcy5hdXRvTG9ja1Njcm9sbGluZyxcbiAgICAgICAgICBzaG93ID0gX3Byb3BzLnNob3csXG4gICAgICAgICAgc3R5bGUgPSBfcHJvcHMuc3R5bGUsXG4gICAgICAgICAgdHJhbnNpdGlvbkVuYWJsZWQgPSBfcHJvcHMudHJhbnNpdGlvbkVuYWJsZWQsXG4gICAgICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMy5kZWZhdWx0KShfcHJvcHMsIFsnYXV0b0xvY2tTY3JvbGxpbmcnLCAnc2hvdycsICdzdHlsZScsICd0cmFuc2l0aW9uRW5hYmxlZCddKTtcbiAgICAgIHZhciBwcmVwYXJlU3R5bGVzID0gdGhpcy5jb250ZXh0Lm11aVRoZW1lLnByZXBhcmVTdHlsZXM7XG5cbiAgICAgIHZhciBzdHlsZXMgPSBnZXRTdHlsZXModGhpcy5wcm9wcywgdGhpcy5jb250ZXh0KTtcblxuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7fSwgb3RoZXIsIHsgcmVmOiAnb3ZlcmxheScsIHN0eWxlOiBwcmVwYXJlU3R5bGVzKCgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KShzdHlsZXMucm9vdCwgc3R5bGUpKSB9KSxcbiAgICAgICAgYXV0b0xvY2tTY3JvbGxpbmcgJiYgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0F1dG9Mb2NrU2Nyb2xsaW5nMi5kZWZhdWx0LCB7IGxvY2s6IHNob3cgfSlcbiAgICAgICk7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBPdmVybGF5O1xufShfcmVhY3QuQ29tcG9uZW50KTtcblxuT3ZlcmxheS5kZWZhdWx0UHJvcHMgPSB7XG4gIGF1dG9Mb2NrU2Nyb2xsaW5nOiB0cnVlLFxuICBzdHlsZToge30sXG4gIHRyYW5zaXRpb25FbmFibGVkOiB0cnVlXG59O1xuT3ZlcmxheS5jb250ZXh0VHlwZXMgPSB7XG4gIG11aVRoZW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkXG59O1xuT3ZlcmxheS5wcm9wVHlwZXMgPSAgZmFsc2UgPyB7XG4gIGF1dG9Mb2NrU2Nyb2xsaW5nOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIHNob3c6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbC5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogT3ZlcnJpZGUgdGhlIGlubGluZS1zdHlsZXMgb2YgdGhlIHJvb3QgZWxlbWVudC5cbiAgICovXG4gIHN0eWxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCxcbiAgdHJhbnNpdGlvbkVuYWJsZWQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbFxufSA6IHt9O1xuZXhwb3J0cy5kZWZhdWx0ID0gT3ZlcmxheTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDMzMjpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9nZXRQcm90b3R5cGVPZiA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0UHJvdG90eXBlT2YpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIpO1xuXG52YXIgX2luaGVyaXRzMiA9IF9fd2VicGFja19yZXF1aXJlX18oNik7XG5cbnZhciBfaW5oZXJpdHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5oZXJpdHMyKTtcblxudmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfcHJvcFR5cGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9yZWFjdERvbSA9IF9fd2VicGFja19yZXF1aXJlX18oMTYpO1xuXG52YXIgX2RvbSA9IF9fd2VicGFja19yZXF1aXJlX18oMTQ3KTtcblxudmFyIF9kb20yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZG9tKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLy8gaGVhdmlseSBpbnNwaXJlZCBieSBodHRwczovL2dpdGh1Yi5jb20vS2hhbi9yZWFjdC1jb21wb25lbnRzL2Jsb2IvbWFzdGVyL2pzL2xheWVyZWQtY29tcG9uZW50LW1peGluLmpzeFxudmFyIFJlbmRlclRvTGF5ZXIgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzMy5kZWZhdWx0KShSZW5kZXJUb0xheWVyLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBSZW5kZXJUb0xheWVyKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIFJlbmRlclRvTGF5ZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zLmRlZmF1bHQpKHRoaXMsIChfcmVmID0gUmVuZGVyVG9MYXllci5fX3Byb3RvX18gfHwgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoUmVuZGVyVG9MYXllcikpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLm9uQ2xpY2tBd2F5ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICghX3RoaXMucHJvcHMuY29tcG9uZW50Q2xpY2tBd2F5KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKCFfdGhpcy5wcm9wcy5vcGVuKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGVsID0gX3RoaXMubGF5ZXI7XG4gICAgICBpZiAoZXZlbnQudGFyZ2V0ICE9PSBlbCAmJiBldmVudC50YXJnZXQgPT09IHdpbmRvdyB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY29udGFpbnMoZXZlbnQudGFyZ2V0KSAmJiAhX2RvbTIuZGVmYXVsdC5pc0Rlc2NlbmRhbnQoZWwsIGV2ZW50LnRhcmdldCkpIHtcbiAgICAgICAgX3RoaXMucHJvcHMuY29tcG9uZW50Q2xpY2tBd2F5KGV2ZW50KTtcbiAgICAgIH1cbiAgICB9LCBfdGVtcCksICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMuZGVmYXVsdCkoX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoUmVuZGVyVG9MYXllciwgW3tcbiAgICBrZXk6ICdjb21wb25lbnREaWRNb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdGhpcy5yZW5kZXJMYXllcigpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudERpZFVwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICAgIHRoaXMucmVuZGVyTGF5ZXIoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsVW5tb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgdGhpcy51bnJlbmRlckxheWVyKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0TGF5ZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRMYXllcigpIHtcbiAgICAgIHJldHVybiB0aGlzLmxheWVyO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3VucmVuZGVyTGF5ZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1bnJlbmRlckxheWVyKCkge1xuICAgICAgaWYgKCF0aGlzLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMucHJvcHMudXNlTGF5ZXJGb3JDbGlja0F3YXkpIHtcbiAgICAgICAgdGhpcy5sYXllci5zdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZSc7XG4gICAgICAgIHRoaXMubGF5ZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHRoaXMub25DbGlja0F3YXkpO1xuICAgICAgICB0aGlzLmxheWVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5vbkNsaWNrQXdheSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHRoaXMub25DbGlja0F3YXkpO1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm9uQ2xpY2tBd2F5KTtcbiAgICAgIH1cblxuICAgICAgKDAsIF9yZWFjdERvbS51bm1vdW50Q29tcG9uZW50QXROb2RlKSh0aGlzLmxheWVyKTtcbiAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQodGhpcy5sYXllcik7XG4gICAgICB0aGlzLmxheWVyID0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBCeSBjYWxsaW5nIHRoaXMgbWV0aG9kIGluIGNvbXBvbmVudERpZE1vdW50KCkgYW5kXG4gICAgICogY29tcG9uZW50RGlkVXBkYXRlKCksIHlvdSdyZSBlZmZlY3RpdmVseSBjcmVhdGluZyBhIFwid29ybWhvbGVcIiB0aGF0XG4gICAgICogZnVubmVscyBSZWFjdCdzIGhpZXJhcmNoaWNhbCB1cGRhdGVzIHRocm91Z2ggdG8gYSBET00gbm9kZSBvbiBhblxuICAgICAqIGVudGlyZWx5IGRpZmZlcmVudCBwYXJ0IG9mIHRoZSBwYWdlLlxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXJMYXllcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlckxheWVyKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIG9wZW4gPSBfcHJvcHMub3BlbixcbiAgICAgICAgICByZW5kZXIgPSBfcHJvcHMucmVuZGVyO1xuXG5cbiAgICAgIGlmIChvcGVuKSB7XG4gICAgICAgIGlmICghdGhpcy5sYXllcikge1xuICAgICAgICAgIHRoaXMubGF5ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMubGF5ZXIpO1xuXG4gICAgICAgICAgaWYgKHRoaXMucHJvcHMudXNlTGF5ZXJGb3JDbGlja0F3YXkpIHtcbiAgICAgICAgICAgIHRoaXMubGF5ZXIuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHRoaXMub25DbGlja0F3YXkpO1xuICAgICAgICAgICAgdGhpcy5sYXllci5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMub25DbGlja0F3YXkpO1xuICAgICAgICAgICAgdGhpcy5sYXllci5zdHlsZS5wb3NpdGlvbiA9ICdmaXhlZCc7XG4gICAgICAgICAgICB0aGlzLmxheWVyLnN0eWxlLnRvcCA9IDA7XG4gICAgICAgICAgICB0aGlzLmxheWVyLnN0eWxlLmJvdHRvbSA9IDA7XG4gICAgICAgICAgICB0aGlzLmxheWVyLnN0eWxlLmxlZnQgPSAwO1xuICAgICAgICAgICAgdGhpcy5sYXllci5zdHlsZS5yaWdodCA9IDA7XG4gICAgICAgICAgICB0aGlzLmxheWVyLnN0eWxlLnpJbmRleCA9IHRoaXMuY29udGV4dC5tdWlUaGVtZS56SW5kZXgubGF5ZXI7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIF90aGlzMi5vbkNsaWNrQXdheSk7XG4gICAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIF90aGlzMi5vbkNsaWNrQXdheSk7XG4gICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbGF5ZXJFbGVtZW50ID0gcmVuZGVyKCk7XG4gICAgICAgIHRoaXMubGF5ZXJFbGVtZW50ID0gKDAsIF9yZWFjdERvbS51bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcikodGhpcywgbGF5ZXJFbGVtZW50LCB0aGlzLmxheWVyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudW5yZW5kZXJMYXllcigpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gUmVuZGVyVG9MYXllcjtcbn0oX3JlYWN0LkNvbXBvbmVudCk7XG5cblJlbmRlclRvTGF5ZXIuZGVmYXVsdFByb3BzID0ge1xuICB1c2VMYXllckZvckNsaWNrQXdheTogdHJ1ZVxufTtcblJlbmRlclRvTGF5ZXIuY29udGV4dFR5cGVzID0ge1xuICBtdWlUaGVtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZFxufTtcblJlbmRlclRvTGF5ZXIucHJvcFR5cGVzID0gIGZhbHNlID8ge1xuICBjb21wb25lbnRDbGlja0F3YXk6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgb3BlbjogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLmlzUmVxdWlyZWQsXG4gIHJlbmRlcjogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLmlzUmVxdWlyZWQsXG4gIHVzZUxheWVyRm9yQ2xpY2tBd2F5OiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2xcbn0gOiB7fTtcbmV4cG9ydHMuZGVmYXVsdCA9IFJlbmRlclRvTGF5ZXI7XG5cbi8qKiovIH0pLFxuXG4vKioqLyAzNDI6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wdXJlID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNyk7XG5cbnZhciBfcHVyZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wdXJlKTtcblxudmFyIF9TdmdJY29uID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNCk7XG5cbnZhciBfU3ZnSWNvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TdmdJY29uKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIEF2QWxidW0gPSBmdW5jdGlvbiBBdkFsYnVtKHByb3BzKSB7XG4gIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICBfU3ZnSWNvbjIuZGVmYXVsdCxcbiAgICBwcm9wcyxcbiAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgncGF0aCcsIHsgZDogJ00xMiAyQzYuNDggMiAyIDYuNDggMiAxMnM0LjQ4IDEwIDEwIDEwIDEwLTQuNDggMTAtMTBTMTcuNTIgMiAxMiAyem0wIDE0LjVjLTIuNDkgMC00LjUtMi4wMS00LjUtNC41UzkuNTEgNy41IDEyIDcuNXM0LjUgMi4wMSA0LjUgNC41LTIuMDEgNC41LTQuNSA0LjV6bTAtNS41Yy0uNTUgMC0xIC40NS0xIDFzLjQ1IDEgMSAxIDEtLjQ1IDEtMS0uNDUtMS0xLTF6JyB9KVxuICApO1xufTtcbkF2QWxidW0gPSAoMCwgX3B1cmUyLmRlZmF1bHQpKEF2QWxidW0pO1xuQXZBbGJ1bS5kaXNwbGF5TmFtZSA9ICdBdkFsYnVtJztcbkF2QWxidW0ubXVpTmFtZSA9ICdTdmdJY29uJztcblxuZXhwb3J0cy5kZWZhdWx0ID0gQXZBbGJ1bTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDM0Mzpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3B1cmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI3KTtcblxudmFyIF9wdXJlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3B1cmUpO1xuXG52YXIgX1N2Z0ljb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI0KTtcblxudmFyIF9TdmdJY29uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1N2Z0ljb24pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgQXZTa2lwTmV4dCA9IGZ1bmN0aW9uIEF2U2tpcE5leHQocHJvcHMpIHtcbiAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgIF9TdmdJY29uMi5kZWZhdWx0LFxuICAgIHByb3BzLFxuICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdwYXRoJywgeyBkOiAnTTYgMThsOC41LTZMNiA2djEyek0xNiA2djEyaDJWNmgtMnonIH0pXG4gICk7XG59O1xuQXZTa2lwTmV4dCA9ICgwLCBfcHVyZTIuZGVmYXVsdCkoQXZTa2lwTmV4dCk7XG5BdlNraXBOZXh0LmRpc3BsYXlOYW1lID0gJ0F2U2tpcE5leHQnO1xuQXZTa2lwTmV4dC5tdWlOYW1lID0gJ1N2Z0ljb24nO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBBdlNraXBOZXh0O1xuXG4vKioqLyB9KSxcblxuLyoqKi8gMzQ0OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3JlYWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHVyZSA9IF9fd2VicGFja19yZXF1aXJlX18oMjcpO1xuXG52YXIgX3B1cmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHVyZSk7XG5cbnZhciBfU3ZnSWNvbiA9IF9fd2VicGFja19yZXF1aXJlX18oMjQpO1xuXG52YXIgX1N2Z0ljb24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU3ZnSWNvbik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBBdlNraXBQcmV2aW91cyA9IGZ1bmN0aW9uIEF2U2tpcFByZXZpb3VzKHByb3BzKSB7XG4gIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICBfU3ZnSWNvbjIuZGVmYXVsdCxcbiAgICBwcm9wcyxcbiAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgncGF0aCcsIHsgZDogJ002IDZoMnYxMkg2em0zLjUgNmw4LjUgNlY2eicgfSlcbiAgKTtcbn07XG5BdlNraXBQcmV2aW91cyA9ICgwLCBfcHVyZTIuZGVmYXVsdCkoQXZTa2lwUHJldmlvdXMpO1xuQXZTa2lwUHJldmlvdXMuZGlzcGxheU5hbWUgPSAnQXZTa2lwUHJldmlvdXMnO1xuQXZTa2lwUHJldmlvdXMubXVpTmFtZSA9ICdTdmdJY29uJztcblxuZXhwb3J0cy5kZWZhdWx0ID0gQXZTa2lwUHJldmlvdXM7XG5cbi8qKiovIH0pLFxuXG4vKioqLyAzNDc6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wdXJlID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNyk7XG5cbnZhciBfcHVyZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wdXJlKTtcblxudmFyIF9TdmdJY29uID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNCk7XG5cbnZhciBfU3ZnSWNvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TdmdJY29uKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIE5hdmlnYXRpb25DaGVjayA9IGZ1bmN0aW9uIE5hdmlnYXRpb25DaGVjayhwcm9wcykge1xuICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgX1N2Z0ljb24yLmRlZmF1bHQsXG4gICAgcHJvcHMsXG4gICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ3BhdGgnLCB7IGQ6ICdNOSAxNi4xN0w0LjgzIDEybC0xLjQyIDEuNDFMOSAxOSAyMSA3bC0xLjQxLTEuNDF6JyB9KVxuICApO1xufTtcbk5hdmlnYXRpb25DaGVjayA9ICgwLCBfcHVyZTIuZGVmYXVsdCkoTmF2aWdhdGlvbkNoZWNrKTtcbk5hdmlnYXRpb25DaGVjay5kaXNwbGF5TmFtZSA9ICdOYXZpZ2F0aW9uQ2hlY2snO1xuTmF2aWdhdGlvbkNoZWNrLm11aU5hbWUgPSAnU3ZnSWNvbic7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IE5hdmlnYXRpb25DaGVjaztcblxuLyoqKi8gfSksXG5cbi8qKiovIDM0ODpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3B1cmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI3KTtcblxudmFyIF9wdXJlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3B1cmUpO1xuXG52YXIgX1N2Z0ljb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI0KTtcblxudmFyIF9TdmdJY29uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1N2Z0ljb24pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgTmF2aWdhdGlvbkV4cGFuZExlc3MgPSBmdW5jdGlvbiBOYXZpZ2F0aW9uRXhwYW5kTGVzcyhwcm9wcykge1xuICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgX1N2Z0ljb24yLmRlZmF1bHQsXG4gICAgcHJvcHMsXG4gICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ3BhdGgnLCB7IGQ6ICdNMTIgOGwtNiA2IDEuNDEgMS40MUwxMiAxMC44M2w0LjU5IDQuNThMMTggMTR6JyB9KVxuICApO1xufTtcbk5hdmlnYXRpb25FeHBhbmRMZXNzID0gKDAsIF9wdXJlMi5kZWZhdWx0KShOYXZpZ2F0aW9uRXhwYW5kTGVzcyk7XG5OYXZpZ2F0aW9uRXhwYW5kTGVzcy5kaXNwbGF5TmFtZSA9ICdOYXZpZ2F0aW9uRXhwYW5kTGVzcyc7XG5OYXZpZ2F0aW9uRXhwYW5kTGVzcy5tdWlOYW1lID0gJ1N2Z0ljb24nO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBOYXZpZ2F0aW9uRXhwYW5kTGVzcztcblxuLyoqKi8gfSksXG5cbi8qKiovIDM0OTpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3B1cmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI3KTtcblxudmFyIF9wdXJlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3B1cmUpO1xuXG52YXIgX1N2Z0ljb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI0KTtcblxudmFyIF9TdmdJY29uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1N2Z0ljb24pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgTmF2aWdhdGlvbkV4cGFuZE1vcmUgPSBmdW5jdGlvbiBOYXZpZ2F0aW9uRXhwYW5kTW9yZShwcm9wcykge1xuICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgX1N2Z0ljb24yLmRlZmF1bHQsXG4gICAgcHJvcHMsXG4gICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ3BhdGgnLCB7IGQ6ICdNMTYuNTkgOC41OUwxMiAxMy4xNyA3LjQxIDguNTkgNiAxMGw2IDYgNi02eicgfSlcbiAgKTtcbn07XG5OYXZpZ2F0aW9uRXhwYW5kTW9yZSA9ICgwLCBfcHVyZTIuZGVmYXVsdCkoTmF2aWdhdGlvbkV4cGFuZE1vcmUpO1xuTmF2aWdhdGlvbkV4cGFuZE1vcmUuZGlzcGxheU5hbWUgPSAnTmF2aWdhdGlvbkV4cGFuZE1vcmUnO1xuTmF2aWdhdGlvbkV4cGFuZE1vcmUubXVpTmFtZSA9ICdTdmdJY29uJztcblxuZXhwb3J0cy5kZWZhdWx0ID0gTmF2aWdhdGlvbkV4cGFuZE1vcmU7XG5cbi8qKiovIH0pLFxuXG4vKioqLyAzNTA6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfcmVhY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wdXJlID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNyk7XG5cbnZhciBfcHVyZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wdXJlKTtcblxudmFyIF9TdmdJY29uID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNCk7XG5cbnZhciBfU3ZnSWNvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TdmdJY29uKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIE5hdmlnYXRpb25NZW51ID0gZnVuY3Rpb24gTmF2aWdhdGlvbk1lbnUocHJvcHMpIHtcbiAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgIF9TdmdJY29uMi5kZWZhdWx0LFxuICAgIHByb3BzLFxuICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdwYXRoJywgeyBkOiAnTTMgMThoMTh2LTJIM3Yyem0wLTVoMTh2LTJIM3Yyem0wLTd2MmgxOFY2SDN6JyB9KVxuICApO1xufTtcbk5hdmlnYXRpb25NZW51ID0gKDAsIF9wdXJlMi5kZWZhdWx0KShOYXZpZ2F0aW9uTWVudSk7XG5OYXZpZ2F0aW9uTWVudS5kaXNwbGF5TmFtZSA9ICdOYXZpZ2F0aW9uTWVudSc7XG5OYXZpZ2F0aW9uTWVudS5tdWlOYW1lID0gJ1N2Z0ljb24nO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBOYXZpZ2F0aW9uTWVudTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDc0OlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihwcm9jZXNzKSB7XG5cbnZhciB1dGlscyA9IF9fd2VicGFja19yZXF1aXJlX18oMTgpO1xudmFyIG5vcm1hbGl6ZUhlYWRlck5hbWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIwMyk7XG5cbnZhciBERUZBVUxUX0NPTlRFTlRfVFlQRSA9IHtcbiAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnXG59O1xuXG5mdW5jdGlvbiBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgdmFsdWUpIHtcbiAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzKSAmJiB1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzWydDb250ZW50LVR5cGUnXSkpIHtcbiAgICBoZWFkZXJzWydDb250ZW50LVR5cGUnXSA9IHZhbHVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldERlZmF1bHRBZGFwdGVyKCkge1xuICB2YXIgYWRhcHRlcjtcbiAgaWYgKHR5cGVvZiBYTUxIdHRwUmVxdWVzdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBGb3IgYnJvd3NlcnMgdXNlIFhIUiBhZGFwdGVyXG4gICAgYWRhcHRlciA9IF9fd2VicGFja19yZXF1aXJlX18oMTE2KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBGb3Igbm9kZSB1c2UgSFRUUCBhZGFwdGVyXG4gICAgYWRhcHRlciA9IF9fd2VicGFja19yZXF1aXJlX18oMTE2KTtcbiAgfVxuICByZXR1cm4gYWRhcHRlcjtcbn1cblxudmFyIGRlZmF1bHRzID0ge1xuICBhZGFwdGVyOiBnZXREZWZhdWx0QWRhcHRlcigpLFxuXG4gIHRyYW5zZm9ybVJlcXVlc3Q6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXF1ZXN0KGRhdGEsIGhlYWRlcnMpIHtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdDb250ZW50LVR5cGUnKTtcbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNBcnJheUJ1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzU3RyZWFtKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0ZpbGUoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQmxvYihkYXRhKVxuICAgICkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyVmlldyhkYXRhKSkge1xuICAgICAgcmV0dXJuIGRhdGEuYnVmZmVyO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMoZGF0YSkpIHtcbiAgICAgIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9dXRmLTgnKTtcbiAgICAgIHJldHVybiBkYXRhLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc09iamVjdChkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTgnKTtcbiAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShkYXRhKTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIHRyYW5zZm9ybVJlc3BvbnNlOiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVzcG9uc2UoZGF0YSkge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgfSBjYXRjaCAoZSkgeyAvKiBJZ25vcmUgKi8gfVxuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgdGltZW91dDogMCxcblxuICB4c3JmQ29va2llTmFtZTogJ1hTUkYtVE9LRU4nLFxuICB4c3JmSGVhZGVyTmFtZTogJ1gtWFNSRi1UT0tFTicsXG5cbiAgbWF4Q29udGVudExlbmd0aDogLTEsXG5cbiAgdmFsaWRhdGVTdGF0dXM6IGZ1bmN0aW9uIHZhbGlkYXRlU3RhdHVzKHN0YXR1cykge1xuICAgIHJldHVybiBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMDtcbiAgfVxufTtcblxuZGVmYXVsdHMuaGVhZGVycyA9IHtcbiAgY29tbW9uOiB7XG4gICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyonXG4gIH1cbn07XG5cbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0ge307XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0gdXRpbHMubWVyZ2UoREVGQVVMVF9DT05URU5UX1RZUEUpO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmYXVsdHM7XG5cbi8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKDk2KSkpXG5cbi8qKiovIH0pXG5cbn0sWzIwN10pO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBtYWluYXBwLmJ1bmRsZS5qcyIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvYXhpb3MnKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYXhpb3MvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDExNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBzZXR0bGUgPSByZXF1aXJlKCcuLy4uL2NvcmUvc2V0dGxlJyk7XG52YXIgYnVpbGRVUkwgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvYnVpbGRVUkwnKTtcbnZhciBwYXJzZUhlYWRlcnMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvcGFyc2VIZWFkZXJzJyk7XG52YXIgaXNVUkxTYW1lT3JpZ2luID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbicpO1xudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi4vY29yZS9jcmVhdGVFcnJvcicpO1xudmFyIGJ0b2EgPSAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmJ0b2EgJiYgd2luZG93LmJ0b2EuYmluZCh3aW5kb3cpKSB8fCByZXF1aXJlKCcuLy4uL2hlbHBlcnMvYnRvYScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHhockFkYXB0ZXIoY29uZmlnKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiBkaXNwYXRjaFhoclJlcXVlc3QocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIHJlcXVlc3REYXRhID0gY29uZmlnLmRhdGE7XG4gICAgdmFyIHJlcXVlc3RIZWFkZXJzID0gY29uZmlnLmhlYWRlcnM7XG5cbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShyZXF1ZXN0RGF0YSkpIHtcbiAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1snQ29udGVudC1UeXBlJ107IC8vIExldCB0aGUgYnJvd3NlciBzZXQgaXRcbiAgICB9XG5cbiAgICB2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgIHZhciBsb2FkRXZlbnQgPSAnb25yZWFkeXN0YXRlY2hhbmdlJztcbiAgICB2YXIgeERvbWFpbiA9IGZhbHNlO1xuXG4gICAgLy8gRm9yIElFIDgvOSBDT1JTIHN1cHBvcnRcbiAgICAvLyBPbmx5IHN1cHBvcnRzIFBPU1QgYW5kIEdFVCBjYWxscyBhbmQgZG9lc24ndCByZXR1cm5zIHRoZSByZXNwb25zZSBoZWFkZXJzLlxuICAgIC8vIERPTidUIGRvIHRoaXMgZm9yIHRlc3RpbmcgYi9jIFhNTEh0dHBSZXF1ZXN0IGlzIG1vY2tlZCwgbm90IFhEb21haW5SZXF1ZXN0LlxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Rlc3QnICYmXG4gICAgICAgIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgIHdpbmRvdy5YRG9tYWluUmVxdWVzdCAmJiAhKCd3aXRoQ3JlZGVudGlhbHMnIGluIHJlcXVlc3QpICYmXG4gICAgICAgICFpc1VSTFNhbWVPcmlnaW4oY29uZmlnLnVybCkpIHtcbiAgICAgIHJlcXVlc3QgPSBuZXcgd2luZG93LlhEb21haW5SZXF1ZXN0KCk7XG4gICAgICBsb2FkRXZlbnQgPSAnb25sb2FkJztcbiAgICAgIHhEb21haW4gPSB0cnVlO1xuICAgICAgcmVxdWVzdC5vbnByb2dyZXNzID0gZnVuY3Rpb24gaGFuZGxlUHJvZ3Jlc3MoKSB7fTtcbiAgICAgIHJlcXVlc3Qub250aW1lb3V0ID0gZnVuY3Rpb24gaGFuZGxlVGltZW91dCgpIHt9O1xuICAgIH1cblxuICAgIC8vIEhUVFAgYmFzaWMgYXV0aGVudGljYXRpb25cbiAgICBpZiAoY29uZmlnLmF1dGgpIHtcbiAgICAgIHZhciB1c2VybmFtZSA9IGNvbmZpZy5hdXRoLnVzZXJuYW1lIHx8ICcnO1xuICAgICAgdmFyIHBhc3N3b3JkID0gY29uZmlnLmF1dGgucGFzc3dvcmQgfHwgJyc7XG4gICAgICByZXF1ZXN0SGVhZGVycy5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyBidG9hKHVzZXJuYW1lICsgJzonICsgcGFzc3dvcmQpO1xuICAgIH1cblxuICAgIHJlcXVlc3Qub3Blbihjb25maWcubWV0aG9kLnRvVXBwZXJDYXNlKCksIGJ1aWxkVVJMKGNvbmZpZy51cmwsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKSwgdHJ1ZSk7XG5cbiAgICAvLyBTZXQgdGhlIHJlcXVlc3QgdGltZW91dCBpbiBNU1xuICAgIHJlcXVlc3QudGltZW91dCA9IGNvbmZpZy50aW1lb3V0O1xuXG4gICAgLy8gTGlzdGVuIGZvciByZWFkeSBzdGF0ZVxuICAgIHJlcXVlc3RbbG9hZEV2ZW50XSA9IGZ1bmN0aW9uIGhhbmRsZUxvYWQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QgfHwgKHJlcXVlc3QucmVhZHlTdGF0ZSAhPT0gNCAmJiAheERvbWFpbikpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBUaGUgcmVxdWVzdCBlcnJvcmVkIG91dCBhbmQgd2UgZGlkbid0IGdldCBhIHJlc3BvbnNlLCB0aGlzIHdpbGwgYmVcbiAgICAgIC8vIGhhbmRsZWQgYnkgb25lcnJvciBpbnN0ZWFkXG4gICAgICAvLyBXaXRoIG9uZSBleGNlcHRpb246IHJlcXVlc3QgdGhhdCB1c2luZyBmaWxlOiBwcm90b2NvbCwgbW9zdCBicm93c2Vyc1xuICAgICAgLy8gd2lsbCByZXR1cm4gc3RhdHVzIGFzIDAgZXZlbiB0aG91Z2ggaXQncyBhIHN1Y2Nlc3NmdWwgcmVxdWVzdFxuICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzID09PSAwICYmICEocmVxdWVzdC5yZXNwb25zZVVSTCAmJiByZXF1ZXN0LnJlc3BvbnNlVVJMLmluZGV4T2YoJ2ZpbGU6JykgPT09IDApKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gUHJlcGFyZSB0aGUgcmVzcG9uc2VcbiAgICAgIHZhciByZXNwb25zZUhlYWRlcnMgPSAnZ2V0QWxsUmVzcG9uc2VIZWFkZXJzJyBpbiByZXF1ZXN0ID8gcGFyc2VIZWFkZXJzKHJlcXVlc3QuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkpIDogbnVsbDtcbiAgICAgIHZhciByZXNwb25zZURhdGEgPSAhY29uZmlnLnJlc3BvbnNlVHlwZSB8fCBjb25maWcucmVzcG9uc2VUeXBlID09PSAndGV4dCcgPyByZXF1ZXN0LnJlc3BvbnNlVGV4dCA6IHJlcXVlc3QucmVzcG9uc2U7XG4gICAgICB2YXIgcmVzcG9uc2UgPSB7XG4gICAgICAgIGRhdGE6IHJlc3BvbnNlRGF0YSxcbiAgICAgICAgLy8gSUUgc2VuZHMgMTIyMyBpbnN0ZWFkIG9mIDIwNCAoaHR0cHM6Ly9naXRodWIuY29tL216YWJyaXNraWUvYXhpb3MvaXNzdWVzLzIwMSlcbiAgICAgICAgc3RhdHVzOiByZXF1ZXN0LnN0YXR1cyA9PT0gMTIyMyA/IDIwNCA6IHJlcXVlc3Quc3RhdHVzLFxuICAgICAgICBzdGF0dXNUZXh0OiByZXF1ZXN0LnN0YXR1cyA9PT0gMTIyMyA/ICdObyBDb250ZW50JyA6IHJlcXVlc3Quc3RhdHVzVGV4dCxcbiAgICAgICAgaGVhZGVyczogcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgICBjb25maWc6IGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdDogcmVxdWVzdFxuICAgICAgfTtcblxuICAgICAgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIGxvdyBsZXZlbCBuZXR3b3JrIGVycm9yc1xuICAgIHJlcXVlc3Qub25lcnJvciA9IGZ1bmN0aW9uIGhhbmRsZUVycm9yKCkge1xuICAgICAgLy8gUmVhbCBlcnJvcnMgYXJlIGhpZGRlbiBmcm9tIHVzIGJ5IHRoZSBicm93c2VyXG4gICAgICAvLyBvbmVycm9yIHNob3VsZCBvbmx5IGZpcmUgaWYgaXQncyBhIG5ldHdvcmsgZXJyb3JcbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcignTmV0d29yayBFcnJvcicsIGNvbmZpZywgbnVsbCwgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIHRpbWVvdXRcbiAgICByZXF1ZXN0Lm9udGltZW91dCA9IGZ1bmN0aW9uIGhhbmRsZVRpbWVvdXQoKSB7XG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IoJ3RpbWVvdXQgb2YgJyArIGNvbmZpZy50aW1lb3V0ICsgJ21zIGV4Y2VlZGVkJywgY29uZmlnLCAnRUNPTk5BQk9SVEVEJyxcbiAgICAgICAgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgLy8gVGhpcyBpcyBvbmx5IGRvbmUgaWYgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnQuXG4gICAgLy8gU3BlY2lmaWNhbGx5IG5vdCBpZiB3ZSdyZSBpbiBhIHdlYiB3b3JrZXIsIG9yIHJlYWN0LW5hdGl2ZS5cbiAgICBpZiAodXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSkge1xuICAgICAgdmFyIGNvb2tpZXMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvY29va2llcycpO1xuXG4gICAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAgIHZhciB4c3JmVmFsdWUgPSAoY29uZmlnLndpdGhDcmVkZW50aWFscyB8fCBpc1VSTFNhbWVPcmlnaW4oY29uZmlnLnVybCkpICYmIGNvbmZpZy54c3JmQ29va2llTmFtZSA/XG4gICAgICAgICAgY29va2llcy5yZWFkKGNvbmZpZy54c3JmQ29va2llTmFtZSkgOlxuICAgICAgICAgIHVuZGVmaW5lZDtcblxuICAgICAgaWYgKHhzcmZWYWx1ZSkge1xuICAgICAgICByZXF1ZXN0SGVhZGVyc1tjb25maWcueHNyZkhlYWRlck5hbWVdID0geHNyZlZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEFkZCBoZWFkZXJzIHRvIHRoZSByZXF1ZXN0XG4gICAgaWYgKCdzZXRSZXF1ZXN0SGVhZGVyJyBpbiByZXF1ZXN0KSB7XG4gICAgICB1dGlscy5mb3JFYWNoKHJlcXVlc3RIZWFkZXJzLCBmdW5jdGlvbiBzZXRSZXF1ZXN0SGVhZGVyKHZhbCwga2V5KSB7XG4gICAgICAgIGlmICh0eXBlb2YgcmVxdWVzdERhdGEgPT09ICd1bmRlZmluZWQnICYmIGtleS50b0xvd2VyQ2FzZSgpID09PSAnY29udGVudC10eXBlJykge1xuICAgICAgICAgIC8vIFJlbW92ZSBDb250ZW50LVR5cGUgaWYgZGF0YSBpcyB1bmRlZmluZWRcbiAgICAgICAgICBkZWxldGUgcmVxdWVzdEhlYWRlcnNba2V5XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBPdGhlcndpc2UgYWRkIGhlYWRlciB0byB0aGUgcmVxdWVzdFxuICAgICAgICAgIHJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcihrZXksIHZhbCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIEFkZCB3aXRoQ3JlZGVudGlhbHMgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAoY29uZmlnLndpdGhDcmVkZW50aWFscykge1xuICAgICAgcmVxdWVzdC53aXRoQ3JlZGVudGlhbHMgPSB0cnVlO1xuICAgIH1cblxuICAgIC8vIEFkZCByZXNwb25zZVR5cGUgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAoY29uZmlnLnJlc3BvbnNlVHlwZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmVxdWVzdC5yZXNwb25zZVR5cGUgPSBjb25maWcucmVzcG9uc2VUeXBlO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBFeHBlY3RlZCBET01FeGNlcHRpb24gdGhyb3duIGJ5IGJyb3dzZXJzIG5vdCBjb21wYXRpYmxlIFhNTEh0dHBSZXF1ZXN0IExldmVsIDIuXG4gICAgICAgIC8vIEJ1dCwgdGhpcyBjYW4gYmUgc3VwcHJlc3NlZCBmb3IgJ2pzb24nIHR5cGUgYXMgaXQgY2FuIGJlIHBhcnNlZCBieSBkZWZhdWx0ICd0cmFuc2Zvcm1SZXNwb25zZScgZnVuY3Rpb24uXG4gICAgICAgIGlmIChjb25maWcucmVzcG9uc2VUeXBlICE9PSAnanNvbicpIHtcbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHByb2dyZXNzIGlmIG5lZWRlZFxuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIC8vIE5vdCBhbGwgYnJvd3NlcnMgc3VwcG9ydCB1cGxvYWQgZXZlbnRzXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25VcGxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJyAmJiByZXF1ZXN0LnVwbG9hZCkge1xuICAgICAgcmVxdWVzdC51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25VcGxvYWRQcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgICAgLy8gSGFuZGxlIGNhbmNlbGxhdGlvblxuICAgICAgY29uZmlnLmNhbmNlbFRva2VuLnByb21pc2UudGhlbihmdW5jdGlvbiBvbkNhbmNlbGVkKGNhbmNlbCkge1xuICAgICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICByZXF1ZXN0LmFib3J0KCk7XG4gICAgICAgIHJlamVjdChjYW5jZWwpO1xuICAgICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHJlcXVlc3REYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJlcXVlc3REYXRhID0gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBTZW5kIHRoZSByZXF1ZXN0XG4gICAgcmVxdWVzdC5zZW5kKHJlcXVlc3REYXRhKTtcbiAgfSk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2F4aW9zL2xpYi9hZGFwdGVycy94aHIuanNcbi8vIG1vZHVsZSBpZCA9IDExNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQSBgQ2FuY2VsYCBpcyBhbiBvYmplY3QgdGhhdCBpcyB0aHJvd24gd2hlbiBhbiBvcGVyYXRpb24gaXMgY2FuY2VsZWQuXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge3N0cmluZz19IG1lc3NhZ2UgVGhlIG1lc3NhZ2UuXG4gKi9cbmZ1bmN0aW9uIENhbmNlbChtZXNzYWdlKSB7XG4gIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG59XG5cbkNhbmNlbC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuICdDYW5jZWwnICsgKHRoaXMubWVzc2FnZSA/ICc6ICcgKyB0aGlzLm1lc3NhZ2UgOiAnJyk7XG59O1xuXG5DYW5jZWwucHJvdG90eXBlLl9fQ0FOQ0VMX18gPSB0cnVlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbDtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9heGlvcy9saWIvY2FuY2VsL0NhbmNlbC5qc1xuLy8gbW9kdWxlIGlkID0gMTE3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0NhbmNlbCh2YWx1ZSkge1xuICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWUuX19DQU5DRUxfXyk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2F4aW9zL2xpYi9jYW5jZWwvaXNDYW5jZWwuanNcbi8vIG1vZHVsZSBpZCA9IDExOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbnZhciBlbmhhbmNlRXJyb3IgPSByZXF1aXJlKCcuL2VuaGFuY2VFcnJvcicpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSwgY29uZmlnLCBlcnJvciBjb2RlLCByZXF1ZXN0IGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGVFcnJvcihtZXNzYWdlLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIHZhciBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgcmV0dXJuIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2F4aW9zL2xpYi9jb3JlL2NyZWF0ZUVycm9yLmpzXG4vLyBtb2R1bGUgaWQgPSAxMTlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJpbmQoZm4sIHRoaXNBcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpc0FyZywgYXJncyk7XG4gIH07XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2F4aW9zL2xpYi9oZWxwZXJzL2JpbmQuanNcbi8vIG1vZHVsZSBpZCA9IDEyMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcycpO1xuXG52YXIgX2V4dGVuZHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXh0ZW5kczIpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllcycpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMik7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2YnKTtcblxudmFyIF9nZXRQcm90b3R5cGVPZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRQcm90b3R5cGVPZik7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKTtcblxudmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yKTtcblxudmFyIF9pbmhlcml0czIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnKTtcblxudmFyIF9pbmhlcml0czMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbmhlcml0czIpO1xuXG52YXIgX3NpbXBsZUFzc2lnbiA9IHJlcXVpcmUoJ3NpbXBsZS1hc3NpZ24nKTtcblxudmFyIF9zaW1wbGVBc3NpZ24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2ltcGxlQXNzaWduKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9TdWJoZWFkZXIgPSByZXF1aXJlKCcuLi9TdWJoZWFkZXInKTtcblxudmFyIF9TdWJoZWFkZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU3ViaGVhZGVyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIExpc3QgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzMy5kZWZhdWx0KShMaXN0LCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBMaXN0KCkge1xuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIExpc3QpO1xuICAgIHJldHVybiAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zLmRlZmF1bHQpKHRoaXMsIChMaXN0Ll9fcHJvdG9fXyB8fCAoMCwgX2dldFByb3RvdHlwZU9mMi5kZWZhdWx0KShMaXN0KSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShMaXN0LCBbe1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3Byb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIHN0eWxlID0gX3Byb3BzLnN0eWxlLFxuICAgICAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczMuZGVmYXVsdCkoX3Byb3BzLCBbJ2NoaWxkcmVuJywgJ3N0eWxlJ10pO1xuICAgICAgdmFyIHByZXBhcmVTdHlsZXMgPSB0aGlzLmNvbnRleHQubXVpVGhlbWUucHJlcGFyZVN0eWxlcztcblxuXG4gICAgICB2YXIgaGFzU3ViaGVhZGVyID0gZmFsc2U7XG5cbiAgICAgIHZhciBmaXJzdENoaWxkID0gX3JlYWN0LkNoaWxkcmVuLnRvQXJyYXkoY2hpbGRyZW4pWzBdO1xuICAgICAgaWYgKCgwLCBfcmVhY3QuaXNWYWxpZEVsZW1lbnQpKGZpcnN0Q2hpbGQpICYmIGZpcnN0Q2hpbGQudHlwZSA9PT0gX1N1YmhlYWRlcjIuZGVmYXVsdCkge1xuICAgICAgICBoYXNTdWJoZWFkZXIgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgc3R5bGVzID0ge1xuICAgICAgICByb290OiB7XG4gICAgICAgICAgcGFkZGluZzogKGhhc1N1YmhlYWRlciA/IDAgOiA4KSArICdweCAwcHggOHB4IDBweCdcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7fSwgb3RoZXIsIHsgc3R5bGU6IHByZXBhcmVTdHlsZXMoKDAsIF9zaW1wbGVBc3NpZ24yLmRlZmF1bHQpKHN0eWxlcy5yb290LCBzdHlsZSkpIH0pLFxuICAgICAgICBjaGlsZHJlblxuICAgICAgKTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIExpc3Q7XG59KF9yZWFjdC5Db21wb25lbnQpO1xuXG5MaXN0LmNvbnRleHRUeXBlcyA9IHtcbiAgbXVpVGhlbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWRcbn07XG5MaXN0LnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIFRoZXNlIGFyZSB1c3VhbGx5IGBMaXN0SXRlbWBzIHRoYXQgYXJlIHBhc3NlZCB0b1xuICAgKiBiZSBwYXJ0IG9mIHRoZSBsaXN0LlxuICAgKi9cbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMyLmRlZmF1bHQubm9kZSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRoZSBpbmxpbmUtc3R5bGVzIG9mIHRoZSByb290IGVsZW1lbnQuXG4gICAqL1xuICBzdHlsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3Rcbn0gOiB7fTtcbmV4cG9ydHMuZGVmYXVsdCA9IExpc3Q7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L21hdGVyaWFsLXVpL0xpc3QvTGlzdC5qc1xuLy8gbW9kdWxlIGlkID0gMTQ2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIGlzQnVmZmVyID0gcmVxdWlyZSgnaXMtYnVmZmVyJyk7XG5cbi8qZ2xvYmFsIHRvU3RyaW5nOnRydWUqL1xuXG4vLyB1dGlscyBpcyBhIGxpYnJhcnkgb2YgZ2VuZXJpYyBoZWxwZXIgZnVuY3Rpb25zIG5vbi1zcGVjaWZpYyB0byBheGlvc1xuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXksIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5KHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRm9ybURhdGFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBGb3JtRGF0YSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRm9ybURhdGEodmFsKSB7XG4gIHJldHVybiAodHlwZW9mIEZvcm1EYXRhICE9PSAndW5kZWZpbmVkJykgJiYgKHZhbCBpbnN0YW5jZW9mIEZvcm1EYXRhKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyVmlldyh2YWwpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnKSAmJiAoQXJyYXlCdWZmZXIuaXNWaWV3KSkge1xuICAgIHJlc3VsdCA9IEFycmF5QnVmZmVyLmlzVmlldyh2YWwpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9ICh2YWwpICYmICh2YWwuYnVmZmVyKSAmJiAodmFsLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyaW5nXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJpbmcsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmluZyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgTnVtYmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBOdW1iZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc051bWJlcih2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdudW1iZXInO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIHVuZGVmaW5lZFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSB2YWx1ZSBpcyB1bmRlZmluZWQsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRGF0ZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRGF0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRGF0ZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRmlsZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRmlsZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQmxvYlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQmxvYiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQmxvYih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQmxvYl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZ1bmN0aW9uLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmVhbVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyZWFtLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJlYW0odmFsKSB7XG4gIHJldHVybiBpc09iamVjdCh2YWwpICYmIGlzRnVuY3Rpb24odmFsLnBpcGUpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVVJMU2VhcmNoUGFyYW1zKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIFVSTFNlYXJjaFBhcmFtcyAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsIGluc3RhbmNlb2YgVVJMU2VhcmNoUGFyYW1zO1xufVxuXG4vKipcbiAqIFRyaW0gZXhjZXNzIHdoaXRlc3BhY2Ugb2ZmIHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIFN0cmluZyB0byB0cmltXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgU3RyaW5nIGZyZWVkIG9mIGV4Y2VzcyB3aGl0ZXNwYWNlXG4gKi9cbmZ1bmN0aW9uIHRyaW0oc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyovLCAnJykucmVwbGFjZSgvXFxzKiQvLCAnJyk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50XG4gKlxuICogVGhpcyBhbGxvd3MgYXhpb3MgdG8gcnVuIGluIGEgd2ViIHdvcmtlciwgYW5kIHJlYWN0LW5hdGl2ZS5cbiAqIEJvdGggZW52aXJvbm1lbnRzIHN1cHBvcnQgWE1MSHR0cFJlcXVlc3QsIGJ1dCBub3QgZnVsbHkgc3RhbmRhcmQgZ2xvYmFscy5cbiAqXG4gKiB3ZWIgd29ya2VyczpcbiAqICB0eXBlb2Ygd2luZG93IC0+IHVuZGVmaW5lZFxuICogIHR5cGVvZiBkb2N1bWVudCAtPiB1bmRlZmluZWRcbiAqXG4gKiByZWFjdC1uYXRpdmU6XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ1JlYWN0TmF0aXZlJ1xuICovXG5mdW5jdGlvbiBpc1N0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnUmVhY3ROYXRpdmUnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnXG4gICk7XG59XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFuIEFycmF5IG9yIGFuIE9iamVjdCBpbnZva2luZyBhIGZ1bmN0aW9uIGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgYG9iamAgaXMgYW4gQXJyYXkgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBpbmRleCwgYW5kIGNvbXBsZXRlIGFycmF5IGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgJ29iaicgaXMgYW4gT2JqZWN0IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwga2V5LCBhbmQgY29tcGxldGUgb2JqZWN0IGZvciBlYWNoIHByb3BlcnR5LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBvYmogVGhlIG9iamVjdCB0byBpdGVyYXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgY2FsbGJhY2sgdG8gaW52b2tlIGZvciBlYWNoIGl0ZW1cbiAqL1xuZnVuY3Rpb24gZm9yRWFjaChvYmosIGZuKSB7XG4gIC8vIERvbid0IGJvdGhlciBpZiBubyB2YWx1ZSBwcm92aWRlZFxuICBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRm9yY2UgYW4gYXJyYXkgaWYgbm90IGFscmVhZHkgc29tZXRoaW5nIGl0ZXJhYmxlXG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyAmJiAhaXNBcnJheShvYmopKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgb2JqID0gW29ial07XG4gIH1cblxuICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIGFycmF5IHZhbHVlc1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgZm4uY2FsbChudWxsLCBvYmpbaV0sIGksIG9iaik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBvYmplY3Qga2V5c1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XG4gICAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBBY2NlcHRzIHZhcmFyZ3MgZXhwZWN0aW5nIGVhY2ggYXJndW1lbnQgdG8gYmUgYW4gb2JqZWN0LCB0aGVuXG4gKiBpbW11dGFibHkgbWVyZ2VzIHRoZSBwcm9wZXJ0aWVzIG9mIGVhY2ggb2JqZWN0IGFuZCByZXR1cm5zIHJlc3VsdC5cbiAqXG4gKiBXaGVuIG11bHRpcGxlIG9iamVjdHMgY29udGFpbiB0aGUgc2FtZSBrZXkgdGhlIGxhdGVyIG9iamVjdCBpblxuICogdGhlIGFyZ3VtZW50cyBsaXN0IHdpbGwgdGFrZSBwcmVjZWRlbmNlLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqIHZhciByZXN1bHQgPSBtZXJnZSh7Zm9vOiAxMjN9LCB7Zm9vOiA0NTZ9KTtcbiAqIGNvbnNvbGUubG9nKHJlc3VsdC5mb28pOyAvLyBvdXRwdXRzIDQ1NlxuICogYGBgXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9iajEgT2JqZWN0IHRvIG1lcmdlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXN1bHQgb2YgYWxsIG1lcmdlIHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gbWVyZ2UoLyogb2JqMSwgb2JqMiwgb2JqMywgLi4uICovKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodHlwZW9mIHJlc3VsdFtrZXldID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0Jykge1xuICAgICAgcmVzdWx0W2tleV0gPSBtZXJnZShyZXN1bHRba2V5XSwgdmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZm9yRWFjaChhcmd1bWVudHNbaV0sIGFzc2lnblZhbHVlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEV4dGVuZHMgb2JqZWN0IGEgYnkgbXV0YWJseSBhZGRpbmcgdG8gaXQgdGhlIHByb3BlcnRpZXMgb2Ygb2JqZWN0IGIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGEgVGhlIG9iamVjdCB0byBiZSBleHRlbmRlZFxuICogQHBhcmFtIHtPYmplY3R9IGIgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbVxuICogQHBhcmFtIHtPYmplY3R9IHRoaXNBcmcgVGhlIG9iamVjdCB0byBiaW5kIGZ1bmN0aW9uIHRvXG4gKiBAcmV0dXJuIHtPYmplY3R9IFRoZSByZXN1bHRpbmcgdmFsdWUgb2Ygb2JqZWN0IGFcbiAqL1xuZnVuY3Rpb24gZXh0ZW5kKGEsIGIsIHRoaXNBcmcpIHtcbiAgZm9yRWFjaChiLCBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0aGlzQXJnICYmIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGFba2V5XSA9IGJpbmQodmFsLCB0aGlzQXJnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYVtrZXldID0gdmFsO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBhO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNBcnJheTogaXNBcnJheSxcbiAgaXNBcnJheUJ1ZmZlcjogaXNBcnJheUJ1ZmZlcixcbiAgaXNCdWZmZXI6IGlzQnVmZmVyLFxuICBpc0Zvcm1EYXRhOiBpc0Zvcm1EYXRhLFxuICBpc0FycmF5QnVmZmVyVmlldzogaXNBcnJheUJ1ZmZlclZpZXcsXG4gIGlzU3RyaW5nOiBpc1N0cmluZyxcbiAgaXNOdW1iZXI6IGlzTnVtYmVyLFxuICBpc09iamVjdDogaXNPYmplY3QsXG4gIGlzVW5kZWZpbmVkOiBpc1VuZGVmaW5lZCxcbiAgaXNEYXRlOiBpc0RhdGUsXG4gIGlzRmlsZTogaXNGaWxlLFxuICBpc0Jsb2I6IGlzQmxvYixcbiAgaXNGdW5jdGlvbjogaXNGdW5jdGlvbixcbiAgaXNTdHJlYW06IGlzU3RyZWFtLFxuICBpc1VSTFNlYXJjaFBhcmFtczogaXNVUkxTZWFyY2hQYXJhbXMsXG4gIGlzU3RhbmRhcmRCcm93c2VyRW52OiBpc1N0YW5kYXJkQnJvd3NlckVudixcbiAgZm9yRWFjaDogZm9yRWFjaCxcbiAgbWVyZ2U6IG1lcmdlLFxuICBleHRlbmQ6IGV4dGVuZCxcbiAgdHJpbTogdHJpbVxufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9heGlvcy9saWIvdXRpbHMuanNcbi8vIG1vZHVsZSBpZCA9IDE4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcblxyXG52YXIgSW5kZXggPSBSZWFjdC5jcmVhdGVDbGFzcyh7XHJcbiAgICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgPGgxPkJpZW52ZW5pZG8gYSBCaW5kaWUhPC9oMT5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKTtcclxuICAgIH1cclxufSk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBJbmRleDtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9jb21wb25lbnRzL0luZGV4LmpzIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IFJlYWN0RG9tIGZyb20gJ3JlYWN0LWRvbSc7XHJcblxyXG5pbXBvcnQgRmxhdEJ1dHRvbiBmcm9tICdtYXRlcmlhbC11aS9GbGF0QnV0dG9uJztcclxuaW1wb3J0IFBsYXlOZXh0SWNvbiBmcm9tICdtYXRlcmlhbC11aS9zdmctaWNvbnMvYXYvc2tpcC1uZXh0JztcclxuaW1wb3J0IFBsYXlQcmV2aW91c0ljb24gZnJvbSAnbWF0ZXJpYWwtdWkvc3ZnLWljb25zL2F2L3NraXAtcHJldmlvdXMnO1xyXG5cclxuY29uc3QgU29uZ1BsYXllciA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcclxuICAgIC8qKlxyXG4gICAgICogSW5kaWNhIHNpIGFjYXNvIHNlIGVzdGEgY2FyZ2FuZG8gbGEgc2lndWllbnRlL2FudGVyaW9yIGNhbmNpb24uXHJcbiAgICAgKi9cclxuICAgIGxvYWRpbmdTb25nOiBmYWxzZSxcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRpZW1wbyBkZSBlc3BlcmEgcGFyYSBjYXJnYXIgbGEgc2lndWllbnRlIC8gYW50ZXJpb3IgY2FuY2lvbi5cclxuICAgICAqL1xyXG4gICAgc29uZ0xvYWRXYWl0OiAxMDAwLFxyXG5cclxuICAgIC8qKiBcclxuICAgICAqIHNvbmc6IGNhbmNpb24gYSByZXByb2R1Y2lyLlxyXG4gICAgICogbmV4dFNvbmc6IGNhbGxiYWNrIGRlIHNpZ3VpZW50ZSBjYW5jaW9uXHJcbiAgICAgKiBwcmV2U29uZzogY2FsbGJhY2sgZGUgYW50ZXJpb3IgY2FuY2lvblxyXG4gICAgICovXHJcbiAgICBnZXREZWZhdWx0UHJvcHM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBzb25nOiBudWxsLFxyXG4gICAgICAgICAgICBuZXh0U29uZzogKCkgPT4geyB9LFxyXG4gICAgICAgICAgICBwcmV2U29uZzogKCkgPT4geyB9XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBvblNvbmdFbmQ6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJTT05HIEVOREVEIVwiKTtcclxuICAgICAgICB0aGlzLnByb3BzLm5leHRTb25nKCk7XHJcbiAgICB9LFxyXG5cclxuICAgIGdldFNvbmdTcmM6IGZ1bmN0aW9uIChzb25nKSB7XHJcbiAgICAgICAgcmV0dXJuIGAvYXBpL3NvbmcvJHtzb25nfWA7XHJcbiAgICB9LFxyXG5cclxuICAgIGNvbXBvbmVudERpZFVwZGF0ZTogZnVuY3Rpb24gKHByZXZQcm9wcywgcHJldlN0YXRlKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJTb25nUGxheWVyIERJRCBVUERBVEUhXCIpO1xyXG4gICAgICAgIGxldCBwcmV2U29uZyA9IHByZXZQcm9wcy5zb25nIHx8IFwiXCI7XHJcbiAgICAgICAgbGV0IGN1cnJTb25nID0gdGhpcy5wcm9wcy5zb25nIHx8IFwiXCI7XHJcbiAgICAgICAgaWYgKHByZXZTb25nLnZhbHVlT2YoKSAhPSBjdXJyU29uZy52YWx1ZU9mKCkpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYHByZXZTb25nOiAke3ByZXZTb25nfSB8IGN1cnJTb25nOiAke2N1cnJTb25nfWApO1xyXG4gICAgICAgICAgICB0aGlzLmF1ZGlvLnNyYyA9IHRoaXMuZ2V0U29uZ1NyYyhjdXJyU29uZyk7XHJcbiAgICAgICAgICAgIHRoaXMuYXVkaW8ubG9hZCgpO1xyXG4gICAgICAgICAgICB0aGlzLmF1ZGlvLnBsYXkoKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIG5leHRTb25nOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMubG9hZGluZ1NvbmcpIHJldHVybjtcclxuXHJcbiAgICAgICAgdGhpcy5sb2FkaW5nU29uZyA9IHRydWU7XHJcbiAgICAgICAgc2V0VGltZW91dChlID0+IHtcclxuICAgICAgICAgICAgdGhpcy5sb2FkaW5nU29uZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLnByb3BzLm5leHRTb25nKCk7XHJcbiAgICAgICAgfSwgdGhpcy5zb25nTG9hZFdhaXQpO1xyXG4gICAgfSxcclxuXHJcbiAgICBwcmV2U29uZzogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGB0aGlzLmF1ZGlvLmN1cnJlbnRUaW1lOiAke3RoaXMuYXVkaW8uY3VycmVudFRpbWV9YCk7XHJcbiAgICAgICAgaWYgKHRoaXMuYXVkaW8uY3VycmVudFRpbWUgPCAzKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmxvYWRpbmdTb25nKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICB0aGlzLmxvYWRpbmdTb25nID0gdHJ1ZTtcclxuICAgICAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvYWRpbmdTb25nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLnByZXZTb25nKCk7XHJcbiAgICAgICAgICAgIH0sIHRoaXMuc29uZ0xvYWRXYWl0KTtcclxuICAgICAgICB9IGVsc2UgdGhpcy5hdWRpby5jdXJyZW50VGltZSA9IDA7XHJcbiAgICB9LFxyXG5cclxuICAgIGNvbXBvbmVudERpZE1vdW50OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJTb25nUGxheWVyIERJRCBNT1VOVCFcIik7XHJcbiAgICB9LFxyXG5cclxuICAgIHJlbmRlcjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnByb3BzLnNvbmcpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJSRU5ERVJJTkcgU29uZ1BsYXllciFcIik7XHJcbiAgICAgICAgICAgIGxldCBzcmMgPSB0aGlzLmdldFNvbmdTcmModGhpcy5wcm9wcy5zb25nKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGlzRmlyZWZveCA9IHR5cGVvZiBJbnN0YWxsVHJpZ2dlciAhPT0gJ3VuZGVmaW5lZCc7XHJcbiAgICAgICAgICAgIGNvbnN0IGF1ZGlvQ3RybFN0eWxlID0ge1xyXG4gICAgICAgICAgICAgICAgd2lkdGg6IFwiNTAlXCIsXHJcbiAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6IDBcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgaWYgKGlzRmlyZWZveCkge1xyXG4gICAgICAgICAgICAgICAgYXVkaW9DdHJsU3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCIjNDg0ODQ4XCI7XHJcbiAgICAgICAgICAgICAgICBhdWRpb0N0cmxTdHlsZS5jb2xvciA9IFwiI0ZGRkZGRlwiO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYXVkaW9DdHJsU3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCIjZmFmYWZhXCI7XHJcbiAgICAgICAgICAgICAgICBhdWRpb0N0cmxTdHlsZS5jb2xvciA9IFwiIzVhNWE1YVwiO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgPGRpdiBzdHlsZT17eyB3aWR0aDogXCIxMDAlXCIgfX0+XHJcbiAgICAgICAgICAgICAgICAgICAgPGF1ZGlvXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZj17YXVkaW8gPT4gdGhpcy5hdWRpbyA9IGF1ZGlvfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkVuZGVkPXt0aGlzLm9uU29uZ0VuZH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9e3sgd2lkdGg6IFwiMTAwJVwiIH19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xzPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8c291cmNlIHNyYz17c3JjfSB0eXBlPVwiYXVkaW8vbXBlZ1wiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxwPllvdXIgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IHRoZSBhdWRpbyBlbGVtZW50LjwvcD5cclxuICAgICAgICAgICAgICAgICAgICA8L2F1ZGlvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgc3R5bGU9e3sgd2lkdGg6IFwiMTAwJVwiIH19PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8RmxhdEJ1dHRvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbj17PFBsYXlQcmV2aW91c0ljb24gLz59XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17YXVkaW9DdHJsU3R5bGV9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLnByZXZTb25nfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8RmxhdEJ1dHRvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbj17PFBsYXlOZXh0SWNvbiAvPn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXthdWRpb0N0cmxTdHlsZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMubmV4dFNvbmd9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBTb25nUGxheWVyO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvbXBvbmVudHMvc29uZ3MvU29uZ1BsYXllci5qcyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBSZWFjdERvbSBmcm9tICdyZWFjdC1kb20nO1xyXG5cclxuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcclxuXHJcbmltcG9ydCBGbGF0QnV0dG9uIGZyb20gJ21hdGVyaWFsLXVpL0ZsYXRCdXR0b24nO1xyXG5pbXBvcnQgQWxidW1JY29uIGZyb20gJ21hdGVyaWFsLXVpL3N2Zy1pY29ucy9hdi9hbGJ1bSc7XHJcbmltcG9ydCBUZXh0RmllbGQgZnJvbSAnbWF0ZXJpYWwtdWkvVGV4dEZpZWxkJztcclxuXHJcbmNvbnN0IFNvbmdzQXBwID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xyXG4gICAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgYmFuZDogbnVsbCxcclxuICAgICAgICAgICAgdXBsb2FkU3VjY01zZzogbnVsbCxcclxuICAgICAgICAgICAgdXBsb2FkRXJyTXNnOiBudWxsXHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICB1cGxvYWRGaWxlOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIGxldCBmZCA9IG5ldyBGb3JtRGF0YSgpO1xyXG4gICAgICAgIGxldCBmaWxlID0gdGhpcy5maWxlSW5wdXQuZmlsZXNbMF07XHJcblxyXG4gICAgICAgIGlmIChmaWxlKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQVJDSElWTyBBIFNVQklSOlwiKTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coZmlsZSk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBUSVBPIERFTCBBUkNISVZPXCI6ICR7ZmlsZS50eXBlfWApO1xyXG5cclxuICAgICAgICAgICAgLyogU0kgRUwgVElQTyBERSBBUkNISVZPIEVTIE1VU0lDQSBFTlRPTkNFUyBQUk9DRURPIEEgU1VCSVIgRUwgQVJDSElWTyAqL1xyXG4gICAgICAgICAgICBpZiAoZmlsZS50eXBlID09IFwiYXVkaW8vbXBlZ1wiIHx8IGZpbGUudHlwZSA9PSBcImF1ZGlvL21wM1wiKSB7XHJcbiAgICAgICAgICAgICAgICBmZC5hcHBlbmQoJ2ZpbGUnLCBmaWxlKTtcclxuICAgICAgICAgICAgICAgIGZkLmFwcGVuZCgnZm9vJywgJ2JhcicpO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiVVBMT0FESU5HIEZJTEVcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IGJhbmQgPSB0aGlzLnN0YXRlLmJhbmQ7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGNvbmZpZyA9IHtcclxuICAgICAgICAgICAgICAgICAgICBvblVwbG9hZFByb2dyZXNzOiBmdW5jdGlvbiAocHJvZ3Jlc3NFdmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGVyY2VudENvbXBsZXRlZCA9IE1hdGgucm91bmQoKHByb2dyZXNzRXZlbnQubG9hZGVkICogMTAwKSAvIHByb2dyZXNzRXZlbnQudG90YWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgcGVyY2VudGFnZTogJHtwZXJjZW50Q29tcGxldGVkfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgYXhpb3MucG9zdCgnL2FwaS9zb25nL3VwbG9hZC8nICsgYmFuZCwgZmQsIGNvbmZpZylcclxuICAgICAgICAgICAgICAgICAgICAudGhlbihyZXMgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwbG9hZFN1Y2NNc2c6IFwiQ2FuY2lvbiBzdWJpZGEgZXhpdG9zYW1lbnRlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGxvYWRFcnJNc2c6IFwiXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSkuY2F0Y2goZXJyID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwbG9hZFN1Y2NNc2c6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGxvYWRFcnJNc2c6IFwiRXJyb3IgYWwgc3ViaXIgY2FuY2lvblwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLyogU0kgRUwgQVJDSElWTyBOTyBFUyBERSBNVVNJQ0EgSU5ESUNPIFVOIE1FTlNBSkUgREUgRVJST1IgKi9cclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xyXG4gICAgICAgICAgICAgICAgICAgIHVwbG9hZFN1Y2NNc2c6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdXBsb2FkRXJyTXNnOiBcIkVsIHRpcG8gZGUgYXJjaGl2byBubyBlcyBtcDNcIlxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgY29uc29sZS5sb2coXCJOTyBTRSBJTkRJQ08gVU4gQVJDSElWTyBBIFNVQklSXCIpO1xyXG5cclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcclxuICAgIH0sXHJcblxyXG4gICAgb25CYW5kQ2hhbmdlOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIGxldCBiYW5kID0gZS50YXJnZXQudmFsdWU7XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGJhbmQgfSk7XHJcbiAgICB9LFxyXG5cclxuICAgIHJlbmRlcjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGNvbnN0IHN0eWxlcyA9IHtcclxuICAgICAgICAgICAgdXBsb2FkQnV0dG9uOiB7XHJcbiAgICAgICAgICAgICAgICB2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdXBsb2FkSW5wdXQ6IHtcclxuICAgICAgICAgICAgICAgIGN1cnNvcjogJ3BvaW50ZXInLFxyXG4gICAgICAgICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXHJcbiAgICAgICAgICAgICAgICB0b3A6IDAsXHJcbiAgICAgICAgICAgICAgICBib3R0b206IDAsXHJcbiAgICAgICAgICAgICAgICByaWdodDogMCxcclxuICAgICAgICAgICAgICAgIGxlZnQ6IDAsXHJcbiAgICAgICAgICAgICAgICB3aWR0aDogJzEwMCUnLFxyXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMCxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvKiBTSSBOTyBTRSBJTkdSRVNPIFVOQSBCQU5EQSwgU0UgREVTSEFCSUxJVEEgRUwgQk9UT04gREUgU1VCSURBIERFIENBTkNJT05FUyAqL1xyXG4gICAgICAgIGxldCB1cGxvYWRCdXR0b25EaXNhYmxlZCA9IHRoaXMuc3RhdGUuYmFuZCA/IGZhbHNlIDogdHJ1ZTtcclxuXHJcbiAgICAgICAgbGV0IHN1Y2NNc2dFbGVtID0gdGhpcy5zdGF0ZS51cGxvYWRTdWNjTXNnID9cclxuICAgICAgICAgICAgPHAgc3R5bGU9e3sgY29sb3I6IFwiZ3JlZW5cIiB9fT57dGhpcy5zdGF0ZS51cGxvYWRTdWNjTXNnfTwvcD4gOlxyXG4gICAgICAgICAgICA8ZGl2IC8+XHJcblxyXG4gICAgICAgIGxldCBlcnJNc2dFbGVtID0gdGhpcy5zdGF0ZS51cGxvYWRFcnJNc2cgP1xyXG4gICAgICAgICAgICA8cCBzdHlsZT17eyBjb2xvcjogXCJyZWRcIiB9fT57dGhpcy5zdGF0ZS51cGxvYWRFcnJNc2d9PC9wPiA6XHJcbiAgICAgICAgICAgIDxkaXYgLz5cclxuXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgIHtzdWNjTXNnRWxlbX1cclxuICAgICAgICAgICAgICAgIHtlcnJNc2dFbGVtfVxyXG5cclxuICAgICAgICAgICAgICAgIDxUZXh0RmllbGRcclxuICAgICAgICAgICAgICAgICAgICBoaW50VGV4dD1cIkJhbmRhXCJcclxuICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vbkJhbmRDaGFuZ2V9IC8+XHJcblxyXG4gICAgICAgICAgICAgICAgPEZsYXRCdXR0b25cclxuICAgICAgICAgICAgICAgICAgICBsYWJlbD1cIlN1YmlyIHVuYSBjYW5jaW9uXCJcclxuICAgICAgICAgICAgICAgICAgICBsYWJlbFBvc2l0aW9uPVwiYmVmb3JlXCJcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZT17c3R5bGVzLnVwbG9hZEJ1dHRvbn1cclxuICAgICAgICAgICAgICAgICAgICBjb250YWluZXJFbGVtZW50PVwibGFiZWxcIlxyXG4gICAgICAgICAgICAgICAgICAgIGljb249ezxBbGJ1bUljb24gLz59XHJcbiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ9e3VwbG9hZEJ1dHRvbkRpc2FibGVkfSA+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWY9e2ZpID0+IHsgdGhpcy5maWxlSW5wdXQgPSBmaSB9fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwiZmlsZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJzb25nXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwidXBsb2FkLWZpbGVcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17c3R5bGVzLnVwbG9hZElucHV0fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy51cGxvYWRGaWxlfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZD17dXBsb2FkQnV0dG9uRGlzYWJsZWR9IC8+XHJcbiAgICAgICAgICAgICAgICA8L0ZsYXRCdXR0b24+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn0pO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgU29uZ3NBcHA7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vY29tcG9uZW50cy9zb25ncy9Tb25nc0FwcC5qcyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHVuZGVmaW5lZDtcblxudmFyIF9BcHBCYXIgPSByZXF1aXJlKCcuL0FwcEJhcicpO1xuXG52YXIgX0FwcEJhcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9BcHBCYXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5leHBvcnRzLmRlZmF1bHQgPSBfQXBwQmFyMi5kZWZhdWx0O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9tYXRlcmlhbC11aS9BcHBCYXIvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDE4NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB1bmRlZmluZWQ7XG5cbnZhciBfRHJhd2VyID0gcmVxdWlyZSgnLi9EcmF3ZXInKTtcblxudmFyIF9EcmF3ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfRHJhd2VyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gX0RyYXdlcjIuZGVmYXVsdDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vbWF0ZXJpYWwtdWkvRHJhd2VyL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAxODZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdW5kZWZpbmVkO1xuXG52YXIgX01lbnVJdGVtID0gcmVxdWlyZSgnLi9NZW51SXRlbScpO1xuXG52YXIgX01lbnVJdGVtMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX01lbnVJdGVtKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZXhwb3J0cy5kZWZhdWx0ID0gX01lbnVJdGVtMi5kZWZhdWx0O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9tYXRlcmlhbC11aS9NZW51SXRlbS9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMTg3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIEF4aW9zID0gcmVxdWlyZSgnLi9jb3JlL0F4aW9zJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRlZmF1bHRDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqIEByZXR1cm4ge0F4aW9zfSBBIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICovXG5mdW5jdGlvbiBjcmVhdGVJbnN0YW5jZShkZWZhdWx0Q29uZmlnKSB7XG4gIHZhciBjb250ZXh0ID0gbmV3IEF4aW9zKGRlZmF1bHRDb25maWcpO1xuICB2YXIgaW5zdGFuY2UgPSBiaW5kKEF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0LCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGF4aW9zLnByb3RvdHlwZSB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIEF4aW9zLnByb3RvdHlwZSwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBjb250ZXh0IHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgY29udGV4dCk7XG5cbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuXG4vLyBDcmVhdGUgdGhlIGRlZmF1bHQgaW5zdGFuY2UgdG8gYmUgZXhwb3J0ZWRcbnZhciBheGlvcyA9IGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRzKTtcblxuLy8gRXhwb3NlIEF4aW9zIGNsYXNzIHRvIGFsbG93IGNsYXNzIGluaGVyaXRhbmNlXG5heGlvcy5BeGlvcyA9IEF4aW9zO1xuXG4vLyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2VzXG5heGlvcy5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaW5zdGFuY2VDb25maWcpIHtcbiAgcmV0dXJuIGNyZWF0ZUluc3RhbmNlKHV0aWxzLm1lcmdlKGRlZmF1bHRzLCBpbnN0YW5jZUNvbmZpZykpO1xufTtcblxuLy8gRXhwb3NlIENhbmNlbCAmIENhbmNlbFRva2VuXG5heGlvcy5DYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWwnKTtcbmF4aW9zLkNhbmNlbFRva2VuID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsVG9rZW4nKTtcbmF4aW9zLmlzQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvaXNDYW5jZWwnKTtcblxuLy8gRXhwb3NlIGFsbC9zcHJlYWRcbmF4aW9zLmFsbCA9IGZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xufTtcbmF4aW9zLnNwcmVhZCA9IHJlcXVpcmUoJy4vaGVscGVycy9zcHJlYWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBheGlvcztcblxuLy8gQWxsb3cgdXNlIG9mIGRlZmF1bHQgaW1wb3J0IHN5bnRheCBpbiBUeXBlU2NyaXB0XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gYXhpb3M7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYXhpb3MvbGliL2F4aW9zLmpzXG4vLyBtb2R1bGUgaWQgPSAxODlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ2FuY2VsID0gcmVxdWlyZSgnLi9DYW5jZWwnKTtcblxuLyoqXG4gKiBBIGBDYW5jZWxUb2tlbmAgaXMgYW4gb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVxdWVzdCBjYW5jZWxsYXRpb24gb2YgYW4gb3BlcmF0aW9uLlxuICpcbiAqIEBjbGFzc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZXhlY3V0b3IgVGhlIGV4ZWN1dG9yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBDYW5jZWxUb2tlbihleGVjdXRvcikge1xuICBpZiAodHlwZW9mIGV4ZWN1dG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhlY3V0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdmFyIHJlc29sdmVQcm9taXNlO1xuICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiBwcm9taXNlRXhlY3V0b3IocmVzb2x2ZSkge1xuICAgIHJlc29sdmVQcm9taXNlID0gcmVzb2x2ZTtcbiAgfSk7XG5cbiAgdmFyIHRva2VuID0gdGhpcztcbiAgZXhlY3V0b3IoZnVuY3Rpb24gY2FuY2VsKG1lc3NhZ2UpIHtcbiAgICBpZiAodG9rZW4ucmVhc29uKSB7XG4gICAgICAvLyBDYW5jZWxsYXRpb24gaGFzIGFscmVhZHkgYmVlbiByZXF1ZXN0ZWRcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0b2tlbi5yZWFzb24gPSBuZXcgQ2FuY2VsKG1lc3NhZ2UpO1xuICAgIHJlc29sdmVQcm9taXNlKHRva2VuLnJlYXNvbik7XG4gIH0pO1xufVxuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbkNhbmNlbFRva2VuLnByb3RvdHlwZS50aHJvd0lmUmVxdWVzdGVkID0gZnVuY3Rpb24gdGhyb3dJZlJlcXVlc3RlZCgpIHtcbiAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgdGhyb3cgdGhpcy5yZWFzb247XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyBhbiBvYmplY3QgdGhhdCBjb250YWlucyBhIG5ldyBgQ2FuY2VsVG9rZW5gIGFuZCBhIGZ1bmN0aW9uIHRoYXQsIHdoZW4gY2FsbGVkLFxuICogY2FuY2VscyB0aGUgYENhbmNlbFRva2VuYC5cbiAqL1xuQ2FuY2VsVG9rZW4uc291cmNlID0gZnVuY3Rpb24gc291cmNlKCkge1xuICB2YXIgY2FuY2VsO1xuICB2YXIgdG9rZW4gPSBuZXcgQ2FuY2VsVG9rZW4oZnVuY3Rpb24gZXhlY3V0b3IoYykge1xuICAgIGNhbmNlbCA9IGM7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHRva2VuOiB0b2tlbixcbiAgICBjYW5jZWw6IGNhbmNlbFxuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBDYW5jZWxUb2tlbjtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9heGlvcy9saWIvY2FuY2VsL0NhbmNlbFRva2VuLmpzXG4vLyBtb2R1bGUgaWQgPSAxOTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLy4uL2RlZmF1bHRzJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgSW50ZXJjZXB0b3JNYW5hZ2VyID0gcmVxdWlyZSgnLi9JbnRlcmNlcHRvck1hbmFnZXInKTtcbnZhciBkaXNwYXRjaFJlcXVlc3QgPSByZXF1aXJlKCcuL2Rpc3BhdGNoUmVxdWVzdCcpO1xudmFyIGlzQWJzb2x1dGVVUkwgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTCcpO1xudmFyIGNvbWJpbmVVUkxzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2NvbWJpbmVVUkxzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGluc3RhbmNlQ29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIEF4aW9zKGluc3RhbmNlQ29uZmlnKSB7XG4gIHRoaXMuZGVmYXVsdHMgPSBpbnN0YW5jZUNvbmZpZztcbiAgdGhpcy5pbnRlcmNlcHRvcnMgPSB7XG4gICAgcmVxdWVzdDogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpLFxuICAgIHJlc3BvbnNlOiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKClcbiAgfTtcbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcgc3BlY2lmaWMgZm9yIHRoaXMgcmVxdWVzdCAobWVyZ2VkIHdpdGggdGhpcy5kZWZhdWx0cylcbiAqL1xuQXhpb3MucHJvdG90eXBlLnJlcXVlc3QgPSBmdW5jdGlvbiByZXF1ZXN0KGNvbmZpZykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgLy8gQWxsb3cgZm9yIGF4aW9zKCdleGFtcGxlL3VybCdbLCBjb25maWddKSBhIGxhIGZldGNoIEFQSVxuICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25maWcgPSB1dGlscy5tZXJnZSh7XG4gICAgICB1cmw6IGFyZ3VtZW50c1swXVxuICAgIH0sIGFyZ3VtZW50c1sxXSk7XG4gIH1cblxuICBjb25maWcgPSB1dGlscy5tZXJnZShkZWZhdWx0cywgdGhpcy5kZWZhdWx0cywgeyBtZXRob2Q6ICdnZXQnIH0sIGNvbmZpZyk7XG4gIGNvbmZpZy5tZXRob2QgPSBjb25maWcubWV0aG9kLnRvTG93ZXJDYXNlKCk7XG5cbiAgLy8gU3VwcG9ydCBiYXNlVVJMIGNvbmZpZ1xuICBpZiAoY29uZmlnLmJhc2VVUkwgJiYgIWlzQWJzb2x1dGVVUkwoY29uZmlnLnVybCkpIHtcbiAgICBjb25maWcudXJsID0gY29tYmluZVVSTHMoY29uZmlnLmJhc2VVUkwsIGNvbmZpZy51cmwpO1xuICB9XG5cbiAgLy8gSG9vayB1cCBpbnRlcmNlcHRvcnMgbWlkZGxld2FyZVxuICB2YXIgY2hhaW4gPSBbZGlzcGF0Y2hSZXF1ZXN0LCB1bmRlZmluZWRdO1xuICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShjb25maWcpO1xuXG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlcXVlc3QuZm9yRWFjaChmdW5jdGlvbiB1bnNoaWZ0UmVxdWVzdEludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGNoYWluLnVuc2hpZnQoaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLmZvckVhY2goZnVuY3Rpb24gcHVzaFJlc3BvbnNlSW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgY2hhaW4ucHVzaChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgd2hpbGUgKGNoYWluLmxlbmd0aCkge1xuICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oY2hhaW4uc2hpZnQoKSwgY2hhaW4uc2hpZnQoKSk7XG4gIH1cblxuICByZXR1cm4gcHJvbWlzZTtcbn07XG5cbi8vIFByb3ZpZGUgYWxpYXNlcyBmb3Igc3VwcG9ydGVkIHJlcXVlc3QgbWV0aG9kc1xudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdvcHRpb25zJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHV0aWxzLm1lcmdlKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybFxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgZGF0YSwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh1dGlscy5tZXJnZShjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmwsXG4gICAgICBkYXRhOiBkYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQXhpb3M7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYXhpb3MvbGliL2NvcmUvQXhpb3MuanNcbi8vIG1vZHVsZSBpZCA9IDE5MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gSW50ZXJjZXB0b3JNYW5hZ2VyKCkge1xuICB0aGlzLmhhbmRsZXJzID0gW107XG59XG5cbi8qKlxuICogQWRkIGEgbmV3IGludGVyY2VwdG9yIHRvIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bGZpbGxlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGB0aGVuYCBmb3IgYSBgUHJvbWlzZWBcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHJlamVjdGAgZm9yIGEgYFByb21pc2VgXG4gKlxuICogQHJldHVybiB7TnVtYmVyfSBBbiBJRCB1c2VkIHRvIHJlbW92ZSBpbnRlcmNlcHRvciBsYXRlclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLnVzZSA9IGZ1bmN0aW9uIHVzZShmdWxmaWxsZWQsIHJlamVjdGVkKSB7XG4gIHRoaXMuaGFuZGxlcnMucHVzaCh7XG4gICAgZnVsZmlsbGVkOiBmdWxmaWxsZWQsXG4gICAgcmVqZWN0ZWQ6IHJlamVjdGVkXG4gIH0pO1xuICByZXR1cm4gdGhpcy5oYW5kbGVycy5sZW5ndGggLSAxO1xufTtcblxuLyoqXG4gKiBSZW1vdmUgYW4gaW50ZXJjZXB0b3IgZnJvbSB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gaWQgVGhlIElEIHRoYXQgd2FzIHJldHVybmVkIGJ5IGB1c2VgXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZWplY3QgPSBmdW5jdGlvbiBlamVjdChpZCkge1xuICBpZiAodGhpcy5oYW5kbGVyc1tpZF0pIHtcbiAgICB0aGlzLmhhbmRsZXJzW2lkXSA9IG51bGw7XG4gIH1cbn07XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFsbCB0aGUgcmVnaXN0ZXJlZCBpbnRlcmNlcHRvcnNcbiAqXG4gKiBUaGlzIG1ldGhvZCBpcyBwYXJ0aWN1bGFybHkgdXNlZnVsIGZvciBza2lwcGluZyBvdmVyIGFueVxuICogaW50ZXJjZXB0b3JzIHRoYXQgbWF5IGhhdmUgYmVjb21lIGBudWxsYCBjYWxsaW5nIGBlamVjdGAuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggaW50ZXJjZXB0b3JcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gZm9yRWFjaChmbikge1xuICB1dGlscy5mb3JFYWNoKHRoaXMuaGFuZGxlcnMsIGZ1bmN0aW9uIGZvckVhY2hIYW5kbGVyKGgpIHtcbiAgICBpZiAoaCAhPT0gbnVsbCkge1xuICAgICAgZm4oaCk7XG4gICAgfVxuICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gSW50ZXJjZXB0b3JNYW5hZ2VyO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2F4aW9zL2xpYi9jb3JlL0ludGVyY2VwdG9yTWFuYWdlci5qc1xuLy8gbW9kdWxlIGlkID0gMTkyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xudmFyIHRyYW5zZm9ybURhdGEgPSByZXF1aXJlKCcuL3RyYW5zZm9ybURhdGEnKTtcbnZhciBpc0NhbmNlbCA9IHJlcXVpcmUoJy4uL2NhbmNlbC9pc0NhbmNlbCcpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi4vZGVmYXVsdHMnKTtcblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5mdW5jdGlvbiB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZykge1xuICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgY29uZmlnLmNhbmNlbFRva2VuLnRocm93SWZSZXF1ZXN0ZWQoKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyIHVzaW5nIHRoZSBjb25maWd1cmVkIGFkYXB0ZXIuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkaXNwYXRjaFJlcXVlc3QoY29uZmlnKSB7XG4gIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAvLyBFbnN1cmUgaGVhZGVycyBleGlzdFxuICBjb25maWcuaGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzIHx8IHt9O1xuXG4gIC8vIFRyYW5zZm9ybSByZXF1ZXN0IGRhdGFcbiAgY29uZmlnLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgIGNvbmZpZy5kYXRhLFxuICAgIGNvbmZpZy5oZWFkZXJzLFxuICAgIGNvbmZpZy50cmFuc2Zvcm1SZXF1ZXN0XG4gICk7XG5cbiAgLy8gRmxhdHRlbiBoZWFkZXJzXG4gIGNvbmZpZy5oZWFkZXJzID0gdXRpbHMubWVyZ2UoXG4gICAgY29uZmlnLmhlYWRlcnMuY29tbW9uIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzW2NvbmZpZy5tZXRob2RdIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzIHx8IHt9XG4gICk7XG5cbiAgdXRpbHMuZm9yRWFjaChcbiAgICBbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCcsICdjb21tb24nXSxcbiAgICBmdW5jdGlvbiBjbGVhbkhlYWRlckNvbmZpZyhtZXRob2QpIHtcbiAgICAgIGRlbGV0ZSBjb25maWcuaGVhZGVyc1ttZXRob2RdO1xuICAgIH1cbiAgKTtcblxuICB2YXIgYWRhcHRlciA9IGNvbmZpZy5hZGFwdGVyIHx8IGRlZmF1bHRzLmFkYXB0ZXI7XG5cbiAgcmV0dXJuIGFkYXB0ZXIoY29uZmlnKS50aGVuKGZ1bmN0aW9uIG9uQWRhcHRlclJlc29sdXRpb24ocmVzcG9uc2UpIHtcbiAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgIHJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgICAgcmVzcG9uc2UuZGF0YSxcbiAgICAgIHJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICApO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9LCBmdW5jdGlvbiBvbkFkYXB0ZXJSZWplY3Rpb24ocmVhc29uKSB7XG4gICAgaWYgKCFpc0NhbmNlbChyZWFzb24pKSB7XG4gICAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgICBpZiAocmVhc29uICYmIHJlYXNvbi5yZXNwb25zZSkge1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlYXNvbik7XG4gIH0pO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9heGlvcy9saWIvY29yZS9kaXNwYXRjaFJlcXVlc3QuanNcbi8vIG1vZHVsZSBpZCA9IDE5M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogVXBkYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBjb25maWcsIGVycm9yIGNvZGUsIGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge0Vycm9yfSBlcnJvciBUaGUgZXJyb3IgdG8gdXBkYXRlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgZXJyb3IuY29uZmlnID0gY29uZmlnO1xuICBpZiAoY29kZSkge1xuICAgIGVycm9yLmNvZGUgPSBjb2RlO1xuICB9XG4gIGVycm9yLnJlcXVlc3QgPSByZXF1ZXN0O1xuICBlcnJvci5yZXNwb25zZSA9IHJlc3BvbnNlO1xuICByZXR1cm4gZXJyb3I7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2F4aW9zL2xpYi9jb3JlL2VuaGFuY2VFcnJvci5qc1xuLy8gbW9kdWxlIGlkID0gMTk0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi9jcmVhdGVFcnJvcicpO1xuXG4vKipcbiAqIFJlc29sdmUgb3IgcmVqZWN0IGEgUHJvbWlzZSBiYXNlZCBvbiByZXNwb25zZSBzdGF0dXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVzb2x2ZSBBIGZ1bmN0aW9uIHRoYXQgcmVzb2x2ZXMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3QgQSBmdW5jdGlvbiB0aGF0IHJlamVjdHMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKSB7XG4gIHZhciB2YWxpZGF0ZVN0YXR1cyA9IHJlc3BvbnNlLmNvbmZpZy52YWxpZGF0ZVN0YXR1cztcbiAgLy8gTm90ZTogc3RhdHVzIGlzIG5vdCBleHBvc2VkIGJ5IFhEb21haW5SZXF1ZXN0XG4gIGlmICghcmVzcG9uc2Uuc3RhdHVzIHx8ICF2YWxpZGF0ZVN0YXR1cyB8fCB2YWxpZGF0ZVN0YXR1cyhyZXNwb25zZS5zdGF0dXMpKSB7XG4gICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gIH0gZWxzZSB7XG4gICAgcmVqZWN0KGNyZWF0ZUVycm9yKFxuICAgICAgJ1JlcXVlc3QgZmFpbGVkIHdpdGggc3RhdHVzIGNvZGUgJyArIHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgIHJlc3BvbnNlLmNvbmZpZyxcbiAgICAgIG51bGwsXG4gICAgICByZXNwb25zZS5yZXF1ZXN0LFxuICAgICAgcmVzcG9uc2VcbiAgICApKTtcbiAgfVxufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9heGlvcy9saWIvY29yZS9zZXR0bGUuanNcbi8vIG1vZHVsZSBpZCA9IDE5NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGhlIGRhdGEgZm9yIGEgcmVxdWVzdCBvciBhIHJlc3BvbnNlXG4gKlxuICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSBkYXRhIFRoZSBkYXRhIHRvIGJlIHRyYW5zZm9ybWVkXG4gKiBAcGFyYW0ge0FycmF5fSBoZWFkZXJzIFRoZSBoZWFkZXJzIGZvciB0aGUgcmVxdWVzdCBvciByZXNwb25zZVxuICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbn0gZm5zIEEgc2luZ2xlIGZ1bmN0aW9uIG9yIEFycmF5IG9mIGZ1bmN0aW9uc1xuICogQHJldHVybnMgeyp9IFRoZSByZXN1bHRpbmcgdHJhbnNmb3JtZWQgZGF0YVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHRyYW5zZm9ybURhdGEoZGF0YSwgaGVhZGVycywgZm5zKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICB1dGlscy5mb3JFYWNoKGZucywgZnVuY3Rpb24gdHJhbnNmb3JtKGZuKSB7XG4gICAgZGF0YSA9IGZuKGRhdGEsIGhlYWRlcnMpO1xuICB9KTtcblxuICByZXR1cm4gZGF0YTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qc1xuLy8gbW9kdWxlIGlkID0gMTk2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxuLy8gYnRvYSBwb2x5ZmlsbCBmb3IgSUU8MTAgY291cnRlc3kgaHR0cHM6Ly9naXRodWIuY29tL2RhdmlkY2hhbWJlcnMvQmFzZTY0LmpzXG5cbnZhciBjaGFycyA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPSc7XG5cbmZ1bmN0aW9uIEUoKSB7XG4gIHRoaXMubWVzc2FnZSA9ICdTdHJpbmcgY29udGFpbnMgYW4gaW52YWxpZCBjaGFyYWN0ZXInO1xufVxuRS5wcm90b3R5cGUgPSBuZXcgRXJyb3I7XG5FLnByb3RvdHlwZS5jb2RlID0gNTtcbkUucHJvdG90eXBlLm5hbWUgPSAnSW52YWxpZENoYXJhY3RlckVycm9yJztcblxuZnVuY3Rpb24gYnRvYShpbnB1dCkge1xuICB2YXIgc3RyID0gU3RyaW5nKGlucHV0KTtcbiAgdmFyIG91dHB1dCA9ICcnO1xuICBmb3IgKFxuICAgIC8vIGluaXRpYWxpemUgcmVzdWx0IGFuZCBjb3VudGVyXG4gICAgdmFyIGJsb2NrLCBjaGFyQ29kZSwgaWR4ID0gMCwgbWFwID0gY2hhcnM7XG4gICAgLy8gaWYgdGhlIG5leHQgc3RyIGluZGV4IGRvZXMgbm90IGV4aXN0OlxuICAgIC8vICAgY2hhbmdlIHRoZSBtYXBwaW5nIHRhYmxlIHRvIFwiPVwiXG4gICAgLy8gICBjaGVjayBpZiBkIGhhcyBubyBmcmFjdGlvbmFsIGRpZ2l0c1xuICAgIHN0ci5jaGFyQXQoaWR4IHwgMCkgfHwgKG1hcCA9ICc9JywgaWR4ICUgMSk7XG4gICAgLy8gXCI4IC0gaWR4ICUgMSAqIDhcIiBnZW5lcmF0ZXMgdGhlIHNlcXVlbmNlIDIsIDQsIDYsIDhcbiAgICBvdXRwdXQgKz0gbWFwLmNoYXJBdCg2MyAmIGJsb2NrID4+IDggLSBpZHggJSAxICogOClcbiAgKSB7XG4gICAgY2hhckNvZGUgPSBzdHIuY2hhckNvZGVBdChpZHggKz0gMyAvIDQpO1xuICAgIGlmIChjaGFyQ29kZSA+IDB4RkYpIHtcbiAgICAgIHRocm93IG5ldyBFKCk7XG4gICAgfVxuICAgIGJsb2NrID0gYmxvY2sgPDwgOCB8IGNoYXJDb2RlO1xuICB9XG4gIHJldHVybiBvdXRwdXQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYnRvYTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9heGlvcy9saWIvaGVscGVycy9idG9hLmpzXG4vLyBtb2R1bGUgaWQgPSAxOTdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIGVuY29kZSh2YWwpIHtcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudCh2YWwpLlxuICAgIHJlcGxhY2UoLyU0MC9naSwgJ0AnKS5cbiAgICByZXBsYWNlKC8lM0EvZ2ksICc6JykuXG4gICAgcmVwbGFjZSgvJTI0L2csICckJykuXG4gICAgcmVwbGFjZSgvJTJDL2dpLCAnLCcpLlxuICAgIHJlcGxhY2UoLyUyMC9nLCAnKycpLlxuICAgIHJlcGxhY2UoLyU1Qi9naSwgJ1snKS5cbiAgICByZXBsYWNlKC8lNUQvZ2ksICddJyk7XG59XG5cbi8qKlxuICogQnVpbGQgYSBVUkwgYnkgYXBwZW5kaW5nIHBhcmFtcyB0byB0aGUgZW5kXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgYmFzZSBvZiB0aGUgdXJsIChlLmcuLCBodHRwOi8vd3d3Lmdvb2dsZS5jb20pXG4gKiBAcGFyYW0ge29iamVjdH0gW3BhcmFtc10gVGhlIHBhcmFtcyB0byBiZSBhcHBlbmRlZFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGZvcm1hdHRlZCB1cmxcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBidWlsZFVSTCh1cmwsIHBhcmFtcywgcGFyYW1zU2VyaWFsaXplcikge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgaWYgKCFwYXJhbXMpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG5cbiAgdmFyIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIGlmIChwYXJhbXNTZXJpYWxpemVyKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtc1NlcmlhbGl6ZXIocGFyYW1zKTtcbiAgfSBlbHNlIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhwYXJhbXMpKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHBhcmFtcy50b1N0cmluZygpO1xuICB9IGVsc2Uge1xuICAgIHZhciBwYXJ0cyA9IFtdO1xuXG4gICAgdXRpbHMuZm9yRWFjaChwYXJhbXMsIGZ1bmN0aW9uIHNlcmlhbGl6ZSh2YWwsIGtleSkge1xuICAgICAgaWYgKHZhbCA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh1dGlscy5pc0FycmF5KHZhbCkpIHtcbiAgICAgICAga2V5ID0ga2V5ICsgJ1tdJztcbiAgICAgIH1cblxuICAgICAgaWYgKCF1dGlscy5pc0FycmF5KHZhbCkpIHtcbiAgICAgICAgdmFsID0gW3ZhbF07XG4gICAgICB9XG5cbiAgICAgIHV0aWxzLmZvckVhY2godmFsLCBmdW5jdGlvbiBwYXJzZVZhbHVlKHYpIHtcbiAgICAgICAgaWYgKHV0aWxzLmlzRGF0ZSh2KSkge1xuICAgICAgICAgIHYgPSB2LnRvSVNPU3RyaW5nKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodXRpbHMuaXNPYmplY3QodikpIHtcbiAgICAgICAgICB2ID0gSlNPTi5zdHJpbmdpZnkodik7XG4gICAgICAgIH1cbiAgICAgICAgcGFydHMucHVzaChlbmNvZGUoa2V5KSArICc9JyArIGVuY29kZSh2KSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJ0cy5qb2luKCcmJyk7XG4gIH1cblxuICBpZiAoc2VyaWFsaXplZFBhcmFtcykge1xuICAgIHVybCArPSAodXJsLmluZGV4T2YoJz8nKSA9PT0gLTEgPyAnPycgOiAnJicpICsgc2VyaWFsaXplZFBhcmFtcztcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2F4aW9zL2xpYi9oZWxwZXJzL2J1aWxkVVJMLmpzXG4vLyBtb2R1bGUgaWQgPSAxOThcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgc3BlY2lmaWVkIFVSTHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWxhdGl2ZVVSTCBUaGUgcmVsYXRpdmUgVVJMXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgVVJMXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVsYXRpdmVVUkwpIHtcbiAgcmV0dXJuIHJlbGF0aXZlVVJMXG4gICAgPyBiYXNlVVJMLnJlcGxhY2UoL1xcLyskLywgJycpICsgJy8nICsgcmVsYXRpdmVVUkwucmVwbGFjZSgvXlxcLysvLCAnJylcbiAgICA6IGJhc2VVUkw7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2F4aW9zL2xpYi9oZWxwZXJzL2NvbWJpbmVVUkxzLmpzXG4vLyBtb2R1bGUgaWQgPSAxOTlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgc3VwcG9ydCBkb2N1bWVudC5jb29raWVcbiAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKG5hbWUsIHZhbHVlLCBleHBpcmVzLCBwYXRoLCBkb21haW4sIHNlY3VyZSkge1xuICAgICAgICB2YXIgY29va2llID0gW107XG4gICAgICAgIGNvb2tpZS5wdXNoKG5hbWUgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcblxuICAgICAgICBpZiAodXRpbHMuaXNOdW1iZXIoZXhwaXJlcykpIHtcbiAgICAgICAgICBjb29raWUucHVzaCgnZXhwaXJlcz0nICsgbmV3IERhdGUoZXhwaXJlcykudG9HTVRTdHJpbmcoKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcocGF0aCkpIHtcbiAgICAgICAgICBjb29raWUucHVzaCgncGF0aD0nICsgcGF0aCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcoZG9tYWluKSkge1xuICAgICAgICAgIGNvb2tpZS5wdXNoKCdkb21haW49JyArIGRvbWFpbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2VjdXJlID09PSB0cnVlKSB7XG4gICAgICAgICAgY29va2llLnB1c2goJ3NlY3VyZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgZG9jdW1lbnQuY29va2llID0gY29va2llLmpvaW4oJzsgJyk7XG4gICAgICB9LFxuXG4gICAgICByZWFkOiBmdW5jdGlvbiByZWFkKG5hbWUpIHtcbiAgICAgICAgdmFyIG1hdGNoID0gZG9jdW1lbnQuY29va2llLm1hdGNoKG5ldyBSZWdFeHAoJyhefDtcXFxccyopKCcgKyBuYW1lICsgJyk9KFteO10qKScpKTtcbiAgICAgICAgcmV0dXJuIChtYXRjaCA/IGRlY29kZVVSSUNvbXBvbmVudChtYXRjaFszXSkgOiBudWxsKTtcbiAgICAgIH0sXG5cbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKG5hbWUpIHtcbiAgICAgICAgdGhpcy53cml0ZShuYW1lLCAnJywgRGF0ZS5ub3coKSAtIDg2NDAwMDAwKTtcbiAgICAgIH1cbiAgICB9O1xuICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnYgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZSgpIHt9LFxuICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZCgpIHsgcmV0dXJuIG51bGw7IH0sXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgfTtcbiAgfSkoKVxuKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzXG4vLyBtb2R1bGUgaWQgPSAyMDBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIFVSTCB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNBYnNvbHV0ZVVSTCh1cmwpIHtcbiAgLy8gQSBVUkwgaXMgY29uc2lkZXJlZCBhYnNvbHV0ZSBpZiBpdCBiZWdpbnMgd2l0aCBcIjxzY2hlbWU+Oi8vXCIgb3IgXCIvL1wiIChwcm90b2NvbC1yZWxhdGl2ZSBVUkwpLlxuICAvLyBSRkMgMzk4NiBkZWZpbmVzIHNjaGVtZSBuYW1lIGFzIGEgc2VxdWVuY2Ugb2YgY2hhcmFjdGVycyBiZWdpbm5pbmcgd2l0aCBhIGxldHRlciBhbmQgZm9sbG93ZWRcbiAgLy8gYnkgYW55IGNvbWJpbmF0aW9uIG9mIGxldHRlcnMsIGRpZ2l0cywgcGx1cywgcGVyaW9kLCBvciBoeXBoZW4uXG4gIHJldHVybiAvXihbYS16XVthLXpcXGRcXCtcXC1cXC5dKjopP1xcL1xcLy9pLnRlc3QodXJsKTtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYXhpb3MvbGliL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qc1xuLy8gbW9kdWxlIGlkID0gMjAxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIGhhdmUgZnVsbCBzdXBwb3J0IG9mIHRoZSBBUElzIG5lZWRlZCB0byB0ZXN0XG4gIC8vIHdoZXRoZXIgdGhlIHJlcXVlc3QgVVJMIGlzIG9mIHRoZSBzYW1lIG9yaWdpbiBhcyBjdXJyZW50IGxvY2F0aW9uLlxuICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIHZhciBtc2llID0gLyhtc2llfHRyaWRlbnQpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgICB2YXIgdXJsUGFyc2luZ05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgdmFyIG9yaWdpblVSTDtcblxuICAgIC8qKlxuICAgICogUGFyc2UgYSBVUkwgdG8gZGlzY292ZXIgaXQncyBjb21wb25lbnRzXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHVybCBUaGUgVVJMIHRvIGJlIHBhcnNlZFxuICAgICogQHJldHVybnMge09iamVjdH1cbiAgICAqL1xuICAgIGZ1bmN0aW9uIHJlc29sdmVVUkwodXJsKSB7XG4gICAgICB2YXIgaHJlZiA9IHVybDtcblxuICAgICAgaWYgKG1zaWUpIHtcbiAgICAgICAgLy8gSUUgbmVlZHMgYXR0cmlidXRlIHNldCB0d2ljZSB0byBub3JtYWxpemUgcHJvcGVydGllc1xuICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcbiAgICAgICAgaHJlZiA9IHVybFBhcnNpbmdOb2RlLmhyZWY7XG4gICAgICB9XG5cbiAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuXG4gICAgICAvLyB1cmxQYXJzaW5nTm9kZSBwcm92aWRlcyB0aGUgVXJsVXRpbHMgaW50ZXJmYWNlIC0gaHR0cDovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHV0aWxzXG4gICAgICByZXR1cm4ge1xuICAgICAgICBocmVmOiB1cmxQYXJzaW5nTm9kZS5ocmVmLFxuICAgICAgICBwcm90b2NvbDogdXJsUGFyc2luZ05vZGUucHJvdG9jb2wgPyB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbC5yZXBsYWNlKC86JC8sICcnKSA6ICcnLFxuICAgICAgICBob3N0OiB1cmxQYXJzaW5nTm9kZS5ob3N0LFxuICAgICAgICBzZWFyY2g6IHVybFBhcnNpbmdOb2RlLnNlYXJjaCA/IHVybFBhcnNpbmdOb2RlLnNlYXJjaC5yZXBsYWNlKC9eXFw/LywgJycpIDogJycsXG4gICAgICAgIGhhc2g6IHVybFBhcnNpbmdOb2RlLmhhc2ggPyB1cmxQYXJzaW5nTm9kZS5oYXNoLnJlcGxhY2UoL14jLywgJycpIDogJycsXG4gICAgICAgIGhvc3RuYW1lOiB1cmxQYXJzaW5nTm9kZS5ob3N0bmFtZSxcbiAgICAgICAgcG9ydDogdXJsUGFyc2luZ05vZGUucG9ydCxcbiAgICAgICAgcGF0aG5hbWU6ICh1cmxQYXJzaW5nTm9kZS5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJykgP1xuICAgICAgICAgICAgICAgICAgdXJsUGFyc2luZ05vZGUucGF0aG5hbWUgOlxuICAgICAgICAgICAgICAgICAgJy8nICsgdXJsUGFyc2luZ05vZGUucGF0aG5hbWVcbiAgICAgIH07XG4gICAgfVxuXG4gICAgb3JpZ2luVVJMID0gcmVzb2x2ZVVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG5cbiAgICAvKipcbiAgICAqIERldGVybWluZSBpZiBhIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luIGFzIHRoZSBjdXJyZW50IGxvY2F0aW9uXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHJlcXVlc3RVUkwgVGhlIFVSTCB0byB0ZXN0XG4gICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiwgb3RoZXJ3aXNlIGZhbHNlXG4gICAgKi9cbiAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKHJlcXVlc3RVUkwpIHtcbiAgICAgIHZhciBwYXJzZWQgPSAodXRpbHMuaXNTdHJpbmcocmVxdWVzdFVSTCkpID8gcmVzb2x2ZVVSTChyZXF1ZXN0VVJMKSA6IHJlcXVlc3RVUkw7XG4gICAgICByZXR1cm4gKHBhcnNlZC5wcm90b2NvbCA9PT0gb3JpZ2luVVJMLnByb3RvY29sICYmXG4gICAgICAgICAgICBwYXJzZWQuaG9zdCA9PT0gb3JpZ2luVVJMLmhvc3QpO1xuICAgIH07XG4gIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudnMgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbigpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gIH0pKClcbik7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYXhpb3MvbGliL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luLmpzXG4vLyBtb2R1bGUgaWQgPSAyMDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgbm9ybWFsaXplZE5hbWUpIHtcbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLCBmdW5jdGlvbiBwcm9jZXNzSGVhZGVyKHZhbHVlLCBuYW1lKSB7XG4gICAgaWYgKG5hbWUgIT09IG5vcm1hbGl6ZWROYW1lICYmIG5hbWUudG9VcHBlckNhc2UoKSA9PT0gbm9ybWFsaXplZE5hbWUudG9VcHBlckNhc2UoKSkge1xuICAgICAgaGVhZGVyc1tub3JtYWxpemVkTmFtZV0gPSB2YWx1ZTtcbiAgICAgIGRlbGV0ZSBoZWFkZXJzW25hbWVdO1xuICAgIH1cbiAgfSk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2F4aW9zL2xpYi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUuanNcbi8vIG1vZHVsZSBpZCA9IDIwM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBQYXJzZSBoZWFkZXJzIGludG8gYW4gb2JqZWN0XG4gKlxuICogYGBgXG4gKiBEYXRlOiBXZWQsIDI3IEF1ZyAyMDE0IDA4OjU4OjQ5IEdNVFxuICogQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uXG4gKiBDb25uZWN0aW9uOiBrZWVwLWFsaXZlXG4gKiBUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZFxuICogYGBgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGhlYWRlcnMgSGVhZGVycyBuZWVkaW5nIHRvIGJlIHBhcnNlZFxuICogQHJldHVybnMge09iamVjdH0gSGVhZGVycyBwYXJzZWQgaW50byBhbiBvYmplY3RcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYXJzZUhlYWRlcnMoaGVhZGVycykge1xuICB2YXIgcGFyc2VkID0ge307XG4gIHZhciBrZXk7XG4gIHZhciB2YWw7XG4gIHZhciBpO1xuXG4gIGlmICghaGVhZGVycykgeyByZXR1cm4gcGFyc2VkOyB9XG5cbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLnNwbGl0KCdcXG4nKSwgZnVuY3Rpb24gcGFyc2VyKGxpbmUpIHtcbiAgICBpID0gbGluZS5pbmRleE9mKCc6Jyk7XG4gICAga2V5ID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cigwLCBpKSkudG9Mb3dlckNhc2UoKTtcbiAgICB2YWwgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKGkgKyAxKSk7XG5cbiAgICBpZiAoa2V5KSB7XG4gICAgICBwYXJzZWRba2V5XSA9IHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gKyAnLCAnICsgdmFsIDogdmFsO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHBhcnNlZDtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYXhpb3MvbGliL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzXG4vLyBtb2R1bGUgaWQgPSAyMDRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFN5bnRhY3RpYyBzdWdhciBmb3IgaW52b2tpbmcgYSBmdW5jdGlvbiBhbmQgZXhwYW5kaW5nIGFuIGFycmF5IGZvciBhcmd1bWVudHMuXG4gKlxuICogQ29tbW9uIHVzZSBjYXNlIHdvdWxkIGJlIHRvIHVzZSBgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5YC5cbiAqXG4gKiAgYGBganNcbiAqICBmdW5jdGlvbiBmKHgsIHksIHopIHt9XG4gKiAgdmFyIGFyZ3MgPSBbMSwgMiwgM107XG4gKiAgZi5hcHBseShudWxsLCBhcmdzKTtcbiAqICBgYGBcbiAqXG4gKiBXaXRoIGBzcHJlYWRgIHRoaXMgZXhhbXBsZSBjYW4gYmUgcmUtd3JpdHRlbi5cbiAqXG4gKiAgYGBganNcbiAqICBzcHJlYWQoZnVuY3Rpb24oeCwgeSwgeikge30pKFsxLCAyLCAzXSk7XG4gKiAgYGBgXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzcHJlYWQoY2FsbGJhY2spIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoYXJyKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFycik7XG4gIH07XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2F4aW9zL2xpYi9oZWxwZXJzL3NwcmVhZC5qc1xuLy8gbW9kdWxlIGlkID0gMjA1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBSZWFjdERvbSBmcm9tICdyZWFjdC1kb20nO1xyXG5cclxuaW1wb3J0IE11aVRoZW1lUHJvdmlkZXIgZnJvbSAnbWF0ZXJpYWwtdWkvc3R5bGVzL011aVRoZW1lUHJvdmlkZXInO1xyXG5pbXBvcnQgQXBwQmFyIGZyb20gJ21hdGVyaWFsLXVpL0FwcEJhcic7XHJcbmltcG9ydCBEcmF3ZXIgZnJvbSAnbWF0ZXJpYWwtdWkvRHJhd2VyJztcclxuaW1wb3J0IE1lbnVJdGVtIGZyb20gJ21hdGVyaWFsLXVpL01lbnVJdGVtJztcclxuXHJcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XHJcblxyXG5pbXBvcnQgSW5kZXggZnJvbSAnLi9JbmRleCc7XHJcbmltcG9ydCBTb25nc0FwcCBmcm9tICcuL3NvbmdzL1NvbmdzQXBwJztcclxuaW1wb3J0IFNvbmdQbGF5ZXIgZnJvbSAnLi9zb25ncy9Tb25nUGxheWVyJztcclxuXHJcbi8qIEVTVEUgRlJBR01FTlRPIERFIENPRElHTyBFUyBSRVFVRVJJRE8gUEFSQSBMT1MgRVZFTlRPUyBERSBUSVBPIFRPVUNIIE8gQ0xJQ0sgRU4gQ09NUE9ORU5URVMgTUFURVJJQUwtVUkgKi9cclxudmFyIGluamVjdFRhcEV2ZW50UGx1Z2luID0gcmVxdWlyZShcInJlYWN0LXRhcC1ldmVudC1wbHVnaW5cIik7XHJcbmluamVjdFRhcEV2ZW50UGx1Z2luKCk7XHJcbi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXHJcblxyXG4vKiBQQUdJTkFTIFVTQURBUyBQQVJBIEVMIEVOUlVUQU1JRU5UTyAqL1xyXG5jb25zdCBQQUdFUyA9IHtcclxuICAgIGluZGV4OiA8SW5kZXggLz4sXHJcbiAgICBzb25nczogPFNvbmdzQXBwIC8+XHJcbn07XHJcblxyXG5jb25zdCBNYWluQXBwID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xyXG4gICAgZ2V0SW5pdGlhbFN0YXRlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgY3VyclBhZ2U6ICdpbmRleCcsXHJcbiAgICAgICAgICAgIGRyYXdlck9wZW46IGZhbHNlLFxyXG4gICAgICAgICAgICBzb25nSW5kZXg6IDAsXHJcbiAgICAgICAgICAgIHBsYXlsaXN0OiBbXVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgYXBwQmFyTGVmdFRhcDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGxldCBkcmF3ZXJPcGVuID0gdGhpcy5zdGF0ZS5kcmF3ZXJPcGVuO1xyXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBkcmF3ZXJPcGVuOiAhZHJhd2VyT3BlbiB9KTtcclxuICAgIH0sXHJcblxyXG4gICAgLyogRXN0YSBmdW5jaW9uIHNlIGVqZWN1dGFyYSBjYWRhIHZleiBxdWUgc2Ugc29saWNpdGUgY2FtYmlhciBlbCBlc3RhZG8gZGUgbGEgYmFycmEuICovXHJcbiAgICBvbkRyYXdlclJlcXVlc3RDaGFuZ2U6IGZ1bmN0aW9uIChvcGVuKSB7XHJcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGRyYXdlck9wZW46IG9wZW4gfSk7XHJcbiAgICB9LFxyXG5cclxuICAgIGdvdG9QYWdlOiBmdW5jdGlvbiAocGFnZSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiR09JTkcgVE8gUEFHRTogXCIgKyBwYWdlKTtcclxuICAgICAgICB0aGlzLnNldFN0YXRlKHsgY3VyclBhZ2U6IHBhZ2UsIGRyYXdlck9wZW46IGZhbHNlIH0pO1xyXG4gICAgfSxcclxuXHJcbiAgICBjb21wb25lbnREaWRNb3VudDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIC8qIFNFIENBUkdBTiBMQVMgQ0FOQ0lPTkVTIERFU1BVRVMgUVVFIEVMIENPTVBPTkVOVEUgSEFZQSBTSURPIE1PTlRBRE8gKi9cclxuICAgICAgICBjb25zb2xlLmxvZyhcIk1haW5BcHAgRElEIE1PVU5UIVwiKTtcclxuXHJcbiAgICAgICAgYXhpb3MucG9zdCgnL2FwaS9hbGxTb25ncycpXHJcbiAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCBkYXRhID0gcmVzcG9uc2UuZGF0YTtcclxuICAgICAgICAgICAgICAgIGlmIChkYXRhLmVycikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBhbCBvYnRlbmVyIGxhcyBjYW5jaW9uZXNcIik7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBDQVJHQU5ETyBQTEFZTElTVDogWyR7ZGF0YS5zb25nc31dYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IHBsYXlsaXN0OiBkYXRhLnNvbmdzIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KS5jYXRjaChlcnJvciA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9LFxyXG5cclxuICAgIG5leHRTb25nOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUucGxheWxpc3QubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGxldCBzb25nSW5kZXggPSAodGhpcy5zdGF0ZS5zb25nSW5kZXggKyAxKSAlIHRoaXMuc3RhdGUucGxheWxpc3QubGVuZ3RoO1xyXG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgc29uZ0luZGV4IH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBzb25nSW5kZXg6IDAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBwcmV2U29uZzogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnN0YXRlLnBsYXlsaXN0Lmxlbmd0aCkge1xyXG4gICAgICAgICAgICBsZXQgc29uZ0luZGV4ID0gdGhpcy5zdGF0ZS5zb25nSW5kZXggLSAxO1xyXG4gICAgICAgICAgICBzb25nSW5kZXggPSBzb25nSW5kZXggPCAwID8gdGhpcy5zdGF0ZS5wbGF5bGlzdC5sZW5ndGggLSAxIDogc29uZ0luZGV4O1xyXG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHsgc29uZ0luZGV4IH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBzb25nSW5kZXg6IDAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICByZW5kZXI6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhcIlJFTkRFUklORyBNYWluQXBwIVwiKTtcclxuICAgICAgICBsZXQgY3VycmVudFBhZ2UgPSBQQUdFU1t0aGlzLnN0YXRlLmN1cnJQYWdlXTtcclxuXHJcbiAgICAgICAgbGV0IHNvbmcgPSB0aGlzLnN0YXRlLnBsYXlsaXN0W3RoaXMuc3RhdGUuc29uZ0luZGV4XTtcclxuICAgICAgICBsZXQgc29uZ1BsYXllciA9IHNvbmcgP1xyXG4gICAgICAgICAgICA8U29uZ1BsYXllclxyXG4gICAgICAgICAgICAgICAgbmV4dFNvbmc9e3RoaXMubmV4dFNvbmd9XHJcbiAgICAgICAgICAgICAgICBwcmV2U29uZz17dGhpcy5wcmV2U29uZ31cclxuICAgICAgICAgICAgICAgIHNvbmc9e3Nvbmd9IC8+IDpcclxuICAgICAgICAgICAgPGRpdiAvPlxyXG5cclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8TXVpVGhlbWVQcm92aWRlcj5cclxuICAgICAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPEFwcEJhclxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkxlZnRJY29uQnV0dG9uVG91Y2hUYXA9e3RoaXMuYXBwQmFyTGVmdFRhcH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9XCJCaW5kaWVcIiAvPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8RHJhd2VyIG9wZW49e3RoaXMuc3RhdGUuZHJhd2VyT3Blbn0gZG9ja2VkPXtmYWxzZX0gb25SZXF1ZXN0Q2hhbmdlPXt0aGlzLm9uRHJhd2VyUmVxdWVzdENoYW5nZX0gPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8TWVudUl0ZW0gb25Ub3VjaFRhcD17ZSA9PiB0aGlzLmdvdG9QYWdlKCdpbmRleCcpfT5QcmluY2lwYWw8L01lbnVJdGVtPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8TWVudUl0ZW0gb25Ub3VjaFRhcD17ZSA9PiB0aGlzLmdvdG9QYWdlKCdzb25ncycpfT5DYW5jaW9uZXM8L01lbnVJdGVtPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvRHJhd2VyPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICB7c29uZ1BsYXllcn1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAge2N1cnJlbnRQYWdlfVxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvTXVpVGhlbWVQcm92aWRlcj5cclxuICAgICAgICApO1xyXG4gICAgfVxyXG59KTtcclxuXHJcblJlYWN0RG9tLnJlbmRlcihcclxuICAgIDxNYWluQXBwIC8+LFxyXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jvb3QnKVxyXG4pO1xyXG5cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vY29tcG9uZW50cy9NYWluQXBwLmpzIiwiLyohXG4gKiBEZXRlcm1pbmUgaWYgYW4gb2JqZWN0IGlzIGEgQnVmZmVyXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGZlcm9zc0BmZXJvc3Mub3JnPiA8aHR0cDovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cblxuLy8gVGhlIF9pc0J1ZmZlciBjaGVjayBpcyBmb3IgU2FmYXJpIDUtNyBzdXBwb3J0LCBiZWNhdXNlIGl0J3MgbWlzc2luZ1xuLy8gT2JqZWN0LnByb3RvdHlwZS5jb25zdHJ1Y3Rvci4gUmVtb3ZlIHRoaXMgZXZlbnR1YWxseVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiBvYmogIT0gbnVsbCAmJiAoaXNCdWZmZXIob2JqKSB8fCBpc1Nsb3dCdWZmZXIob2JqKSB8fCAhIW9iai5faXNCdWZmZXIpXG59XG5cbmZ1bmN0aW9uIGlzQnVmZmVyIChvYmopIHtcbiAgcmV0dXJuICEhb2JqLmNvbnN0cnVjdG9yICYmIHR5cGVvZiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIgPT09ICdmdW5jdGlvbicgJiYgb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyKG9iailcbn1cblxuLy8gRm9yIE5vZGUgdjAuMTAgc3VwcG9ydC4gUmVtb3ZlIHRoaXMgZXZlbnR1YWxseS5cbmZ1bmN0aW9uIGlzU2xvd0J1ZmZlciAob2JqKSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqLnJlYWRGbG9hdExFID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBvYmouc2xpY2UgPT09ICdmdW5jdGlvbicgJiYgaXNCdWZmZXIob2JqLnNsaWNlKDAsIDApKVxufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2lzLWJ1ZmZlci9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMjkyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qKlxuICogbG9kYXNoIChDdXN0b20gQnVpbGQpIDxodHRwczovL2xvZGFzaC5jb20vPlxuICogQnVpbGQ6IGBsb2Rhc2ggbW9kdWxhcml6ZSBleHBvcnRzPVwibnBtXCIgLW8gLi9gXG4gKiBDb3B5cmlnaHQgalF1ZXJ5IEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9ycyA8aHR0cHM6Ly9qcXVlcnkub3JnLz5cbiAqIFJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlIDxodHRwczovL2xvZGFzaC5jb20vbGljZW5zZT5cbiAqIEJhc2VkIG9uIFVuZGVyc2NvcmUuanMgMS44LjMgPGh0dHA6Ly91bmRlcnNjb3JlanMub3JnL0xJQ0VOU0U+XG4gKiBDb3B5cmlnaHQgSmVyZW15IEFzaGtlbmFzLCBEb2N1bWVudENsb3VkIGFuZCBJbnZlc3RpZ2F0aXZlIFJlcG9ydGVycyAmIEVkaXRvcnNcbiAqL1xuXG4vKiogVXNlZCBhcyB0aGUgYFR5cGVFcnJvcmAgbWVzc2FnZSBmb3IgXCJGdW5jdGlvbnNcIiBtZXRob2RzLiAqL1xudmFyIEZVTkNfRVJST1JfVEVYVCA9ICdFeHBlY3RlZCBhIGZ1bmN0aW9uJztcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgTkFOID0gMCAvIDA7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJztcblxuLyoqIFVzZWQgdG8gbWF0Y2ggbGVhZGluZyBhbmQgdHJhaWxpbmcgd2hpdGVzcGFjZS4gKi9cbnZhciByZVRyaW0gPSAvXlxccyt8XFxzKyQvZztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGJhZCBzaWduZWQgaGV4YWRlY2ltYWwgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUlzQmFkSGV4ID0gL15bLStdMHhbMC05YS1mXSskL2k7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBiaW5hcnkgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUlzQmluYXJ5ID0gL14wYlswMV0rJC9pO1xuXG4vKiogVXNlZCB0byBkZXRlY3Qgb2N0YWwgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUlzT2N0YWwgPSAvXjBvWzAtN10rJC9pO1xuXG4vKiogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgd2l0aG91dCBhIGRlcGVuZGVuY3kgb24gYHJvb3RgLiAqL1xudmFyIGZyZWVQYXJzZUludCA9IHBhcnNlSW50O1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGdsb2JhbGAgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xudmFyIGZyZWVTZWxmID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZiAmJiBzZWxmLk9iamVjdCA9PT0gT2JqZWN0ICYmIHNlbGY7XG5cbi8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xudmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBvYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlTWF4ID0gTWF0aC5tYXgsXG4gICAgbmF0aXZlTWluID0gTWF0aC5taW47XG5cbi8qKlxuICogR2V0cyB0aGUgdGltZXN0YW1wIG9mIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRoYXQgaGF2ZSBlbGFwc2VkIHNpbmNlXG4gKiB0aGUgVW5peCBlcG9jaCAoMSBKYW51YXJ5IDE5NzAgMDA6MDA6MDAgVVRDKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDIuNC4wXG4gKiBAY2F0ZWdvcnkgRGF0ZVxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgdGltZXN0YW1wLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmRlZmVyKGZ1bmN0aW9uKHN0YW1wKSB7XG4gKiAgIGNvbnNvbGUubG9nKF8ubm93KCkgLSBzdGFtcCk7XG4gKiB9LCBfLm5vdygpKTtcbiAqIC8vID0+IExvZ3MgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgaXQgdG9vayBmb3IgdGhlIGRlZmVycmVkIGludm9jYXRpb24uXG4gKi9cbnZhciBub3cgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHJvb3QuRGF0ZS5ub3coKTtcbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIGRlYm91bmNlZCBmdW5jdGlvbiB0aGF0IGRlbGF5cyBpbnZva2luZyBgZnVuY2AgdW50aWwgYWZ0ZXIgYHdhaXRgXG4gKiBtaWxsaXNlY29uZHMgaGF2ZSBlbGFwc2VkIHNpbmNlIHRoZSBsYXN0IHRpbWUgdGhlIGRlYm91bmNlZCBmdW5jdGlvbiB3YXNcbiAqIGludm9rZWQuIFRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gY29tZXMgd2l0aCBhIGBjYW5jZWxgIG1ldGhvZCB0byBjYW5jZWxcbiAqIGRlbGF5ZWQgYGZ1bmNgIGludm9jYXRpb25zIGFuZCBhIGBmbHVzaGAgbWV0aG9kIHRvIGltbWVkaWF0ZWx5IGludm9rZSB0aGVtLlxuICogUHJvdmlkZSBgb3B0aW9uc2AgdG8gaW5kaWNhdGUgd2hldGhlciBgZnVuY2Agc2hvdWxkIGJlIGludm9rZWQgb24gdGhlXG4gKiBsZWFkaW5nIGFuZC9vciB0cmFpbGluZyBlZGdlIG9mIHRoZSBgd2FpdGAgdGltZW91dC4gVGhlIGBmdW5jYCBpcyBpbnZva2VkXG4gKiB3aXRoIHRoZSBsYXN0IGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uLiBTdWJzZXF1ZW50XG4gKiBjYWxscyB0byB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIHJldHVybiB0aGUgcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYFxuICogaW52b2NhdGlvbi5cbiAqXG4gKiAqKk5vdGU6KiogSWYgYGxlYWRpbmdgIGFuZCBgdHJhaWxpbmdgIG9wdGlvbnMgYXJlIGB0cnVlYCwgYGZ1bmNgIGlzXG4gKiBpbnZva2VkIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0IG9ubHkgaWYgdGhlIGRlYm91bmNlZCBmdW5jdGlvblxuICogaXMgaW52b2tlZCBtb3JlIHRoYW4gb25jZSBkdXJpbmcgdGhlIGB3YWl0YCB0aW1lb3V0LlxuICpcbiAqIElmIGB3YWl0YCBpcyBgMGAgYW5kIGBsZWFkaW5nYCBpcyBgZmFsc2VgLCBgZnVuY2AgaW52b2NhdGlvbiBpcyBkZWZlcnJlZFxuICogdW50aWwgdG8gdGhlIG5leHQgdGljaywgc2ltaWxhciB0byBgc2V0VGltZW91dGAgd2l0aCBhIHRpbWVvdXQgb2YgYDBgLlxuICpcbiAqIFNlZSBbRGF2aWQgQ29yYmFjaG8ncyBhcnRpY2xlXShodHRwczovL2Nzcy10cmlja3MuY29tL2RlYm91bmNpbmctdGhyb3R0bGluZy1leHBsYWluZWQtZXhhbXBsZXMvKVxuICogZm9yIGRldGFpbHMgb3ZlciB0aGUgZGlmZmVyZW5jZXMgYmV0d2VlbiBgXy5kZWJvdW5jZWAgYW5kIGBfLnRocm90dGxlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlYm91bmNlLlxuICogQHBhcmFtIHtudW1iZXJ9IFt3YWl0PTBdIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5LlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmxlYWRpbmc9ZmFsc2VdXG4gKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgbGVhZGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1heFdhaXRdXG4gKiAgVGhlIG1heGltdW0gdGltZSBgZnVuY2AgaXMgYWxsb3dlZCB0byBiZSBkZWxheWVkIGJlZm9yZSBpdCdzIGludm9rZWQuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnRyYWlsaW5nPXRydWVdXG4gKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGRlYm91bmNlZCBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogLy8gQXZvaWQgY29zdGx5IGNhbGN1bGF0aW9ucyB3aGlsZSB0aGUgd2luZG93IHNpemUgaXMgaW4gZmx1eC5cbiAqIGpRdWVyeSh3aW5kb3cpLm9uKCdyZXNpemUnLCBfLmRlYm91bmNlKGNhbGN1bGF0ZUxheW91dCwgMTUwKSk7XG4gKlxuICogLy8gSW52b2tlIGBzZW5kTWFpbGAgd2hlbiBjbGlja2VkLCBkZWJvdW5jaW5nIHN1YnNlcXVlbnQgY2FsbHMuXG4gKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgXy5kZWJvdW5jZShzZW5kTWFpbCwgMzAwLCB7XG4gKiAgICdsZWFkaW5nJzogdHJ1ZSxcbiAqICAgJ3RyYWlsaW5nJzogZmFsc2VcbiAqIH0pKTtcbiAqXG4gKiAvLyBFbnN1cmUgYGJhdGNoTG9nYCBpcyBpbnZva2VkIG9uY2UgYWZ0ZXIgMSBzZWNvbmQgb2YgZGVib3VuY2VkIGNhbGxzLlxuICogdmFyIGRlYm91bmNlZCA9IF8uZGVib3VuY2UoYmF0Y2hMb2csIDI1MCwgeyAnbWF4V2FpdCc6IDEwMDAgfSk7XG4gKiB2YXIgc291cmNlID0gbmV3IEV2ZW50U291cmNlKCcvc3RyZWFtJyk7XG4gKiBqUXVlcnkoc291cmNlKS5vbignbWVzc2FnZScsIGRlYm91bmNlZCk7XG4gKlxuICogLy8gQ2FuY2VsIHRoZSB0cmFpbGluZyBkZWJvdW5jZWQgaW52b2NhdGlvbi5cbiAqIGpRdWVyeSh3aW5kb3cpLm9uKCdwb3BzdGF0ZScsIGRlYm91bmNlZC5jYW5jZWwpO1xuICovXG5mdW5jdGlvbiBkZWJvdW5jZShmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG4gIHZhciBsYXN0QXJncyxcbiAgICAgIGxhc3RUaGlzLFxuICAgICAgbWF4V2FpdCxcbiAgICAgIHJlc3VsdCxcbiAgICAgIHRpbWVySWQsXG4gICAgICBsYXN0Q2FsbFRpbWUsXG4gICAgICBsYXN0SW52b2tlVGltZSA9IDAsXG4gICAgICBsZWFkaW5nID0gZmFsc2UsXG4gICAgICBtYXhpbmcgPSBmYWxzZSxcbiAgICAgIHRyYWlsaW5nID0gdHJ1ZTtcblxuICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgfVxuICB3YWl0ID0gdG9OdW1iZXIod2FpdCkgfHwgMDtcbiAgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgbGVhZGluZyA9ICEhb3B0aW9ucy5sZWFkaW5nO1xuICAgIG1heGluZyA9ICdtYXhXYWl0JyBpbiBvcHRpb25zO1xuICAgIG1heFdhaXQgPSBtYXhpbmcgPyBuYXRpdmVNYXgodG9OdW1iZXIob3B0aW9ucy5tYXhXYWl0KSB8fCAwLCB3YWl0KSA6IG1heFdhaXQ7XG4gICAgdHJhaWxpbmcgPSAndHJhaWxpbmcnIGluIG9wdGlvbnMgPyAhIW9wdGlvbnMudHJhaWxpbmcgOiB0cmFpbGluZztcbiAgfVxuXG4gIGZ1bmN0aW9uIGludm9rZUZ1bmModGltZSkge1xuICAgIHZhciBhcmdzID0gbGFzdEFyZ3MsXG4gICAgICAgIHRoaXNBcmcgPSBsYXN0VGhpcztcblxuICAgIGxhc3RBcmdzID0gbGFzdFRoaXMgPSB1bmRlZmluZWQ7XG4gICAgbGFzdEludm9rZVRpbWUgPSB0aW1lO1xuICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxlYWRpbmdFZGdlKHRpbWUpIHtcbiAgICAvLyBSZXNldCBhbnkgYG1heFdhaXRgIHRpbWVyLlxuICAgIGxhc3RJbnZva2VUaW1lID0gdGltZTtcbiAgICAvLyBTdGFydCB0aGUgdGltZXIgZm9yIHRoZSB0cmFpbGluZyBlZGdlLlxuICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KHRpbWVyRXhwaXJlZCwgd2FpdCk7XG4gICAgLy8gSW52b2tlIHRoZSBsZWFkaW5nIGVkZ2UuXG4gICAgcmV0dXJuIGxlYWRpbmcgPyBpbnZva2VGdW5jKHRpbWUpIDogcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gcmVtYWluaW5nV2FpdCh0aW1lKSB7XG4gICAgdmFyIHRpbWVTaW5jZUxhc3RDYWxsID0gdGltZSAtIGxhc3RDYWxsVGltZSxcbiAgICAgICAgdGltZVNpbmNlTGFzdEludm9rZSA9IHRpbWUgLSBsYXN0SW52b2tlVGltZSxcbiAgICAgICAgcmVzdWx0ID0gd2FpdCAtIHRpbWVTaW5jZUxhc3RDYWxsO1xuXG4gICAgcmV0dXJuIG1heGluZyA/IG5hdGl2ZU1pbihyZXN1bHQsIG1heFdhaXQgLSB0aW1lU2luY2VMYXN0SW52b2tlKSA6IHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNob3VsZEludm9rZSh0aW1lKSB7XG4gICAgdmFyIHRpbWVTaW5jZUxhc3RDYWxsID0gdGltZSAtIGxhc3RDYWxsVGltZSxcbiAgICAgICAgdGltZVNpbmNlTGFzdEludm9rZSA9IHRpbWUgLSBsYXN0SW52b2tlVGltZTtcblxuICAgIC8vIEVpdGhlciB0aGlzIGlzIHRoZSBmaXJzdCBjYWxsLCBhY3Rpdml0eSBoYXMgc3RvcHBlZCBhbmQgd2UncmUgYXQgdGhlXG4gICAgLy8gdHJhaWxpbmcgZWRnZSwgdGhlIHN5c3RlbSB0aW1lIGhhcyBnb25lIGJhY2t3YXJkcyBhbmQgd2UncmUgdHJlYXRpbmdcbiAgICAvLyBpdCBhcyB0aGUgdHJhaWxpbmcgZWRnZSwgb3Igd2UndmUgaGl0IHRoZSBgbWF4V2FpdGAgbGltaXQuXG4gICAgcmV0dXJuIChsYXN0Q2FsbFRpbWUgPT09IHVuZGVmaW5lZCB8fCAodGltZVNpbmNlTGFzdENhbGwgPj0gd2FpdCkgfHxcbiAgICAgICh0aW1lU2luY2VMYXN0Q2FsbCA8IDApIHx8IChtYXhpbmcgJiYgdGltZVNpbmNlTGFzdEludm9rZSA+PSBtYXhXYWl0KSk7XG4gIH1cblxuICBmdW5jdGlvbiB0aW1lckV4cGlyZWQoKSB7XG4gICAgdmFyIHRpbWUgPSBub3coKTtcbiAgICBpZiAoc2hvdWxkSW52b2tlKHRpbWUpKSB7XG4gICAgICByZXR1cm4gdHJhaWxpbmdFZGdlKHRpbWUpO1xuICAgIH1cbiAgICAvLyBSZXN0YXJ0IHRoZSB0aW1lci5cbiAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHJlbWFpbmluZ1dhaXQodGltZSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhaWxpbmdFZGdlKHRpbWUpIHtcbiAgICB0aW1lcklkID0gdW5kZWZpbmVkO1xuXG4gICAgLy8gT25seSBpbnZva2UgaWYgd2UgaGF2ZSBgbGFzdEFyZ3NgIHdoaWNoIG1lYW5zIGBmdW5jYCBoYXMgYmVlblxuICAgIC8vIGRlYm91bmNlZCBhdCBsZWFzdCBvbmNlLlxuICAgIGlmICh0cmFpbGluZyAmJiBsYXN0QXJncykge1xuICAgICAgcmV0dXJuIGludm9rZUZ1bmModGltZSk7XG4gICAgfVxuICAgIGxhc3RBcmdzID0gbGFzdFRoaXMgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbmNlbCgpIHtcbiAgICBpZiAodGltZXJJZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZXJJZCk7XG4gICAgfVxuICAgIGxhc3RJbnZva2VUaW1lID0gMDtcbiAgICBsYXN0QXJncyA9IGxhc3RDYWxsVGltZSA9IGxhc3RUaGlzID0gdGltZXJJZCA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZsdXNoKCkge1xuICAgIHJldHVybiB0aW1lcklkID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiB0cmFpbGluZ0VkZ2Uobm93KCkpO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVib3VuY2VkKCkge1xuICAgIHZhciB0aW1lID0gbm93KCksXG4gICAgICAgIGlzSW52b2tpbmcgPSBzaG91bGRJbnZva2UodGltZSk7XG5cbiAgICBsYXN0QXJncyA9IGFyZ3VtZW50cztcbiAgICBsYXN0VGhpcyA9IHRoaXM7XG4gICAgbGFzdENhbGxUaW1lID0gdGltZTtcblxuICAgIGlmIChpc0ludm9raW5nKSB7XG4gICAgICBpZiAodGltZXJJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBsZWFkaW5nRWRnZShsYXN0Q2FsbFRpbWUpO1xuICAgICAgfVxuICAgICAgaWYgKG1heGluZykge1xuICAgICAgICAvLyBIYW5kbGUgaW52b2NhdGlvbnMgaW4gYSB0aWdodCBsb29wLlxuICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgICAgICByZXR1cm4gaW52b2tlRnVuYyhsYXN0Q2FsbFRpbWUpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodGltZXJJZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGRlYm91bmNlZC5jYW5jZWwgPSBjYW5jZWw7XG4gIGRlYm91bmNlZC5mbHVzaCA9IGZsdXNoO1xuICByZXR1cm4gZGVib3VuY2VkO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSB0aHJvdHRsZWQgZnVuY3Rpb24gdGhhdCBvbmx5IGludm9rZXMgYGZ1bmNgIGF0IG1vc3Qgb25jZSBwZXJcbiAqIGV2ZXJ5IGB3YWl0YCBtaWxsaXNlY29uZHMuIFRoZSB0aHJvdHRsZWQgZnVuY3Rpb24gY29tZXMgd2l0aCBhIGBjYW5jZWxgXG4gKiBtZXRob2QgdG8gY2FuY2VsIGRlbGF5ZWQgYGZ1bmNgIGludm9jYXRpb25zIGFuZCBhIGBmbHVzaGAgbWV0aG9kIHRvXG4gKiBpbW1lZGlhdGVseSBpbnZva2UgdGhlbS4gUHJvdmlkZSBgb3B0aW9uc2AgdG8gaW5kaWNhdGUgd2hldGhlciBgZnVuY2BcbiAqIHNob3VsZCBiZSBpbnZva2VkIG9uIHRoZSBsZWFkaW5nIGFuZC9vciB0cmFpbGluZyBlZGdlIG9mIHRoZSBgd2FpdGBcbiAqIHRpbWVvdXQuIFRoZSBgZnVuY2AgaXMgaW52b2tlZCB3aXRoIHRoZSBsYXN0IGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGVcbiAqIHRocm90dGxlZCBmdW5jdGlvbi4gU3Vic2VxdWVudCBjYWxscyB0byB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uIHJldHVybiB0aGVcbiAqIHJlc3VsdCBvZiB0aGUgbGFzdCBgZnVuY2AgaW52b2NhdGlvbi5cbiAqXG4gKiAqKk5vdGU6KiogSWYgYGxlYWRpbmdgIGFuZCBgdHJhaWxpbmdgIG9wdGlvbnMgYXJlIGB0cnVlYCwgYGZ1bmNgIGlzXG4gKiBpbnZva2VkIG9uIHRoZSB0cmFpbGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0IG9ubHkgaWYgdGhlIHRocm90dGxlZCBmdW5jdGlvblxuICogaXMgaW52b2tlZCBtb3JlIHRoYW4gb25jZSBkdXJpbmcgdGhlIGB3YWl0YCB0aW1lb3V0LlxuICpcbiAqIElmIGB3YWl0YCBpcyBgMGAgYW5kIGBsZWFkaW5nYCBpcyBgZmFsc2VgLCBgZnVuY2AgaW52b2NhdGlvbiBpcyBkZWZlcnJlZFxuICogdW50aWwgdG8gdGhlIG5leHQgdGljaywgc2ltaWxhciB0byBgc2V0VGltZW91dGAgd2l0aCBhIHRpbWVvdXQgb2YgYDBgLlxuICpcbiAqIFNlZSBbRGF2aWQgQ29yYmFjaG8ncyBhcnRpY2xlXShodHRwczovL2Nzcy10cmlja3MuY29tL2RlYm91bmNpbmctdGhyb3R0bGluZy1leHBsYWluZWQtZXhhbXBsZXMvKVxuICogZm9yIGRldGFpbHMgb3ZlciB0aGUgZGlmZmVyZW5jZXMgYmV0d2VlbiBgXy50aHJvdHRsZWAgYW5kIGBfLmRlYm91bmNlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHRocm90dGxlLlxuICogQHBhcmFtIHtudW1iZXJ9IFt3YWl0PTBdIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIHRocm90dGxlIGludm9jYXRpb25zIHRvLlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmxlYWRpbmc9dHJ1ZV1cbiAqICBTcGVjaWZ5IGludm9raW5nIG9uIHRoZSBsZWFkaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnRyYWlsaW5nPXRydWVdXG4gKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHRocm90dGxlZCBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogLy8gQXZvaWQgZXhjZXNzaXZlbHkgdXBkYXRpbmcgdGhlIHBvc2l0aW9uIHdoaWxlIHNjcm9sbGluZy5cbiAqIGpRdWVyeSh3aW5kb3cpLm9uKCdzY3JvbGwnLCBfLnRocm90dGxlKHVwZGF0ZVBvc2l0aW9uLCAxMDApKTtcbiAqXG4gKiAvLyBJbnZva2UgYHJlbmV3VG9rZW5gIHdoZW4gdGhlIGNsaWNrIGV2ZW50IGlzIGZpcmVkLCBidXQgbm90IG1vcmUgdGhhbiBvbmNlIGV2ZXJ5IDUgbWludXRlcy5cbiAqIHZhciB0aHJvdHRsZWQgPSBfLnRocm90dGxlKHJlbmV3VG9rZW4sIDMwMDAwMCwgeyAndHJhaWxpbmcnOiBmYWxzZSB9KTtcbiAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCB0aHJvdHRsZWQpO1xuICpcbiAqIC8vIENhbmNlbCB0aGUgdHJhaWxpbmcgdGhyb3R0bGVkIGludm9jYXRpb24uXG4gKiBqUXVlcnkod2luZG93KS5vbigncG9wc3RhdGUnLCB0aHJvdHRsZWQuY2FuY2VsKTtcbiAqL1xuZnVuY3Rpb24gdGhyb3R0bGUoZnVuYywgd2FpdCwgb3B0aW9ucykge1xuICB2YXIgbGVhZGluZyA9IHRydWUsXG4gICAgICB0cmFpbGluZyA9IHRydWU7XG5cbiAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gIH1cbiAgaWYgKGlzT2JqZWN0KG9wdGlvbnMpKSB7XG4gICAgbGVhZGluZyA9ICdsZWFkaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLmxlYWRpbmcgOiBsZWFkaW5nO1xuICAgIHRyYWlsaW5nID0gJ3RyYWlsaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gIH1cbiAgcmV0dXJuIGRlYm91bmNlKGZ1bmMsIHdhaXQsIHtcbiAgICAnbGVhZGluZyc6IGxlYWRpbmcsXG4gICAgJ21heFdhaXQnOiB3YWl0LFxuICAgICd0cmFpbGluZyc6IHRyYWlsaW5nXG4gIH0pO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZVxuICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKVxuICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0KHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChfLm5vb3ApO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuICEhdmFsdWUgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gISF2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTeW1ib2xgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzeW1ib2wsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1N5bWJvbChTeW1ib2wuaXRlcmF0b3IpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNTeW1ib2woJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTeW1ib2wodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3ltYm9sJyB8fFxuICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIG9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpID09IHN5bWJvbFRhZyk7XG59XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIG51bWJlci5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG51bWJlci5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50b051bWJlcigzLjIpO1xuICogLy8gPT4gMy4yXG4gKlxuICogXy50b051bWJlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAqIC8vID0+IDVlLTMyNFxuICpcbiAqIF8udG9OdW1iZXIoSW5maW5pdHkpO1xuICogLy8gPT4gSW5maW5pdHlcbiAqXG4gKiBfLnRvTnVtYmVyKCczLjInKTtcbiAqIC8vID0+IDMuMlxuICovXG5mdW5jdGlvbiB0b051bWJlcih2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gTkFOO1xuICB9XG4gIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICB2YXIgb3RoZXIgPSB0eXBlb2YgdmFsdWUudmFsdWVPZiA9PSAnZnVuY3Rpb24nID8gdmFsdWUudmFsdWVPZigpIDogdmFsdWU7XG4gICAgdmFsdWUgPSBpc09iamVjdChvdGhlcikgPyAob3RoZXIgKyAnJykgOiBvdGhlcjtcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSAwID8gdmFsdWUgOiArdmFsdWU7XG4gIH1cbiAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKHJlVHJpbSwgJycpO1xuICB2YXIgaXNCaW5hcnkgPSByZUlzQmluYXJ5LnRlc3QodmFsdWUpO1xuICByZXR1cm4gKGlzQmluYXJ5IHx8IHJlSXNPY3RhbC50ZXN0KHZhbHVlKSlcbiAgICA/IGZyZWVQYXJzZUludCh2YWx1ZS5zbGljZSgyKSwgaXNCaW5hcnkgPyAyIDogOClcbiAgICA6IChyZUlzQmFkSGV4LnRlc3QodmFsdWUpID8gTkFOIDogK3ZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0aHJvdHRsZTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9sb2Rhc2gudGhyb3R0bGUvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDI5NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcycpO1xuXG52YXIgX2V4dGVuZHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXh0ZW5kczIpO1xuXG52YXIgX2tleXMgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2tleXMnKTtcblxudmFyIF9rZXlzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2tleXMpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllcycpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMik7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2YnKTtcblxudmFyIF9nZXRQcm90b3R5cGVPZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRQcm90b3R5cGVPZik7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKTtcblxudmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yKTtcblxudmFyIF9pbmhlcml0czIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnKTtcblxudmFyIF9pbmhlcml0czMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbmhlcml0czIpO1xuXG5leHBvcnRzLmdldFN0eWxlcyA9IGdldFN0eWxlcztcblxudmFyIF9zaW1wbGVBc3NpZ24gPSByZXF1aXJlKCdzaW1wbGUtYXNzaWduJyk7XG5cbnZhciBfc2ltcGxlQXNzaWduMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NpbXBsZUFzc2lnbik7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfSWNvbkJ1dHRvbiA9IHJlcXVpcmUoJy4uL0ljb25CdXR0b24nKTtcblxudmFyIF9JY29uQnV0dG9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0ljb25CdXR0b24pO1xuXG52YXIgX21lbnUgPSByZXF1aXJlKCcuLi9zdmctaWNvbnMvbmF2aWdhdGlvbi9tZW51Jyk7XG5cbnZhciBfbWVudTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tZW51KTtcblxudmFyIF9QYXBlciA9IHJlcXVpcmUoJy4uL1BhcGVyJyk7XG5cbnZhciBfUGFwZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUGFwZXIpO1xuXG52YXIgX3Byb3BUeXBlczMgPSByZXF1aXJlKCcuLi91dGlscy9wcm9wVHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXM0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzMyk7XG5cbnZhciBfd2FybmluZyA9IHJlcXVpcmUoJ3dhcm5pbmcnKTtcblxudmFyIF93YXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dhcm5pbmcpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBnZXRTdHlsZXMocHJvcHMsIGNvbnRleHQpIHtcbiAgdmFyIF9jb250ZXh0JG11aVRoZW1lID0gY29udGV4dC5tdWlUaGVtZSxcbiAgICAgIGFwcEJhciA9IF9jb250ZXh0JG11aVRoZW1lLmFwcEJhcixcbiAgICAgIGljb25CdXR0b25TaXplID0gX2NvbnRleHQkbXVpVGhlbWUuYnV0dG9uLmljb25CdXR0b25TaXplLFxuICAgICAgekluZGV4ID0gX2NvbnRleHQkbXVpVGhlbWUuekluZGV4O1xuXG5cbiAgdmFyIGZsYXRCdXR0b25TaXplID0gMzY7XG5cbiAgdmFyIHN0eWxlcyA9IHtcbiAgICByb290OiB7XG4gICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgIHpJbmRleDogekluZGV4LmFwcEJhcixcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IGFwcEJhci5jb2xvcixcbiAgICAgIHBhZGRpbmdMZWZ0OiBhcHBCYXIucGFkZGluZyxcbiAgICAgIHBhZGRpbmdSaWdodDogYXBwQmFyLnBhZGRpbmdcbiAgICB9LFxuICAgIHRpdGxlOiB7XG4gICAgICB3aGl0ZVNwYWNlOiAnbm93cmFwJyxcbiAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgIHRleHRPdmVyZmxvdzogJ2VsbGlwc2lzJyxcbiAgICAgIG1hcmdpbjogMCxcbiAgICAgIHBhZGRpbmdUb3A6IDAsXG4gICAgICBsZXR0ZXJTcGFjaW5nOiAwLFxuICAgICAgZm9udFNpemU6IDI0LFxuICAgICAgZm9udFdlaWdodDogYXBwQmFyLnRpdGxlRm9udFdlaWdodCxcbiAgICAgIGNvbG9yOiBhcHBCYXIudGV4dENvbG9yLFxuICAgICAgaGVpZ2h0OiBhcHBCYXIuaGVpZ2h0LFxuICAgICAgbGluZUhlaWdodDogYXBwQmFyLmhlaWdodCArICdweCdcbiAgICB9LFxuICAgIG1haW5FbGVtZW50OiB7XG4gICAgICBib3hGbGV4OiAxLFxuICAgICAgZmxleDogJzEnXG4gICAgfSxcbiAgICBpY29uQnV0dG9uU3R5bGU6IHtcbiAgICAgIG1hcmdpblRvcDogKGFwcEJhci5oZWlnaHQgLSBpY29uQnV0dG9uU2l6ZSkgLyAyLFxuICAgICAgbWFyZ2luUmlnaHQ6IDgsXG4gICAgICBtYXJnaW5MZWZ0OiAtMTZcbiAgICB9LFxuICAgIGljb25CdXR0b25JY29uU3R5bGU6IHtcbiAgICAgIGZpbGw6IGFwcEJhci50ZXh0Q29sb3IsXG4gICAgICBjb2xvcjogYXBwQmFyLnRleHRDb2xvclxuICAgIH0sXG4gICAgZmxhdEJ1dHRvbjoge1xuICAgICAgY29sb3I6IGFwcEJhci50ZXh0Q29sb3IsXG4gICAgICBtYXJnaW5Ub3A6IChpY29uQnV0dG9uU2l6ZSAtIGZsYXRCdXR0b25TaXplKSAvIDIgKyAxXG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBzdHlsZXM7XG59XG5cbnZhciBBcHBCYXIgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzMy5kZWZhdWx0KShBcHBCYXIsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEFwcEJhcigpIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBBcHBCYXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zLmRlZmF1bHQpKHRoaXMsIChfcmVmID0gQXBwQmFyLl9fcHJvdG9fXyB8fCAoMCwgX2dldFByb3RvdHlwZU9mMi5kZWZhdWx0KShBcHBCYXIpKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5oYW5kbGVUb3VjaFRhcExlZnRJY29uQnV0dG9uID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBpZiAoX3RoaXMucHJvcHMub25MZWZ0SWNvbkJ1dHRvblRvdWNoVGFwKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uTGVmdEljb25CdXR0b25Ub3VjaFRhcChldmVudCk7XG4gICAgICB9XG4gICAgfSwgX3RoaXMuaGFuZGxlVG91Y2hUYXBSaWdodEljb25CdXR0b24gPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vblJpZ2h0SWNvbkJ1dHRvblRvdWNoVGFwKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uUmlnaHRJY29uQnV0dG9uVG91Y2hUYXAoZXZlbnQpO1xuICAgICAgfVxuICAgIH0sIF90aGlzLmhhbmRsZVRpdGxlVG91Y2hUYXAgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vblRpdGxlVG91Y2hUYXApIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25UaXRsZVRvdWNoVGFwKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9LCBfdGVtcCksICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMuZGVmYXVsdCkoX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoQXBwQmFyLCBbe1xuICAgIGtleTogJ2NvbXBvbmVudERpZE1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKCF0aGlzLnByb3BzLmljb25FbGVtZW50TGVmdCB8fCAhdGhpcy5wcm9wcy5pY29uQ2xhc3NOYW1lTGVmdCwgJ01hdGVyaWFsLVVJOiBQcm9wZXJ0aWVzIGljb25FbGVtZW50TGVmdFxcbiAgICAgIGFuZCBpY29uQ2xhc3NOYW1lTGVmdCBjYW5ub3QgYmUgc2ltdWx0YW5lb3VzbHkgZGVmaW5lZC4gUGxlYXNlIHVzZSBvbmUgb3IgdGhlIG90aGVyLicpIDogdm9pZCAwO1xuXG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKCF0aGlzLnByb3BzLmljb25FbGVtZW50UmlnaHQgfHwgIXRoaXMucHJvcHMuaWNvbkNsYXNzTmFtZVJpZ2h0LCAnTWF0ZXJpYWwtVUk6IFByb3BlcnRpZXMgaWNvbkVsZW1lbnRSaWdodFxcbiAgICAgIGFuZCBpY29uQ2xhc3NOYW1lUmlnaHQgY2Fubm90IGJlIHNpbXVsdGFuZW91c2x5IGRlZmluZWQuIFBsZWFzZSB1c2Ugb25lIG9yIHRoZSBvdGhlci4nKSA6IHZvaWQgMDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICB0aXRsZSA9IF9wcm9wcy50aXRsZSxcbiAgICAgICAgICB0aXRsZVN0eWxlID0gX3Byb3BzLnRpdGxlU3R5bGUsXG4gICAgICAgICAgaWNvblN0eWxlTGVmdCA9IF9wcm9wcy5pY29uU3R5bGVMZWZ0LFxuICAgICAgICAgIGljb25TdHlsZVJpZ2h0ID0gX3Byb3BzLmljb25TdHlsZVJpZ2h0LFxuICAgICAgICAgIG9uVGl0bGVUb3VjaFRhcCA9IF9wcm9wcy5vblRpdGxlVG91Y2hUYXAsXG4gICAgICAgICAgc2hvd01lbnVJY29uQnV0dG9uID0gX3Byb3BzLnNob3dNZW51SWNvbkJ1dHRvbixcbiAgICAgICAgICBpY29uRWxlbWVudExlZnQgPSBfcHJvcHMuaWNvbkVsZW1lbnRMZWZ0LFxuICAgICAgICAgIGljb25FbGVtZW50UmlnaHQgPSBfcHJvcHMuaWNvbkVsZW1lbnRSaWdodCxcbiAgICAgICAgICBpY29uQ2xhc3NOYW1lTGVmdCA9IF9wcm9wcy5pY29uQ2xhc3NOYW1lTGVmdCxcbiAgICAgICAgICBpY29uQ2xhc3NOYW1lUmlnaHQgPSBfcHJvcHMuaWNvbkNsYXNzTmFtZVJpZ2h0LFxuICAgICAgICAgIG9uTGVmdEljb25CdXR0b25Ub3VjaFRhcCA9IF9wcm9wcy5vbkxlZnRJY29uQnV0dG9uVG91Y2hUYXAsXG4gICAgICAgICAgb25SaWdodEljb25CdXR0b25Ub3VjaFRhcCA9IF9wcm9wcy5vblJpZ2h0SWNvbkJ1dHRvblRvdWNoVGFwLFxuICAgICAgICAgIGNsYXNzTmFtZSA9IF9wcm9wcy5jbGFzc05hbWUsXG4gICAgICAgICAgc3R5bGUgPSBfcHJvcHMuc3R5bGUsXG4gICAgICAgICAgekRlcHRoID0gX3Byb3BzLnpEZXB0aCxcbiAgICAgICAgICBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbixcbiAgICAgICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMzLmRlZmF1bHQpKF9wcm9wcywgWyd0aXRsZScsICd0aXRsZVN0eWxlJywgJ2ljb25TdHlsZUxlZnQnLCAnaWNvblN0eWxlUmlnaHQnLCAnb25UaXRsZVRvdWNoVGFwJywgJ3Nob3dNZW51SWNvbkJ1dHRvbicsICdpY29uRWxlbWVudExlZnQnLCAnaWNvbkVsZW1lbnRSaWdodCcsICdpY29uQ2xhc3NOYW1lTGVmdCcsICdpY29uQ2xhc3NOYW1lUmlnaHQnLCAnb25MZWZ0SWNvbkJ1dHRvblRvdWNoVGFwJywgJ29uUmlnaHRJY29uQnV0dG9uVG91Y2hUYXAnLCAnY2xhc3NOYW1lJywgJ3N0eWxlJywgJ3pEZXB0aCcsICdjaGlsZHJlbiddKTtcbiAgICAgIHZhciBwcmVwYXJlU3R5bGVzID0gdGhpcy5jb250ZXh0Lm11aVRoZW1lLnByZXBhcmVTdHlsZXM7XG5cbiAgICAgIHZhciBzdHlsZXMgPSBnZXRTdHlsZXModGhpcy5wcm9wcywgdGhpcy5jb250ZXh0KTtcblxuICAgICAgdmFyIG1lbnVFbGVtZW50TGVmdCA9IHZvaWQgMDtcbiAgICAgIHZhciBtZW51RWxlbWVudFJpZ2h0ID0gdm9pZCAwO1xuXG4gICAgICAvLyBJZiB0aGUgdGl0bGUgaXMgYSBzdHJpbmcsIHdyYXAgaW4gYW4gaDEgdGFnLlxuICAgICAgLy8gSWYgbm90LCB3cmFwIGluIGEgZGl2IHRhZy5cbiAgICAgIHZhciB0aXRsZUNvbXBvbmVudCA9IHR5cGVvZiB0aXRsZSA9PT0gJ3N0cmluZycgfHwgdGl0bGUgaW5zdGFuY2VvZiBTdHJpbmcgPyAnaDEnIDogJ2Rpdic7XG5cbiAgICAgIHZhciB0aXRsZUVsZW1lbnQgPSBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCh0aXRsZUNvbXBvbmVudCwge1xuICAgICAgICBvblRvdWNoVGFwOiB0aGlzLmhhbmRsZVRpdGxlVG91Y2hUYXAsXG4gICAgICAgIHN0eWxlOiBwcmVwYXJlU3R5bGVzKCgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KShzdHlsZXMudGl0bGUsIHN0eWxlcy5tYWluRWxlbWVudCwgdGl0bGVTdHlsZSkpXG4gICAgICB9LCB0aXRsZSk7XG5cbiAgICAgIHZhciBpY29uTGVmdFN0eWxlID0gKDAsIF9zaW1wbGVBc3NpZ24yLmRlZmF1bHQpKHt9LCBzdHlsZXMuaWNvbkJ1dHRvblN0eWxlLCBpY29uU3R5bGVMZWZ0KTtcblxuICAgICAgaWYgKHNob3dNZW51SWNvbkJ1dHRvbikge1xuICAgICAgICBpZiAoaWNvbkVsZW1lbnRMZWZ0KSB7XG4gICAgICAgICAgdmFyIGljb25FbGVtZW50TGVmdFByb3BzID0ge307XG5cbiAgICAgICAgICBpZiAoaWNvbkVsZW1lbnRMZWZ0LnR5cGUubXVpTmFtZSA9PT0gJ0ljb25CdXR0b24nKSB7XG4gICAgICAgICAgICB2YXIgaWNvbkVsZW1MZWZ0Q2hpbGRyZW4gPSBpY29uRWxlbWVudExlZnQucHJvcHMuY2hpbGRyZW47XG4gICAgICAgICAgICB2YXIgaWNvbkJ1dHRvbkljb25TdHlsZSA9ICEoaWNvbkVsZW1MZWZ0Q2hpbGRyZW4gJiYgaWNvbkVsZW1MZWZ0Q2hpbGRyZW4ucHJvcHMgJiYgaWNvbkVsZW1MZWZ0Q2hpbGRyZW4ucHJvcHMuY29sb3IpID8gc3R5bGVzLmljb25CdXR0b25JY29uU3R5bGUgOiBudWxsO1xuXG4gICAgICAgICAgICBpY29uRWxlbWVudExlZnRQcm9wcy5pY29uU3R5bGUgPSAoMCwgX3NpbXBsZUFzc2lnbjIuZGVmYXVsdCkoe30sIGljb25CdXR0b25JY29uU3R5bGUsIGljb25FbGVtZW50TGVmdC5wcm9wcy5pY29uU3R5bGUpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghaWNvbkVsZW1lbnRMZWZ0LnByb3BzLm9uVG91Y2hUYXAgJiYgdGhpcy5wcm9wcy5vbkxlZnRJY29uQnV0dG9uVG91Y2hUYXApIHtcbiAgICAgICAgICAgIGljb25FbGVtZW50TGVmdFByb3BzLm9uVG91Y2hUYXAgPSB0aGlzLmhhbmRsZVRvdWNoVGFwTGVmdEljb25CdXR0b247XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbWVudUVsZW1lbnRMZWZ0ID0gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgIHsgc3R5bGU6IHByZXBhcmVTdHlsZXMoaWNvbkxlZnRTdHlsZSkgfSxcbiAgICAgICAgICAgICgwLCBfa2V5czIuZGVmYXVsdCkoaWNvbkVsZW1lbnRMZWZ0UHJvcHMpLmxlbmd0aCA+IDAgPyAoMCwgX3JlYWN0LmNsb25lRWxlbWVudCkoaWNvbkVsZW1lbnRMZWZ0LCBpY29uRWxlbWVudExlZnRQcm9wcykgOiBpY29uRWxlbWVudExlZnRcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1lbnVFbGVtZW50TGVmdCA9IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgX0ljb25CdXR0b24yLmRlZmF1bHQsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHN0eWxlOiBpY29uTGVmdFN0eWxlLFxuICAgICAgICAgICAgICBpY29uU3R5bGU6IHN0eWxlcy5pY29uQnV0dG9uSWNvblN0eWxlLFxuICAgICAgICAgICAgICBpY29uQ2xhc3NOYW1lOiBpY29uQ2xhc3NOYW1lTGVmdCxcbiAgICAgICAgICAgICAgb25Ub3VjaFRhcDogdGhpcy5oYW5kbGVUb3VjaFRhcExlZnRJY29uQnV0dG9uXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaWNvbkNsYXNzTmFtZUxlZnQgPyAnJyA6IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9tZW51Mi5kZWZhdWx0LCB7IHN0eWxlOiAoMCwgX3NpbXBsZUFzc2lnbjIuZGVmYXVsdCkoe30sIHN0eWxlcy5pY29uQnV0dG9uSWNvblN0eWxlKSB9KVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIGljb25SaWdodFN0eWxlID0gKDAsIF9zaW1wbGVBc3NpZ24yLmRlZmF1bHQpKHt9LCBzdHlsZXMuaWNvbkJ1dHRvblN0eWxlLCB7XG4gICAgICAgIG1hcmdpblJpZ2h0OiAtMTYsXG4gICAgICAgIG1hcmdpbkxlZnQ6ICdhdXRvJ1xuICAgICAgfSwgaWNvblN0eWxlUmlnaHQpO1xuXG4gICAgICBpZiAoaWNvbkVsZW1lbnRSaWdodCkge1xuICAgICAgICB2YXIgaWNvbkVsZW1lbnRSaWdodFByb3BzID0ge307XG5cbiAgICAgICAgc3dpdGNoIChpY29uRWxlbWVudFJpZ2h0LnR5cGUubXVpTmFtZSkge1xuICAgICAgICAgIGNhc2UgJ0ljb25NZW51JzpcbiAgICAgICAgICBjYXNlICdJY29uQnV0dG9uJzpcbiAgICAgICAgICAgIHZhciBpY29uRWxlbVJpZ2h0Q2hpbGRyZW4gPSBpY29uRWxlbWVudFJpZ2h0LnByb3BzLmNoaWxkcmVuO1xuICAgICAgICAgICAgdmFyIF9pY29uQnV0dG9uSWNvblN0eWxlID0gIShpY29uRWxlbVJpZ2h0Q2hpbGRyZW4gJiYgaWNvbkVsZW1SaWdodENoaWxkcmVuLnByb3BzICYmIGljb25FbGVtUmlnaHRDaGlsZHJlbi5wcm9wcy5jb2xvcikgPyBzdHlsZXMuaWNvbkJ1dHRvbkljb25TdHlsZSA6IG51bGw7XG5cbiAgICAgICAgICAgIGljb25FbGVtZW50UmlnaHRQcm9wcy5pY29uU3R5bGUgPSAoMCwgX3NpbXBsZUFzc2lnbjIuZGVmYXVsdCkoe30sIF9pY29uQnV0dG9uSWNvblN0eWxlLCBpY29uRWxlbWVudFJpZ2h0LnByb3BzLmljb25TdHlsZSk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgJ0ZsYXRCdXR0b24nOlxuICAgICAgICAgICAgaWNvbkVsZW1lbnRSaWdodFByb3BzLnN0eWxlID0gKDAsIF9zaW1wbGVBc3NpZ24yLmRlZmF1bHQpKHt9LCBzdHlsZXMuZmxhdEJ1dHRvbiwgaWNvbkVsZW1lbnRSaWdodC5wcm9wcy5zdHlsZSk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWljb25FbGVtZW50UmlnaHQucHJvcHMub25Ub3VjaFRhcCAmJiB0aGlzLnByb3BzLm9uUmlnaHRJY29uQnV0dG9uVG91Y2hUYXApIHtcbiAgICAgICAgICBpY29uRWxlbWVudFJpZ2h0UHJvcHMub25Ub3VjaFRhcCA9IHRoaXMuaGFuZGxlVG91Y2hUYXBSaWdodEljb25CdXR0b247XG4gICAgICAgIH1cblxuICAgICAgICBtZW51RWxlbWVudFJpZ2h0ID0gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBzdHlsZTogcHJlcGFyZVN0eWxlcyhpY29uUmlnaHRTdHlsZSkgfSxcbiAgICAgICAgICAoMCwgX2tleXMyLmRlZmF1bHQpKGljb25FbGVtZW50UmlnaHRQcm9wcykubGVuZ3RoID4gMCA/ICgwLCBfcmVhY3QuY2xvbmVFbGVtZW50KShpY29uRWxlbWVudFJpZ2h0LCBpY29uRWxlbWVudFJpZ2h0UHJvcHMpIDogaWNvbkVsZW1lbnRSaWdodFxuICAgICAgICApO1xuICAgICAgfSBlbHNlIGlmIChpY29uQ2xhc3NOYW1lUmlnaHQpIHtcbiAgICAgICAgbWVudUVsZW1lbnRSaWdodCA9IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9JY29uQnV0dG9uMi5kZWZhdWx0LCB7XG4gICAgICAgICAgc3R5bGU6IGljb25SaWdodFN0eWxlLFxuICAgICAgICAgIGljb25TdHlsZTogc3R5bGVzLmljb25CdXR0b25JY29uU3R5bGUsXG4gICAgICAgICAgaWNvbkNsYXNzTmFtZTogaWNvbkNsYXNzTmFtZVJpZ2h0LFxuICAgICAgICAgIG9uVG91Y2hUYXA6IHRoaXMuaGFuZGxlVG91Y2hUYXBSaWdodEljb25CdXR0b25cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgX1BhcGVyMi5kZWZhdWx0LFxuICAgICAgICAoMCwgX2V4dGVuZHMzLmRlZmF1bHQpKHt9LCBvdGhlciwge1xuICAgICAgICAgIHJvdW5kZWQ6IGZhbHNlLFxuICAgICAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgICAgICAgIHN0eWxlOiAoMCwgX3NpbXBsZUFzc2lnbjIuZGVmYXVsdCkoe30sIHN0eWxlcy5yb290LCBzdHlsZSksXG4gICAgICAgICAgekRlcHRoOiB6RGVwdGhcbiAgICAgICAgfSksXG4gICAgICAgIG1lbnVFbGVtZW50TGVmdCxcbiAgICAgICAgdGl0bGVFbGVtZW50LFxuICAgICAgICBtZW51RWxlbWVudFJpZ2h0LFxuICAgICAgICBjaGlsZHJlblxuICAgICAgKTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIEFwcEJhcjtcbn0oX3JlYWN0LkNvbXBvbmVudCk7XG5cbkFwcEJhci5tdWlOYW1lID0gJ0FwcEJhcic7XG5BcHBCYXIuZGVmYXVsdFByb3BzID0ge1xuICBzaG93TWVudUljb25CdXR0b246IHRydWUsXG4gIHRpdGxlOiAnJyxcbiAgekRlcHRoOiAxXG59O1xuQXBwQmFyLmNvbnRleHRUeXBlcyA9IHtcbiAgbXVpVGhlbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWRcbn07XG5BcHBCYXIucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogQ2FuIGJlIHVzZWQgdG8gcmVuZGVyIGEgdGFiIGluc2lkZSBhbiBhcHAgYmFyIGZvciBpbnN0YW5jZS5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm5vZGUsXG4gIC8qKlxuICAgKiBBcHBsaWVkIHRvIHRoZSBhcHAgYmFyJ3Mgcm9vdCBlbGVtZW50LlxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBjbGFzc25hbWUgb2YgdGhlIGljb24gb24gdGhlIGxlZnQgb2YgdGhlIGFwcCBiYXIuXG4gICAqIElmIHlvdSBhcmUgdXNpbmcgYSBzdHlsZXNoZWV0IGZvciB5b3VyIGljb25zLCBlbnRlciB0aGUgY2xhc3MgbmFtZSBmb3IgdGhlIGljb24gdG8gYmUgdXNlZCBoZXJlLlxuICAgKi9cbiAgaWNvbkNsYXNzTmFtZUxlZnQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICAvKipcbiAgICogU2ltaWxpYXIgdG8gdGhlIGljb25DbGFzc05hbWVMZWZ0IHByb3AgZXhjZXB0IHRoYXRcbiAgICogaXQgYXBwbGllcyB0byB0aGUgaWNvbiBkaXNwbGF5ZWQgb24gdGhlIHJpZ2h0IG9mIHRoZSBhcHAgYmFyLlxuICAgKi9cbiAgaWNvbkNsYXNzTmFtZVJpZ2h0OiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBjdXN0b20gZWxlbWVudCB0byBiZSBkaXNwbGF5ZWQgb24gdGhlIGxlZnQgc2lkZSBvZiB0aGVcbiAgICogYXBwIGJhciBzdWNoIGFzIGFuIFN2Z0ljb24uXG4gICAqL1xuICBpY29uRWxlbWVudExlZnQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZWxlbWVudCxcbiAgLyoqXG4gICAqIFNpbWlsaWFyIHRvIHRoZSBpY29uRWxlbWVudExlZnQgcHJvcCBleGNlcHQgdGhhdCB0aGlzIGVsZW1lbnQgaXMgZGlzcGxheWVkIG9uIHRoZSByaWdodCBvZiB0aGUgYXBwIGJhci5cbiAgICovXG4gIGljb25FbGVtZW50UmlnaHQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZWxlbWVudCxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRoZSBpbmxpbmUtc3R5bGVzIG9mIHRoZSBlbGVtZW50IGRpc3BsYXllZCBvbiB0aGUgbGVmdCBzaWRlIG9mIHRoZSBhcHAgYmFyLlxuICAgKi9cbiAgaWNvblN0eWxlTGVmdDogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsXG4gIC8qKlxuICAgKiBPdmVycmlkZSB0aGUgaW5saW5lLXN0eWxlcyBvZiB0aGUgZWxlbWVudCBkaXNwbGF5ZWQgb24gdGhlIHJpZ2h0IHNpZGUgb2YgdGhlIGFwcCBiYXIuXG4gICAqL1xuICBpY29uU3R5bGVSaWdodDogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmdW5jdGlvbiBmb3Igd2hlbiB0aGUgbGVmdCBpY29uIGlzIHNlbGVjdGVkIHZpYSBhIHRvdWNoIHRhcC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRvdWNoVGFwIGV2ZW50IHRhcmdldGluZyB0aGUgbGVmdCBgSWNvbkJ1dHRvbmAuXG4gICAqL1xuICBvbkxlZnRJY29uQnV0dG9uVG91Y2hUYXA6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgLyoqXG4gICAqIENhbGxiYWNrIGZ1bmN0aW9uIGZvciB3aGVuIHRoZSByaWdodCBpY29uIGlzIHNlbGVjdGVkIHZpYSBhIHRvdWNoIHRhcC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRvdWNoVGFwIGV2ZW50IHRhcmdldGluZyB0aGUgcmlnaHQgYEljb25CdXR0b25gLlxuICAgKi9cbiAgb25SaWdodEljb25CdXR0b25Ub3VjaFRhcDogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZnVuY3Rpb24gZm9yIHdoZW4gdGhlIHRpdGxlIHRleHQgaXMgc2VsZWN0ZWQgdmlhIGEgdG91Y2ggdGFwLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVG91Y2hUYXAgZXZlbnQgdGFyZ2V0aW5nIHRoZSBgdGl0bGVgIG5vZGUuXG4gICAqL1xuICBvblRpdGxlVG91Y2hUYXA6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgLyoqXG4gICAqIERldGVybWluZXMgd2hldGhlciBvciBub3QgdG8gZGlzcGxheSB0aGUgTWVudSBpY29uIG5leHQgdG8gdGhlIHRpdGxlLlxuICAgKiBTZXR0aW5nIHRoaXMgcHJvcCB0byBmYWxzZSB3aWxsIGhpZGUgdGhlIGljb24uXG4gICAqL1xuICBzaG93TWVudUljb25CdXR0b246IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRoZSBpbmxpbmUtc3R5bGVzIG9mIHRoZSByb290IGVsZW1lbnQuXG4gICAqL1xuICBzdHlsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsXG4gIC8qKlxuICAgKiBUaGUgdGl0bGUgdG8gZGlzcGxheSBvbiB0aGUgYXBwIGJhci5cbiAgICovXG4gIHRpdGxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm5vZGUsXG4gIC8qKlxuICAgKiBPdmVycmlkZSB0aGUgaW5saW5lLXN0eWxlcyBvZiB0aGUgYXBwIGJhcidzIHRpdGxlIGVsZW1lbnQuXG4gICAqL1xuICB0aXRsZVN0eWxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCxcbiAgLyoqXG4gICAqIFRoZSB6RGVwdGggb2YgdGhlIGNvbXBvbmVudC5cbiAgICogVGhlIHNoYWRvdyBvZiB0aGUgYXBwIGJhciBpcyBhbHNvIGRlcGVuZGVudCBvbiB0aGlzIHByb3BlcnR5LlxuICAgKi9cbiAgekRlcHRoOiBfcHJvcFR5cGVzNC5kZWZhdWx0LnpEZXB0aFxufSA6IHt9O1xuZXhwb3J0cy5kZWZhdWx0ID0gQXBwQmFyO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9tYXRlcmlhbC11aS9BcHBCYXIvQXBwQmFyLmpzXG4vLyBtb2R1bGUgaWQgPSAyOTVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2dldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mJyk7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0UHJvdG90eXBlT2YpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7XG5cbnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJyk7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMik7XG5cbnZhciBfaW5oZXJpdHMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJyk7XG5cbnZhciBfaW5oZXJpdHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5oZXJpdHMyKTtcblxudmFyIF9zaW1wbGVBc3NpZ24gPSByZXF1aXJlKCdzaW1wbGUtYXNzaWduJyk7XG5cbnZhciBfc2ltcGxlQXNzaWduMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NpbXBsZUFzc2lnbik7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfcmVhY3REb20gPSByZXF1aXJlKCdyZWFjdC1kb20nKTtcblxudmFyIF9yZWFjdERvbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdERvbSk7XG5cbnZhciBfcmVhY3RFdmVudExpc3RlbmVyID0gcmVxdWlyZSgncmVhY3QtZXZlbnQtbGlzdGVuZXInKTtcblxudmFyIF9yZWFjdEV2ZW50TGlzdGVuZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3RFdmVudExpc3RlbmVyKTtcblxudmFyIF9rZXljb2RlID0gcmVxdWlyZSgna2V5Y29kZScpO1xuXG52YXIgX2tleWNvZGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfa2V5Y29kZSk7XG5cbnZhciBfYXV0b1ByZWZpeCA9IHJlcXVpcmUoJy4uL3V0aWxzL2F1dG9QcmVmaXgnKTtcblxudmFyIF9hdXRvUHJlZml4MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2F1dG9QcmVmaXgpO1xuXG52YXIgX3RyYW5zaXRpb25zID0gcmVxdWlyZSgnLi4vc3R5bGVzL3RyYW5zaXRpb25zJyk7XG5cbnZhciBfdHJhbnNpdGlvbnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHJhbnNpdGlvbnMpO1xuXG52YXIgX092ZXJsYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbC9PdmVybGF5Jyk7XG5cbnZhciBfT3ZlcmxheTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9PdmVybGF5KTtcblxudmFyIF9QYXBlciA9IHJlcXVpcmUoJy4uL1BhcGVyJyk7XG5cbnZhciBfUGFwZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUGFwZXIpO1xuXG52YXIgX3Byb3BUeXBlczMgPSByZXF1aXJlKCcuLi91dGlscy9wcm9wVHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXM0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzMyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBvcGVuTmF2RXZlbnRIYW5kbGVyID0gbnVsbDtcblxudmFyIERyYXdlciA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHMzLmRlZmF1bHQpKERyYXdlciwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gRHJhd2VyKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIERyYXdlcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9ICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMuZGVmYXVsdCkodGhpcywgKF9yZWYgPSBEcmF3ZXIuX19wcm90b19fIHx8ICgwLCBfZ2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKERyYXdlcikpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLmhhbmRsZVRvdWNoVGFwT3ZlcmxheSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIF90aGlzLmNsb3NlKCdjbGlja2F3YXknKTtcbiAgICB9LCBfdGhpcy5oYW5kbGVLZXlVcCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKF90aGlzLnN0YXRlLm9wZW4gJiYgIV90aGlzLnByb3BzLmRvY2tlZCAmJiAoMCwgX2tleWNvZGUyLmRlZmF1bHQpKGV2ZW50KSA9PT0gJ2VzYycpIHtcbiAgICAgICAgX3RoaXMuY2xvc2UoJ2VzY2FwZScpO1xuICAgICAgfVxuICAgIH0sIF90aGlzLm9uQm9keVRvdWNoU3RhcnQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHZhciBzd2lwZUFyZWFXaWR0aCA9IF90aGlzLnByb3BzLnN3aXBlQXJlYVdpZHRoO1xuXG4gICAgICB2YXIgdG91Y2hTdGFydFggPSBfdGhpcy5jb250ZXh0Lm11aVRoZW1lLmlzUnRsID8gZG9jdW1lbnQuYm9keS5vZmZzZXRXaWR0aCAtIGV2ZW50LnRvdWNoZXNbMF0ucGFnZVggOiBldmVudC50b3VjaGVzWzBdLnBhZ2VYO1xuICAgICAgdmFyIHRvdWNoU3RhcnRZID0gZXZlbnQudG91Y2hlc1swXS5wYWdlWTtcblxuICAgICAgLy8gT3BlbiBvbmx5IGlmIHN3aXBpbmcgZnJvbSBmYXIgbGVmdCAob3IgcmlnaHQpIHdoaWxlIGNsb3NlZFxuICAgICAgaWYgKHN3aXBlQXJlYVdpZHRoICE9PSBudWxsICYmICFfdGhpcy5zdGF0ZS5vcGVuKSB7XG4gICAgICAgIGlmIChfdGhpcy5wcm9wcy5vcGVuU2Vjb25kYXJ5KSB7XG4gICAgICAgICAgLy8gSWYgb3BlblNlY29uZGFyeSBpcyB0cnVlIGNhbGN1bGF0ZSBmcm9tIHRoZSBmYXIgcmlnaHRcbiAgICAgICAgICBpZiAodG91Y2hTdGFydFggPCBkb2N1bWVudC5ib2R5Lm9mZnNldFdpZHRoIC0gc3dpcGVBcmVhV2lkdGgpIHJldHVybjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBJZiBvcGVuU2Vjb25kYXJ5IGlzIGZhbHNlIGNhbGN1bGF0ZSBmcm9tIHRoZSBmYXIgbGVmdFxuICAgICAgICAgIGlmICh0b3VjaFN0YXJ0WCA+IHN3aXBlQXJlYVdpZHRoKSByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCFfdGhpcy5zdGF0ZS5vcGVuICYmIChvcGVuTmF2RXZlbnRIYW5kbGVyICE9PSBfdGhpcy5vbkJvZHlUb3VjaFN0YXJ0IHx8IF90aGlzLnByb3BzLmRpc2FibGVTd2lwZVRvT3BlbikpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5tYXliZVN3aXBpbmcgPSB0cnVlO1xuICAgICAgX3RoaXMudG91Y2hTdGFydFggPSB0b3VjaFN0YXJ0WDtcbiAgICAgIF90aGlzLnRvdWNoU3RhcnRZID0gdG91Y2hTdGFydFk7XG5cbiAgICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgX3RoaXMub25Cb2R5VG91Y2hNb3ZlKTtcbiAgICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCBfdGhpcy5vbkJvZHlUb3VjaEVuZCk7XG4gICAgICBkb2N1bWVudC5ib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoY2FuY2VsJywgX3RoaXMub25Cb2R5VG91Y2hFbmQpO1xuICAgIH0sIF90aGlzLm9uQm9keVRvdWNoTW92ZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgdmFyIGN1cnJlbnRYID0gX3RoaXMuY29udGV4dC5tdWlUaGVtZS5pc1J0bCA/IGRvY3VtZW50LmJvZHkub2Zmc2V0V2lkdGggLSBldmVudC50b3VjaGVzWzBdLnBhZ2VYIDogZXZlbnQudG91Y2hlc1swXS5wYWdlWDtcbiAgICAgIHZhciBjdXJyZW50WSA9IGV2ZW50LnRvdWNoZXNbMF0ucGFnZVk7XG5cbiAgICAgIGlmIChfdGhpcy5zdGF0ZS5zd2lwaW5nKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIF90aGlzLnNldFBvc2l0aW9uKF90aGlzLmdldFRyYW5zbGF0ZVgoY3VycmVudFgpKTtcbiAgICAgIH0gZWxzZSBpZiAoX3RoaXMubWF5YmVTd2lwaW5nKSB7XG4gICAgICAgIHZhciBkWEFicyA9IE1hdGguYWJzKGN1cnJlbnRYIC0gX3RoaXMudG91Y2hTdGFydFgpO1xuICAgICAgICB2YXIgZFlBYnMgPSBNYXRoLmFicyhjdXJyZW50WSAtIF90aGlzLnRvdWNoU3RhcnRZKTtcbiAgICAgICAgLy8gSWYgdGhlIHVzZXIgaGFzIG1vdmVkIGhpcyB0aHVtYiB0ZW4gcGl4ZWxzIGluIGVpdGhlciBkaXJlY3Rpb24sXG4gICAgICAgIC8vIHdlIGNhbiBzYWZlbHkgbWFrZSBhbiBhc3N1bXB0aW9uIGFib3V0IHdoZXRoZXIgaGUgd2FzIGludGVuZGluZ1xuICAgICAgICAvLyB0byBzd2lwZSBvciBzY3JvbGwuXG4gICAgICAgIHZhciB0aHJlc2hvbGQgPSAxMDtcblxuICAgICAgICBpZiAoZFhBYnMgPiB0aHJlc2hvbGQgJiYgZFlBYnMgPD0gdGhyZXNob2xkKSB7XG4gICAgICAgICAgX3RoaXMuc3dpcGVTdGFydFggPSBjdXJyZW50WDtcbiAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBzd2lwaW5nOiBfdGhpcy5zdGF0ZS5vcGVuID8gJ2Nsb3NpbmcnIDogJ29wZW5pbmcnXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgX3RoaXMuc2V0UG9zaXRpb24oX3RoaXMuZ2V0VHJhbnNsYXRlWChjdXJyZW50WCkpO1xuICAgICAgICB9IGVsc2UgaWYgKGRYQWJzIDw9IHRocmVzaG9sZCAmJiBkWUFicyA+IHRocmVzaG9sZCkge1xuICAgICAgICAgIF90aGlzLm9uQm9keVRvdWNoRW5kKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCBfdGhpcy5vbkJvZHlUb3VjaEVuZCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKF90aGlzLnN0YXRlLnN3aXBpbmcpIHtcbiAgICAgICAgdmFyIGN1cnJlbnRYID0gX3RoaXMuY29udGV4dC5tdWlUaGVtZS5pc1J0bCA/IGRvY3VtZW50LmJvZHkub2Zmc2V0V2lkdGggLSBldmVudC5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWCA6IGV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VYO1xuICAgICAgICB2YXIgdHJhbnNsYXRlUmF0aW8gPSBfdGhpcy5nZXRUcmFuc2xhdGVYKGN1cnJlbnRYKSAvIF90aGlzLmdldE1heFRyYW5zbGF0ZVgoKTtcblxuICAgICAgICBfdGhpcy5tYXliZVN3aXBpbmcgPSBmYWxzZTtcbiAgICAgICAgdmFyIHN3aXBpbmcgPSBfdGhpcy5zdGF0ZS5zd2lwaW5nO1xuICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgc3dpcGluZzogbnVsbFxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBXZSBoYXZlIHRvIG9wZW4gb3IgY2xvc2UgYWZ0ZXIgc2V0dGluZyBzd2lwaW5nIHRvIG51bGwsXG4gICAgICAgIC8vIGJlY2F1c2Ugb25seSB0aGVuIENTUyB0cmFuc2l0aW9uIGlzIGVuYWJsZWQuXG4gICAgICAgIGlmICh0cmFuc2xhdGVSYXRpbyA+IDAuNSkge1xuICAgICAgICAgIGlmIChzd2lwaW5nID09PSAnb3BlbmluZycpIHtcbiAgICAgICAgICAgIF90aGlzLnNldFBvc2l0aW9uKF90aGlzLmdldE1heFRyYW5zbGF0ZVgoKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF90aGlzLmNsb3NlKCdzd2lwZScpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoc3dpcGluZyA9PT0gJ29wZW5pbmcnKSB7XG4gICAgICAgICAgICBfdGhpcy5vcGVuKCdzd2lwZScpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfdGhpcy5zZXRQb3NpdGlvbigwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF90aGlzLm1heWJlU3dpcGluZyA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBfdGhpcy5yZW1vdmVCb2R5VG91Y2hMaXN0ZW5lcnMoKTtcbiAgICB9LCBfdGVtcCksICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMuZGVmYXVsdCkoX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoRHJhd2VyLCBbe1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxNb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICAgIHRoaXMubWF5YmVTd2lwaW5nID0gZmFsc2U7XG4gICAgICB0aGlzLnRvdWNoU3RhcnRYID0gbnVsbDtcbiAgICAgIHRoaXMudG91Y2hTdGFydFkgPSBudWxsO1xuICAgICAgdGhpcy5zd2lwZVN0YXJ0WCA9IG51bGw7XG5cbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBvcGVuOiB0aGlzLnByb3BzLm9wZW4gIT09IG51bGwgPyB0aGlzLnByb3BzLm9wZW4gOiB0aGlzLnByb3BzLmRvY2tlZCxcbiAgICAgICAgc3dpcGluZzogbnVsbFxuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50RGlkTW91bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHRoaXMuZW5hYmxlU3dpcGVIYW5kbGluZygpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgLy8gSWYgY29udHJvbGxlZCB0aGVuIHRoZSBvcGVuIHByb3AgdGFrZXMgcHJlY2VkZW5jZS5cbiAgICAgIGlmIChuZXh0UHJvcHMub3BlbiAhPT0gbnVsbCkge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBvcGVuOiBuZXh0UHJvcHMub3BlblxuICAgICAgICB9KTtcbiAgICAgICAgLy8gT3RoZXJ3aXNlLCBpZiBkb2NrZWQgaXMgY2hhbmdlZCwgY2hhbmdlIHRoZSBvcGVuIHN0YXRlIGZvciB3aGVuIHVuY29udHJvbGxlZC5cbiAgICAgIH0gZWxzZSBpZiAodGhpcy5wcm9wcy5kb2NrZWQgIT09IG5leHRQcm9wcy5kb2NrZWQpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgb3BlbjogbmV4dFByb3BzLmRvY2tlZFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnREaWRVcGRhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgICB0aGlzLmVuYWJsZVN3aXBlSGFuZGxpbmcoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsVW5tb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgdGhpcy5kaXNhYmxlU3dpcGVIYW5kbGluZygpO1xuICAgICAgdGhpcy5yZW1vdmVCb2R5VG91Y2hMaXN0ZW5lcnMoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRTdHlsZXMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTdHlsZXMoKSB7XG4gICAgICB2YXIgbXVpVGhlbWUgPSB0aGlzLmNvbnRleHQubXVpVGhlbWU7XG4gICAgICB2YXIgdGhlbWUgPSBtdWlUaGVtZS5kcmF3ZXI7XG5cbiAgICAgIHZhciB4ID0gdGhpcy5nZXRUcmFuc2xhdGVNdWx0aXBsaWVyKCkgKiAodGhpcy5zdGF0ZS5vcGVuID8gMCA6IHRoaXMuZ2V0TWF4VHJhbnNsYXRlWCgpKTtcblxuICAgICAgdmFyIHN0eWxlcyA9IHtcbiAgICAgICAgcm9vdDoge1xuICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgIHdpZHRoOiB0aGlzLmdldFRyYW5zbGF0ZWRXaWR0aCgpIHx8IHRoZW1lLndpZHRoLFxuICAgICAgICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgICAgICAgIHpJbmRleDogbXVpVGhlbWUuekluZGV4LmRyYXdlcixcbiAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoJyArIHggKyAncHgsIDApJyxcbiAgICAgICAgICB0cmFuc2l0aW9uOiAhdGhpcy5zdGF0ZS5zd2lwaW5nICYmIF90cmFuc2l0aW9uczIuZGVmYXVsdC5lYXNlT3V0KG51bGwsICd0cmFuc2Zvcm0nLCBudWxsKSxcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLmNvbG9yLFxuICAgICAgICAgIG92ZXJmbG93OiAnYXV0bycsXG4gICAgICAgICAgV2Via2l0T3ZlcmZsb3dTY3JvbGxpbmc6ICd0b3VjaCcgLy8gaU9TIG1vbWVudHVtIHNjcm9sbGluZ1xuICAgICAgICB9LFxuICAgICAgICBvdmVybGF5OiB7XG4gICAgICAgICAgekluZGV4OiBtdWlUaGVtZS56SW5kZXguZHJhd2VyT3ZlcmxheSxcbiAgICAgICAgICBwb2ludGVyRXZlbnRzOiB0aGlzLnN0YXRlLm9wZW4gPyAnYXV0bycgOiAnbm9uZScgLy8gQnlwYXNzIG1vdXNlIGV2ZW50cyB3aGVuIGxlZnQgbmF2IGlzIGNsb3NpbmcuXG4gICAgICAgIH0sXG4gICAgICAgIHJvb3RXaGVuT3BlblJpZ2h0OiB7XG4gICAgICAgICAgbGVmdDogJ2F1dG8nLFxuICAgICAgICAgIHJpZ2h0OiAwXG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBzdHlsZXM7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2hvdWxkU2hvdycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNob3VsZFNob3coKSB7XG4gICAgICByZXR1cm4gdGhpcy5zdGF0ZS5vcGVuIHx8ICEhdGhpcy5zdGF0ZS5zd2lwaW5nOyAvLyBjb21wb25lbnQgaXMgc3dpcGluZ1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2Nsb3NlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2xvc2UocmVhc29uKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy5vcGVuID09PSBudWxsKSB0aGlzLnNldFN0YXRlKHsgb3BlbjogZmFsc2UgfSk7XG4gICAgICBpZiAodGhpcy5wcm9wcy5vblJlcXVlc3RDaGFuZ2UpIHRoaXMucHJvcHMub25SZXF1ZXN0Q2hhbmdlKGZhbHNlLCByZWFzb24pO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnb3BlbicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG9wZW4ocmVhc29uKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy5vcGVuID09PSBudWxsKSB0aGlzLnNldFN0YXRlKHsgb3BlbjogdHJ1ZSB9KTtcbiAgICAgIGlmICh0aGlzLnByb3BzLm9uUmVxdWVzdENoYW5nZSkgdGhpcy5wcm9wcy5vblJlcXVlc3RDaGFuZ2UodHJ1ZSwgcmVhc29uKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldFRyYW5zbGF0ZWRXaWR0aCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFRyYW5zbGF0ZWRXaWR0aCgpIHtcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5wcm9wcy53aWR0aCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKCEvXlxcZCsoXFwuXFxkKyk/JSQvLnRlc3QodGhpcy5wcm9wcy53aWR0aCkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBhIHZhbGlkIHBlcmNlbnRhZ2UgZm9ybWF0LicpO1xuICAgICAgICB9XG4gICAgICAgIHZhciB3aWR0aCA9IHBhcnNlRmxvYXQodGhpcy5wcm9wcy53aWR0aCkgLyAxMDAuMDtcbiAgICAgICAgLy8gV2UgYXJlIGRvaW5nIG91ciBiZXN0IG9uIHRoZSBTZXJ2ZXIgdG8gcmVuZGVyIGEgY29uc2lzdGVudCBVSSwgaGVuY2UgdGhlXG4gICAgICAgIC8vIGRlZmF1bHQgdmFsdWUgb2YgMTAwMDBcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2lkdGggKiB3aW5kb3cuaW5uZXJXaWR0aCA6IDEwMDAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMud2lkdGg7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0TWF4VHJhbnNsYXRlWCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldE1heFRyYW5zbGF0ZVgoKSB7XG4gICAgICB2YXIgd2lkdGggPSB0aGlzLmdldFRyYW5zbGF0ZWRXaWR0aCgpIHx8IHRoaXMuY29udGV4dC5tdWlUaGVtZS5kcmF3ZXIud2lkdGg7XG4gICAgICByZXR1cm4gd2lkdGggKyAxMDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRUcmFuc2xhdGVNdWx0aXBsaWVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VHJhbnNsYXRlTXVsdGlwbGllcigpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLm9wZW5TZWNvbmRhcnkgPyAxIDogLTE7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZW5hYmxlU3dpcGVIYW5kbGluZycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVuYWJsZVN3aXBlSGFuZGxpbmcoKSB7XG4gICAgICBpZiAoIXRoaXMucHJvcHMuZG9ja2VkKSB7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIHRoaXMub25Cb2R5VG91Y2hTdGFydCk7XG4gICAgICAgIGlmICghb3Blbk5hdkV2ZW50SGFuZGxlcikge1xuICAgICAgICAgIG9wZW5OYXZFdmVudEhhbmRsZXIgPSB0aGlzLm9uQm9keVRvdWNoU3RhcnQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZGlzYWJsZVN3aXBlSGFuZGxpbmcoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdkaXNhYmxlU3dpcGVIYW5kbGluZycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRpc2FibGVTd2lwZUhhbmRsaW5nKCkge1xuICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5vbkJvZHlUb3VjaFN0YXJ0KTtcbiAgICAgIGlmIChvcGVuTmF2RXZlbnRIYW5kbGVyID09PSB0aGlzLm9uQm9keVRvdWNoU3RhcnQpIHtcbiAgICAgICAgb3Blbk5hdkV2ZW50SGFuZGxlciA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVtb3ZlQm9keVRvdWNoTGlzdGVuZXJzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlQm9keVRvdWNoTGlzdGVuZXJzKCkge1xuICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCB0aGlzLm9uQm9keVRvdWNoTW92ZSk7XG4gICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgdGhpcy5vbkJvZHlUb3VjaEVuZCk7XG4gICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoY2FuY2VsJywgdGhpcy5vbkJvZHlUb3VjaEVuZCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2V0UG9zaXRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRQb3NpdGlvbih0cmFuc2xhdGVYKSB7XG4gICAgICB2YXIgcnRsVHJhbnNsYXRlTXVsdGlwbGllciA9IHRoaXMuY29udGV4dC5tdWlUaGVtZS5pc1J0bCA/IC0xIDogMTtcbiAgICAgIHZhciBkcmF3ZXIgPSBfcmVhY3REb20yLmRlZmF1bHQuZmluZERPTU5vZGUodGhpcy5yZWZzLmNsaWNrQXdheWFibGVFbGVtZW50KTtcbiAgICAgIHZhciB0cmFuc2Zvcm1DU1MgPSAndHJhbnNsYXRlKCcgKyB0aGlzLmdldFRyYW5zbGF0ZU11bHRpcGxpZXIoKSAqIHJ0bFRyYW5zbGF0ZU11bHRpcGxpZXIgKiB0cmFuc2xhdGVYICsgJ3B4LCAwKSc7XG4gICAgICB0aGlzLnJlZnMub3ZlcmxheS5zZXRPcGFjaXR5KDEgLSB0cmFuc2xhdGVYIC8gdGhpcy5nZXRNYXhUcmFuc2xhdGVYKCkpO1xuICAgICAgX2F1dG9QcmVmaXgyLmRlZmF1bHQuc2V0KGRyYXdlci5zdHlsZSwgJ3RyYW5zZm9ybScsIHRyYW5zZm9ybUNTUyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0VHJhbnNsYXRlWCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFRyYW5zbGF0ZVgoY3VycmVudFgpIHtcbiAgICAgIHJldHVybiBNYXRoLm1pbihNYXRoLm1heCh0aGlzLnN0YXRlLnN3aXBpbmcgPT09ICdjbG9zaW5nJyA/IHRoaXMuZ2V0VHJhbnNsYXRlTXVsdGlwbGllcigpICogKGN1cnJlbnRYIC0gdGhpcy5zd2lwZVN0YXJ0WCkgOiB0aGlzLmdldE1heFRyYW5zbGF0ZVgoKSAtIHRoaXMuZ2V0VHJhbnNsYXRlTXVsdGlwbGllcigpICogKHRoaXMuc3dpcGVTdGFydFggLSBjdXJyZW50WCksIDApLCB0aGlzLmdldE1heFRyYW5zbGF0ZVgoKSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgY2xhc3NOYW1lID0gX3Byb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgICBjb250YWluZXJDbGFzc05hbWUgPSBfcHJvcHMuY29udGFpbmVyQ2xhc3NOYW1lLFxuICAgICAgICAgIGNvbnRhaW5lclN0eWxlID0gX3Byb3BzLmNvbnRhaW5lclN0eWxlLFxuICAgICAgICAgIGRvY2tlZCA9IF9wcm9wcy5kb2NrZWQsXG4gICAgICAgICAgb3BlblNlY29uZGFyeSA9IF9wcm9wcy5vcGVuU2Vjb25kYXJ5LFxuICAgICAgICAgIG92ZXJsYXlDbGFzc05hbWUgPSBfcHJvcHMub3ZlcmxheUNsYXNzTmFtZSxcbiAgICAgICAgICBvdmVybGF5U3R5bGUgPSBfcHJvcHMub3ZlcmxheVN0eWxlLFxuICAgICAgICAgIHN0eWxlID0gX3Byb3BzLnN0eWxlLFxuICAgICAgICAgIHpEZXB0aCA9IF9wcm9wcy56RGVwdGg7XG5cblxuICAgICAgdmFyIHN0eWxlcyA9IHRoaXMuZ2V0U3R5bGVzKCk7XG5cbiAgICAgIHZhciBvdmVybGF5ID0gdm9pZCAwO1xuICAgICAgaWYgKCFkb2NrZWQpIHtcbiAgICAgICAgb3ZlcmxheSA9IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9PdmVybGF5Mi5kZWZhdWx0LCB7XG4gICAgICAgICAgcmVmOiAnb3ZlcmxheScsXG4gICAgICAgICAgc2hvdzogdGhpcy5zaG91bGRTaG93KCksXG4gICAgICAgICAgY2xhc3NOYW1lOiBvdmVybGF5Q2xhc3NOYW1lLFxuICAgICAgICAgIHN0eWxlOiAoMCwgX3NpbXBsZUFzc2lnbjIuZGVmYXVsdCkoc3R5bGVzLm92ZXJsYXksIG92ZXJsYXlTdHlsZSksXG4gICAgICAgICAgdHJhbnNpdGlvbkVuYWJsZWQ6ICF0aGlzLnN0YXRlLnN3aXBpbmcsXG4gICAgICAgICAgb25Ub3VjaFRhcDogdGhpcy5oYW5kbGVUb3VjaFRhcE92ZXJsYXlcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHtcbiAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZSxcbiAgICAgICAgICBzdHlsZTogc3R5bGVcbiAgICAgICAgfSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0RXZlbnRMaXN0ZW5lcjIuZGVmYXVsdCwgeyB0YXJnZXQ6ICd3aW5kb3cnLCBvbktleVVwOiB0aGlzLmhhbmRsZUtleVVwIH0pLFxuICAgICAgICBvdmVybGF5LFxuICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBfUGFwZXIyLmRlZmF1bHQsXG4gICAgICAgICAge1xuICAgICAgICAgICAgcmVmOiAnY2xpY2tBd2F5YWJsZUVsZW1lbnQnLFxuICAgICAgICAgICAgekRlcHRoOiB6RGVwdGgsXG4gICAgICAgICAgICByb3VuZGVkOiBmYWxzZSxcbiAgICAgICAgICAgIHRyYW5zaXRpb25FbmFibGVkOiAhdGhpcy5zdGF0ZS5zd2lwaW5nLFxuICAgICAgICAgICAgY2xhc3NOYW1lOiBjb250YWluZXJDbGFzc05hbWUsXG4gICAgICAgICAgICBzdHlsZTogKDAsIF9zaW1wbGVBc3NpZ24yLmRlZmF1bHQpKHN0eWxlcy5yb290LCBvcGVuU2Vjb25kYXJ5ICYmIHN0eWxlcy5yb290V2hlbk9wZW5SaWdodCwgY29udGFpbmVyU3R5bGUpXG4gICAgICAgICAgfSxcbiAgICAgICAgICBjaGlsZHJlblxuICAgICAgICApXG4gICAgICApO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gRHJhd2VyO1xufShfcmVhY3QuQ29tcG9uZW50KTtcblxuRHJhd2VyLmRlZmF1bHRQcm9wcyA9IHtcbiAgZGlzYWJsZVN3aXBlVG9PcGVuOiBmYWxzZSxcbiAgZG9ja2VkOiB0cnVlLFxuICBvcGVuOiBudWxsLFxuICBvcGVuU2Vjb25kYXJ5OiBmYWxzZSxcbiAgc3dpcGVBcmVhV2lkdGg6IDMwLFxuICB3aWR0aDogbnVsbCxcbiAgekRlcHRoOiAyXG59O1xuRHJhd2VyLmNvbnRleHRUeXBlcyA9IHtcbiAgbXVpVGhlbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LmlzUmVxdWlyZWRcbn07XG5EcmF3ZXIucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogVGhlIGNvbnRlbnRzIG9mIHRoZSBgRHJhd2VyYFxuICAgKi9cbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMyLmRlZmF1bHQubm9kZSxcbiAgLyoqXG4gICAqIFRoZSBDU1MgY2xhc3MgbmFtZSBvZiB0aGUgcm9vdCBlbGVtZW50LlxuICAgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgLyoqXG4gICAqIFRoZSBDU1MgY2xhc3MgbmFtZSBvZiB0aGUgY29udGFpbmVyIGVsZW1lbnQuXG4gICAqL1xuICBjb250YWluZXJDbGFzc05hbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICAvKipcbiAgICogT3ZlcnJpZGUgdGhlIGlubGluZS1zdHlsZXMgb2YgdGhlIGNvbnRhaW5lciBlbGVtZW50LlxuICAgKi9cbiAgY29udGFpbmVyU3R5bGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LFxuICAvKipcbiAgICogSWYgdHJ1ZSwgc3dpcGluZyBzaWRld2F5cyB3aGVuIHRoZSBgRHJhd2VyYCBpcyBjbG9zZWQgd2lsbCBub3Qgb3BlbiBpdC5cbiAgICovXG4gIGRpc2FibGVTd2lwZVRvT3BlbjogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAvKipcbiAgICogSWYgdHJ1ZSwgdGhlIGBEcmF3ZXJgIHdpbGwgYmUgZG9ja2VkLiBJbiB0aGlzIHN0YXRlLCB0aGUgb3ZlcmxheSB3b24ndCBzaG93IGFuZFxuICAgKiBjbGlja2luZyBvbiBhIG1lbnUgaXRlbSB3aWxsIG5vdCBjbG9zZSB0aGUgYERyYXdlcmAuXG4gICAqL1xuICBkb2NrZWQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgLyoqXG4gICAqIENhbGxiYWNrIGZ1bmN0aW9uIGZpcmVkIHdoZW4gdGhlIGBvcGVuYCBzdGF0ZSBvZiB0aGUgYERyYXdlcmAgaXMgcmVxdWVzdGVkIHRvIGJlIGNoYW5nZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gb3BlbiBJZiB0cnVlLCB0aGUgYERyYXdlcmAgd2FzIHJlcXVlc3RlZCB0byBiZSBvcGVuZWQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWFzb24gVGhlIHJlYXNvbiBmb3IgdGhlIG9wZW4gb3IgY2xvc2UgcmVxdWVzdC4gUG9zc2libGUgdmFsdWVzIGFyZVxuICAgKiAnc3dpcGUnIGZvciBvcGVuIHJlcXVlc3RzOyAnY2xpY2thd2F5JyAob24gb3ZlcmxheSBjbGlja3MpLFxuICAgKiAnZXNjYXBlJyAob24gZXNjYXBlIGtleSBwcmVzcyksIGFuZCAnc3dpcGUnIGZvciBjbG9zZSByZXF1ZXN0cy5cbiAgICovXG4gIG9uUmVxdWVzdENoYW5nZTogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICAvKipcbiAgICogSWYgdHJ1ZSwgdGhlIGBEcmF3ZXJgIGlzIG9wZW5lZC4gIFByb3ZpZGluZyBhIHZhbHVlIHdpbGwgdHVybiB0aGUgYERyYXdlcmBcbiAgICogaW50byBhIGNvbnRyb2xsZWQgY29tcG9uZW50LlxuICAgKi9cbiAgb3BlbjogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAvKipcbiAgICogSWYgdHJ1ZSwgdGhlIGBEcmF3ZXJgIGlzIHBvc2l0aW9uZWQgdG8gb3BlbiBmcm9tIHRoZSBvcHBvc2l0ZSBzaWRlLlxuICAgKi9cbiAgb3BlblNlY29uZGFyeTogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAvKipcbiAgICogVGhlIENTUyBjbGFzcyBuYW1lIHRvIGFkZCB0byB0aGUgYE92ZXJsYXlgIGNvbXBvbmVudCB0aGF0IGlzIHJlbmRlcmVkIGJlaGluZCB0aGUgYERyYXdlcmAuXG4gICAqL1xuICBvdmVybGF5Q2xhc3NOYW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZyxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRoZSBpbmxpbmUtc3R5bGVzIG9mIHRoZSBgT3ZlcmxheWAgY29tcG9uZW50IHRoYXQgaXMgcmVuZGVyZWQgYmVoaW5kIHRoZSBgRHJhd2VyYC5cbiAgICovXG4gIG92ZXJsYXlTdHlsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsXG4gIC8qKlxuICAgKiBPdmVycmlkZSB0aGUgaW5saW5lLXN0eWxlcyBvZiB0aGUgcm9vdCBlbGVtZW50LlxuICAgKi9cbiAgc3R5bGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LFxuICAvKipcbiAgICogVGhlIHdpZHRoIG9mIHRoZSBsZWZ0IG1vc3QgKG9yIHJpZ2h0IG1vc3QpIGFyZWEgaW4gcGl4ZWxzIHdoZXJlIHRoZSBgRHJhd2VyYCBjYW4gYmVcbiAgICogc3dpcGVkIG9wZW4gZnJvbS4gU2V0dGluZyB0aGlzIHRvIGBudWxsYCBzcGFucyB0aGF0IGFyZWEgdG8gdGhlIGVudGlyZSBwYWdlXG4gICAqICgqKkNBVVRJT04hKiogU2V0dGluZyB0aGlzIHByb3BlcnR5IHRvIGBudWxsYCBtaWdodCBjYXVzZSBpc3N1ZXMgd2l0aCBzbGlkZXJzIGFuZFxuICAgKiBzd2lwZWFibGUgYFRhYnNgOiB1c2UgYXQgeW91ciBvd24gcmlzaykuXG4gICAqL1xuICBzd2lwZUFyZWFXaWR0aDogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gIC8qKlxuICAgKiBUaGUgd2lkdGggb2YgdGhlIGBEcmF3ZXJgIGluIHBpeGVscyBvciBwZXJjZW50YWdlIGluIHN0cmluZyBmb3JtYXQgZXguIGA1MCVgIHRvIGZpbGxcbiAgICogaGFsZiBvZiB0aGUgd2luZG93IG9yIGAxMDAlYCBhbmQgc28gb24uIERlZmF1bHRzIHRvIHVzaW5nIHRoZSB2YWx1ZXMgZnJvbSB0aGVtZS5cbiAgICovXG4gIHdpZHRoOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyXSksXG4gIC8qKlxuICAgKiBUaGUgekRlcHRoIG9mIHRoZSBgRHJhd2VyYC5cbiAgICovXG4gIHpEZXB0aDogX3Byb3BUeXBlczQuZGVmYXVsdC56RGVwdGhcblxufSA6IHt9O1xuZXhwb3J0cy5kZWZhdWx0ID0gRHJhd2VyO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9tYXRlcmlhbC11aS9EcmF3ZXIvRHJhd2VyLmpzXG4vLyBtb2R1bGUgaWQgPSAzMDRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllcycpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMik7XG5cbnZhciBfZXh0ZW5kczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcycpO1xuXG52YXIgX2V4dGVuZHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXh0ZW5kczIpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mJyk7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0UHJvdG90eXBlT2YpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7XG5cbnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJyk7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMik7XG5cbnZhciBfaW5oZXJpdHMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJyk7XG5cbnZhciBfaW5oZXJpdHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5oZXJpdHMyKTtcblxudmFyIF9zaW1wbGVBc3NpZ24gPSByZXF1aXJlKCdzaW1wbGUtYXNzaWduJyk7XG5cbnZhciBfc2ltcGxlQXNzaWduMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NpbXBsZUFzc2lnbik7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfcmVhY3REb20gPSByZXF1aXJlKCdyZWFjdC1kb20nKTtcblxudmFyIF9yZWFjdERvbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdERvbSk7XG5cbnZhciBfc2hhbGxvd0VxdWFsID0gcmVxdWlyZSgncmVjb21wb3NlL3NoYWxsb3dFcXVhbCcpO1xuXG52YXIgX3NoYWxsb3dFcXVhbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zaGFsbG93RXF1YWwpO1xuXG52YXIgX2NvbG9yTWFuaXB1bGF0b3IgPSByZXF1aXJlKCcuLi91dGlscy9jb2xvck1hbmlwdWxhdG9yJyk7XG5cbnZhciBfdHJhbnNpdGlvbnMgPSByZXF1aXJlKCcuLi9zdHlsZXMvdHJhbnNpdGlvbnMnKTtcblxudmFyIF90cmFuc2l0aW9uczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90cmFuc2l0aW9ucyk7XG5cbnZhciBfRW5oYW5jZWRCdXR0b24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbC9FbmhhbmNlZEJ1dHRvbicpO1xuXG52YXIgX0VuaGFuY2VkQnV0dG9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0VuaGFuY2VkQnV0dG9uKTtcblxudmFyIF9JY29uQnV0dG9uID0gcmVxdWlyZSgnLi4vSWNvbkJ1dHRvbicpO1xuXG52YXIgX0ljb25CdXR0b24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfSWNvbkJ1dHRvbik7XG5cbnZhciBfZXhwYW5kTGVzcyA9IHJlcXVpcmUoJy4uL3N2Zy1pY29ucy9uYXZpZ2F0aW9uL2V4cGFuZC1sZXNzJyk7XG5cbnZhciBfZXhwYW5kTGVzczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leHBhbmRMZXNzKTtcblxudmFyIF9leHBhbmRNb3JlID0gcmVxdWlyZSgnLi4vc3ZnLWljb25zL25hdmlnYXRpb24vZXhwYW5kLW1vcmUnKTtcblxudmFyIF9leHBhbmRNb3JlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4cGFuZE1vcmUpO1xuXG52YXIgX05lc3RlZExpc3QgPSByZXF1aXJlKCcuL05lc3RlZExpc3QnKTtcblxudmFyIF9OZXN0ZWRMaXN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX05lc3RlZExpc3QpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBnZXRTdHlsZXMocHJvcHMsIGNvbnRleHQsIHN0YXRlKSB7XG4gIHZhciBhdXRvR2VuZXJhdGVOZXN0ZWRJbmRpY2F0b3IgPSBwcm9wcy5hdXRvR2VuZXJhdGVOZXN0ZWRJbmRpY2F0b3IsXG4gICAgICBpbnNldENoaWxkcmVuID0gcHJvcHMuaW5zZXRDaGlsZHJlbixcbiAgICAgIGxlZnRBdmF0YXIgPSBwcm9wcy5sZWZ0QXZhdGFyLFxuICAgICAgbGVmdENoZWNrYm94ID0gcHJvcHMubGVmdENoZWNrYm94LFxuICAgICAgbGVmdEljb24gPSBwcm9wcy5sZWZ0SWNvbixcbiAgICAgIG5lc3RlZEl0ZW1zID0gcHJvcHMubmVzdGVkSXRlbXMsXG4gICAgICBuZXN0ZWRMZXZlbCA9IHByb3BzLm5lc3RlZExldmVsLFxuICAgICAgcmlnaHRBdmF0YXIgPSBwcm9wcy5yaWdodEF2YXRhcixcbiAgICAgIHJpZ2h0SWNvbiA9IHByb3BzLnJpZ2h0SWNvbixcbiAgICAgIHJpZ2h0SWNvbkJ1dHRvbiA9IHByb3BzLnJpZ2h0SWNvbkJ1dHRvbixcbiAgICAgIHJpZ2h0VG9nZ2xlID0gcHJvcHMucmlnaHRUb2dnbGUsXG4gICAgICBzZWNvbmRhcnlUZXh0ID0gcHJvcHMuc2Vjb25kYXJ5VGV4dCxcbiAgICAgIHNlY29uZGFyeVRleHRMaW5lcyA9IHByb3BzLnNlY29uZGFyeVRleHRMaW5lcztcbiAgdmFyIG11aVRoZW1lID0gY29udGV4dC5tdWlUaGVtZTtcbiAgdmFyIGxpc3RJdGVtID0gbXVpVGhlbWUubGlzdEl0ZW07XG5cblxuICB2YXIgdGV4dENvbG9yID0gbXVpVGhlbWUuYmFzZVRoZW1lLnBhbGV0dGUudGV4dENvbG9yO1xuICB2YXIgaG92ZXJDb2xvciA9IHByb3BzLmhvdmVyQ29sb3IgfHwgKDAsIF9jb2xvck1hbmlwdWxhdG9yLmZhZGUpKHRleHRDb2xvciwgMC4xKTtcbiAgdmFyIHNpbmdsZUF2YXRhciA9ICFzZWNvbmRhcnlUZXh0ICYmIChsZWZ0QXZhdGFyIHx8IHJpZ2h0QXZhdGFyKTtcbiAgdmFyIHNpbmdsZU5vQXZhdGFyID0gIXNlY29uZGFyeVRleHQgJiYgIShsZWZ0QXZhdGFyIHx8IHJpZ2h0QXZhdGFyKTtcbiAgdmFyIHR3b0xpbmUgPSBzZWNvbmRhcnlUZXh0ICYmIHNlY29uZGFyeVRleHRMaW5lcyA9PT0gMTtcbiAgdmFyIHRocmVlTGluZSA9IHNlY29uZGFyeVRleHQgJiYgc2Vjb25kYXJ5VGV4dExpbmVzID4gMTtcblxuICB2YXIgaXNLZXlib2FyZEZvY3VzZWQgPSAocHJvcHMuaXNLZXlib2FyZEZvY3VzZWQgIT09IHVuZGVmaW5lZCA/IHByb3BzIDogc3RhdGUpLmlzS2V5Ym9hcmRGb2N1c2VkO1xuXG4gIHZhciBzdHlsZXMgPSB7XG4gICAgcm9vdDoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiAoaXNLZXlib2FyZEZvY3VzZWQgfHwgc3RhdGUuaG92ZXJlZCkgJiYgIXN0YXRlLnJpZ2h0SWNvbkJ1dHRvbkhvdmVyZWQgJiYgIXN0YXRlLnJpZ2h0SWNvbkJ1dHRvbktleWJvYXJkRm9jdXNlZCA/IGhvdmVyQ29sb3IgOiBudWxsLFxuICAgICAgY29sb3I6IHRleHRDb2xvcixcbiAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICBmb250U2l6ZTogMTYsXG4gICAgICBsaW5lSGVpZ2h0OiAnMTZweCcsXG4gICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgIHRyYW5zaXRpb246IF90cmFuc2l0aW9uczIuZGVmYXVsdC5lYXNlT3V0KClcbiAgICB9LFxuXG4gICAgLy8gVGhpcyBpbm5lciBkaXYgaXMgbmVlZGVkIHNvIHRoYXQgcmlwcGxlcyB3aWxsIHNwYW4gdGhlIGVudGlyZSBjb250YWluZXJcbiAgICBpbm5lckRpdjoge1xuICAgICAgbWFyZ2luTGVmdDogbmVzdGVkTGV2ZWwgKiBsaXN0SXRlbS5uZXN0ZWRMZXZlbERlcHRoLFxuICAgICAgcGFkZGluZ0xlZnQ6IGxlZnRJY29uIHx8IGxlZnRBdmF0YXIgfHwgbGVmdENoZWNrYm94IHx8IGluc2V0Q2hpbGRyZW4gPyA3MiA6IDE2LFxuICAgICAgcGFkZGluZ1JpZ2h0OiByaWdodEljb24gfHwgcmlnaHRBdmF0YXIgfHwgcmlnaHRJY29uQnV0dG9uIHx8IG5lc3RlZEl0ZW1zLmxlbmd0aCAmJiBhdXRvR2VuZXJhdGVOZXN0ZWRJbmRpY2F0b3IgPyA1NiA6IHJpZ2h0VG9nZ2xlID8gNzIgOiAxNixcbiAgICAgIHBhZGRpbmdCb3R0b206IHNpbmdsZUF2YXRhciA/IDIwIDogMTYsXG4gICAgICBwYWRkaW5nVG9wOiBzaW5nbGVOb0F2YXRhciB8fCB0aHJlZUxpbmUgPyAxNiA6IDIwLFxuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgICB9LFxuXG4gICAgaWNvbnM6IHtcbiAgICAgIGhlaWdodDogMjQsXG4gICAgICB3aWR0aDogMjQsXG4gICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICB0b3A6IHR3b0xpbmUgPyAxMiA6IHNpbmdsZUF2YXRhciA/IDQgOiAwLFxuICAgICAgbWFyZ2luOiAxMlxuICAgIH0sXG5cbiAgICBsZWZ0SWNvbjoge1xuICAgICAgbGVmdDogNFxuICAgIH0sXG5cbiAgICByaWdodEljb246IHtcbiAgICAgIHJpZ2h0OiA0XG4gICAgfSxcblxuICAgIGF2YXRhcnM6IHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgdG9wOiBzaW5nbGVBdmF0YXIgPyA4IDogMTZcbiAgICB9LFxuXG4gICAgbGFiZWw6IHtcbiAgICAgIGN1cnNvcjogJ3BvaW50ZXInXG4gICAgfSxcblxuICAgIGxlZnRBdmF0YXI6IHtcbiAgICAgIGxlZnQ6IDE2XG4gICAgfSxcblxuICAgIHJpZ2h0QXZhdGFyOiB7XG4gICAgICByaWdodDogMTZcbiAgICB9LFxuXG4gICAgbGVmdENoZWNrYm94OiB7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICB3aWR0aDogMjQsXG4gICAgICB0b3A6IHR3b0xpbmUgPyAyNCA6IHNpbmdsZUF2YXRhciA/IDE2IDogMTIsXG4gICAgICBsZWZ0OiAxNlxuICAgIH0sXG5cbiAgICBwcmltYXJ5VGV4dDoge30sXG5cbiAgICByaWdodEljb25CdXR0b246IHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgIHRvcDogdHdvTGluZSA/IDEyIDogc2luZ2xlQXZhdGFyID8gNCA6IDAsXG4gICAgICByaWdodDogNFxuICAgIH0sXG5cbiAgICByaWdodFRvZ2dsZToge1xuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgd2lkdGg6IDU0LFxuICAgICAgdG9wOiB0d29MaW5lID8gMjUgOiBzaW5nbGVBdmF0YXIgPyAxNyA6IDEzLFxuICAgICAgcmlnaHQ6IDhcbiAgICB9LFxuXG4gICAgc2Vjb25kYXJ5VGV4dDoge1xuICAgICAgZm9udFNpemU6IDE0LFxuICAgICAgbGluZUhlaWdodDogdGhyZWVMaW5lID8gJzE4cHgnIDogJzE2cHgnLFxuICAgICAgaGVpZ2h0OiB0aHJlZUxpbmUgPyAzNiA6IDE2LFxuICAgICAgbWFyZ2luOiAwLFxuICAgICAgbWFyZ2luVG9wOiA0LFxuICAgICAgY29sb3I6IGxpc3RJdGVtLnNlY29uZGFyeVRleHRDb2xvcixcblxuICAgICAgLy8gbmVlZGVkIGZvciAyIGFuZCAzIGxpbmUgZWxsaXBzaXNcbiAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgIHRleHRPdmVyZmxvdzogJ2VsbGlwc2lzJyxcbiAgICAgIHdoaXRlU3BhY2U6IHRocmVlTGluZSA/IG51bGwgOiAnbm93cmFwJyxcbiAgICAgIGRpc3BsYXk6IHRocmVlTGluZSA/ICctd2Via2l0LWJveCcgOiBudWxsLFxuICAgICAgV2Via2l0TGluZUNsYW1wOiB0aHJlZUxpbmUgPyAyIDogbnVsbCxcbiAgICAgIFdlYmtpdEJveE9yaWVudDogdGhyZWVMaW5lID8gJ3ZlcnRpY2FsJyA6IG51bGxcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHN0eWxlcztcbn1cblxudmFyIExpc3RJdGVtID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0czMuZGVmYXVsdCkoTGlzdEl0ZW0sIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIExpc3RJdGVtKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIExpc3RJdGVtKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMy5kZWZhdWx0KSh0aGlzLCAoX3JlZiA9IExpc3RJdGVtLl9fcHJvdG9fXyB8fCAoMCwgX2dldFByb3RvdHlwZU9mMi5kZWZhdWx0KShMaXN0SXRlbSkpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnN0YXRlID0ge1xuICAgICAgaG92ZXJlZDogZmFsc2UsXG4gICAgICBpc0tleWJvYXJkRm9jdXNlZDogZmFsc2UsXG4gICAgICBvcGVuOiBmYWxzZSxcbiAgICAgIHJpZ2h0SWNvbkJ1dHRvbkhvdmVyZWQ6IGZhbHNlLFxuICAgICAgcmlnaHRJY29uQnV0dG9uS2V5Ym9hcmRGb2N1c2VkOiBmYWxzZSxcbiAgICAgIHRvdWNoOiBmYWxzZVxuICAgIH0sIF90aGlzLmhhbmRsZUtleWJvYXJkRm9jdXMgPSBmdW5jdGlvbiAoZXZlbnQsIGlzS2V5Ym9hcmRGb2N1c2VkKSB7XG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7IGlzS2V5Ym9hcmRGb2N1c2VkOiBpc0tleWJvYXJkRm9jdXNlZCB9KTtcbiAgICAgIF90aGlzLnByb3BzLm9uS2V5Ym9hcmRGb2N1cyhldmVudCwgaXNLZXlib2FyZEZvY3VzZWQpO1xuICAgIH0sIF90aGlzLmhhbmRsZU1vdXNlRW50ZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmICghX3RoaXMuc3RhdGUudG91Y2gpIF90aGlzLnNldFN0YXRlKHsgaG92ZXJlZDogdHJ1ZSB9KTtcbiAgICAgIF90aGlzLnByb3BzLm9uTW91c2VFbnRlcihldmVudCk7XG4gICAgfSwgX3RoaXMuaGFuZGxlTW91c2VMZWF2ZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgX3RoaXMuc2V0U3RhdGUoeyBob3ZlcmVkOiBmYWxzZSB9KTtcbiAgICAgIF90aGlzLnByb3BzLm9uTW91c2VMZWF2ZShldmVudCk7XG4gICAgfSwgX3RoaXMuaGFuZGxlVG91Y2hUYXAgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vblRvdWNoVGFwKSB7XG4gICAgICAgIF90aGlzLnByb3BzLm9uVG91Y2hUYXAoZXZlbnQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoX3RoaXMucHJvcHMucHJpbWFyeVRvZ2dsZXNOZXN0ZWRMaXN0KSB7XG4gICAgICAgIF90aGlzLmhhbmRsZU5lc3RlZExpc3RUb2dnbGUoZXZlbnQpO1xuICAgICAgfVxuICAgIH0sIF90aGlzLmhhbmRsZU5lc3RlZExpc3RUb2dnbGUgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5sZWZ0Q2hlY2tib3gpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICBpZiAoX3RoaXMucHJvcHMub3BlbiA9PT0gbnVsbCkge1xuICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7IG9wZW46ICFfdGhpcy5zdGF0ZS5vcGVuIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpcy5wcm9wcy5vbk5lc3RlZExpc3RUb2dnbGUoX3RoaXMpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEV4cG9zaW5nIGB0aGlzYCBpbiB0aGUgY2FsbGJhY2sgaXMgcXVpdGUgYSBiYWQgQVBJLlxuICAgICAgICAvLyBJJ20gZG9pbmcgYSBvbmUgbGV2ZWwgZGVlcCBjbG9uZSB0byBleHBvc2UgYSBmYWtlIHN0YXRlLm9wZW4uXG4gICAgICAgIF90aGlzLnByb3BzLm9uTmVzdGVkTGlzdFRvZ2dsZSgoMCwgX2V4dGVuZHMzLmRlZmF1bHQpKHt9LCBfdGhpcywge1xuICAgICAgICAgIHN0YXRlOiB7XG4gICAgICAgICAgICBvcGVuOiAhX3RoaXMuc3RhdGUub3BlblxuICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgICAgfVxuICAgIH0sIF90aGlzLmhhbmRsZVJpZ2h0SWNvbkJ1dHRvbktleWJvYXJkRm9jdXMgPSBmdW5jdGlvbiAoZXZlbnQsIGlzS2V5Ym9hcmRGb2N1c2VkKSB7XG4gICAgICBpZiAoaXNLZXlib2FyZEZvY3VzZWQpIHtcbiAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIGlzS2V5Ym9hcmRGb2N1c2VkOiBmYWxzZSxcbiAgICAgICAgICByaWdodEljb25CdXR0b25LZXlib2FyZEZvY3VzZWQ6IGlzS2V5Ym9hcmRGb2N1c2VkXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICB2YXIgaWNvbkJ1dHRvbiA9IF90aGlzLnByb3BzLnJpZ2h0SWNvbkJ1dHRvbjtcblxuICAgICAgaWYgKGljb25CdXR0b24gJiYgaWNvbkJ1dHRvbi5wcm9wcy5vbktleWJvYXJkRm9jdXMpIGljb25CdXR0b24ucHJvcHMub25LZXlib2FyZEZvY3VzKGV2ZW50LCBpc0tleWJvYXJkRm9jdXNlZCk7XG4gICAgfSwgX3RoaXMuaGFuZGxlUmlnaHRJY29uQnV0dG9uTW91c2VMZWF2ZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgdmFyIGljb25CdXR0b24gPSBfdGhpcy5wcm9wcy5yaWdodEljb25CdXR0b247XG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7IHJpZ2h0SWNvbkJ1dHRvbkhvdmVyZWQ6IGZhbHNlIH0pO1xuICAgICAgaWYgKGljb25CdXR0b24gJiYgaWNvbkJ1dHRvbi5wcm9wcy5vbk1vdXNlTGVhdmUpIGljb25CdXR0b24ucHJvcHMub25Nb3VzZUxlYXZlKGV2ZW50KTtcbiAgICB9LCBfdGhpcy5oYW5kbGVSaWdodEljb25CdXR0b25Nb3VzZUVudGVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB2YXIgaWNvbkJ1dHRvbiA9IF90aGlzLnByb3BzLnJpZ2h0SWNvbkJ1dHRvbjtcbiAgICAgIF90aGlzLnNldFN0YXRlKHsgcmlnaHRJY29uQnV0dG9uSG92ZXJlZDogdHJ1ZSB9KTtcbiAgICAgIGlmIChpY29uQnV0dG9uICYmIGljb25CdXR0b24ucHJvcHMub25Nb3VzZUVudGVyKSBpY29uQnV0dG9uLnByb3BzLm9uTW91c2VFbnRlcihldmVudCk7XG4gICAgfSwgX3RoaXMuaGFuZGxlUmlnaHRJY29uQnV0dG9uTW91c2VVcCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgdmFyIGljb25CdXR0b24gPSBfdGhpcy5wcm9wcy5yaWdodEljb25CdXR0b247XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIGlmIChpY29uQnV0dG9uICYmIGljb25CdXR0b24ucHJvcHMub25Nb3VzZVVwKSBpY29uQnV0dG9uLnByb3BzLm9uTW91c2VVcChldmVudCk7XG4gICAgfSwgX3RoaXMuaGFuZGxlUmlnaHRJY29uQnV0dG9uVG91Y2hUYXAgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHZhciBpY29uQnV0dG9uID0gX3RoaXMucHJvcHMucmlnaHRJY29uQnV0dG9uO1xuXG4gICAgICAvLyBTdG9wIHRoZSBldmVudCBmcm9tIGJ1YmJsaW5nIHVwIHRvIHRoZSBsaXN0LWl0ZW1cbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgaWYgKGljb25CdXR0b24gJiYgaWNvbkJ1dHRvbi5wcm9wcy5vblRvdWNoVGFwKSBpY29uQnV0dG9uLnByb3BzLm9uVG91Y2hUYXAoZXZlbnQpO1xuICAgIH0sIF90aGlzLmhhbmRsZVRvdWNoU3RhcnQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIF90aGlzLnNldFN0YXRlKHsgdG91Y2g6IHRydWUgfSk7XG4gICAgICBfdGhpcy5wcm9wcy5vblRvdWNoU3RhcnQoZXZlbnQpO1xuICAgIH0sIF90aGlzLmhhbmRsZVRvdWNoRW5kID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7IHRvdWNoOiB0cnVlIH0pO1xuICAgICAgX3RoaXMucHJvcHMub25Ub3VjaEVuZChldmVudCk7XG4gICAgfSwgX3RlbXApLCAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zLmRlZmF1bHQpKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKExpc3RJdGVtLCBbe1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxNb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBvcGVuOiB0aGlzLnByb3BzLm9wZW4gPT09IG51bGwgPyB0aGlzLnByb3BzLmluaXRpYWxseU9wZW4gPT09IHRydWUgOiB0aGlzLnByb3BzLm9wZW5cbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgLy8gdXBkYXRlIHRoZSBzdGF0ZSB3aGVuIHRoZSBjb21wb25lbnQgaXMgY29udHJvbGxlZC5cbiAgICAgIGlmIChuZXh0UHJvcHMub3BlbiAhPT0gbnVsbCkgdGhpcy5zZXRTdGF0ZSh7IG9wZW46IG5leHRQcm9wcy5vcGVuIH0pO1xuICAgICAgaWYgKG5leHRQcm9wcy5kaXNhYmxlZCAmJiB0aGlzLnN0YXRlLmhvdmVyZWQpIHRoaXMuc2V0U3RhdGUoeyBob3ZlcmVkOiBmYWxzZSB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzaG91bGRDb21wb25lbnRVcGRhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzaG91bGRDb21wb25lbnRVcGRhdGUobmV4dFByb3BzLCBuZXh0U3RhdGUsIG5leHRDb250ZXh0KSB7XG4gICAgICByZXR1cm4gISgwLCBfc2hhbGxvd0VxdWFsMi5kZWZhdWx0KSh0aGlzLnByb3BzLCBuZXh0UHJvcHMpIHx8ICEoMCwgX3NoYWxsb3dFcXVhbDIuZGVmYXVsdCkodGhpcy5zdGF0ZSwgbmV4dFN0YXRlKSB8fCAhKDAsIF9zaGFsbG93RXF1YWwyLmRlZmF1bHQpKHRoaXMuY29udGV4dCwgbmV4dENvbnRleHQpO1xuICAgIH1cblxuICAgIC8vIFRoaXMgbWV0aG9kIGlzIG5lZWRlZCBieSB0aGUgYE1lbnVJdGVtYCBjb21wb25lbnQuXG5cbiAgfSwge1xuICAgIGtleTogJ2FwcGx5Rm9jdXNTdGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFwcGx5Rm9jdXNTdGF0ZShmb2N1c1N0YXRlKSB7XG4gICAgICBpZiAodGhpcy5idXR0b24pIHtcbiAgICAgICAgdmFyIGJ1dHRvbkVsID0gX3JlYWN0RG9tMi5kZWZhdWx0LmZpbmRET01Ob2RlKHRoaXMuYnV0dG9uKTtcblxuICAgICAgICBzd2l0Y2ggKGZvY3VzU3RhdGUpIHtcbiAgICAgICAgICBjYXNlICdub25lJzpcbiAgICAgICAgICAgIGJ1dHRvbkVsLmJsdXIoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ2ZvY3VzZWQnOlxuICAgICAgICAgICAgYnV0dG9uRWwuZm9jdXMoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ2tleWJvYXJkLWZvY3VzZWQnOlxuICAgICAgICAgICAgdGhpcy5idXR0b24uc2V0S2V5Ym9hcmRGb2N1cygpO1xuICAgICAgICAgICAgYnV0dG9uRWwuZm9jdXMoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY3JlYXRlRGlzYWJsZWRFbGVtZW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlRGlzYWJsZWRFbGVtZW50KHN0eWxlcywgY29udGVudENoaWxkcmVuLCBhZGRpdGlvbmFsUHJvcHMpIHtcbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGlubmVyRGl2U3R5bGUgPSBfcHJvcHMuaW5uZXJEaXZTdHlsZSxcbiAgICAgICAgICBzdHlsZSA9IF9wcm9wcy5zdHlsZTtcblxuXG4gICAgICB2YXIgbWVyZ2VkRGl2U3R5bGVzID0gKDAsIF9zaW1wbGVBc3NpZ24yLmRlZmF1bHQpKHt9LCBzdHlsZXMucm9vdCwgc3R5bGVzLmlubmVyRGl2LCBpbm5lckRpdlN0eWxlLCBzdHlsZSk7XG5cbiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgICgwLCBfZXh0ZW5kczMuZGVmYXVsdCkoe30sIGFkZGl0aW9uYWxQcm9wcywge1xuICAgICAgICAgIHN0eWxlOiB0aGlzLmNvbnRleHQubXVpVGhlbWUucHJlcGFyZVN0eWxlcyhtZXJnZWREaXZTdHlsZXMpXG4gICAgICAgIH0pLFxuICAgICAgICBjb250ZW50Q2hpbGRyZW5cbiAgICAgICk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY3JlYXRlTGFiZWxFbGVtZW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlTGFiZWxFbGVtZW50KHN0eWxlcywgY29udGVudENoaWxkcmVuLCBhZGRpdGlvbmFsUHJvcHMpIHtcbiAgICAgIHZhciBfcHJvcHMyID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBpbm5lckRpdlN0eWxlID0gX3Byb3BzMi5pbm5lckRpdlN0eWxlLFxuICAgICAgICAgIHN0eWxlID0gX3Byb3BzMi5zdHlsZTtcblxuXG4gICAgICB2YXIgbWVyZ2VkTGFiZWxTdHlsZXMgPSAoMCwgX3NpbXBsZUFzc2lnbjIuZGVmYXVsdCkoe30sIHN0eWxlcy5yb290LCBzdHlsZXMuaW5uZXJEaXYsIGlubmVyRGl2U3R5bGUsIHN0eWxlcy5sYWJlbCwgc3R5bGUpO1xuXG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdsYWJlbCcsXG4gICAgICAgICgwLCBfZXh0ZW5kczMuZGVmYXVsdCkoe30sIGFkZGl0aW9uYWxQcm9wcywge1xuICAgICAgICAgIHN0eWxlOiB0aGlzLmNvbnRleHQubXVpVGhlbWUucHJlcGFyZVN0eWxlcyhtZXJnZWRMYWJlbFN0eWxlcylcbiAgICAgICAgfSksXG4gICAgICAgIGNvbnRlbnRDaGlsZHJlblxuICAgICAgKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjcmVhdGVUZXh0RWxlbWVudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZVRleHRFbGVtZW50KHN0eWxlcywgZGF0YSwga2V5KSB7XG4gICAgICB2YXIgcHJlcGFyZVN0eWxlcyA9IHRoaXMuY29udGV4dC5tdWlUaGVtZS5wcmVwYXJlU3R5bGVzO1xuXG4gICAgICBpZiAoX3JlYWN0Mi5kZWZhdWx0LmlzVmFsaWRFbGVtZW50KGRhdGEpKSB7XG4gICAgICAgIHZhciBzdHlsZSA9ICgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KSh7fSwgc3R5bGVzLCBkYXRhLnByb3BzLnN0eWxlKTtcbiAgICAgICAgaWYgKHR5cGVvZiBkYXRhLnR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgLy8gaWYgZWxlbWVudCBpcyBhIG5hdGl2ZSBkb20gbm9kZVxuICAgICAgICAgIHN0eWxlID0gcHJlcGFyZVN0eWxlcyhzdHlsZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jbG9uZUVsZW1lbnQoZGF0YSwge1xuICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgIHN0eWxlOiBzdHlsZVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgeyBrZXk6IGtleSwgc3R5bGU6IHByZXBhcmVTdHlsZXMoc3R5bGVzKSB9LFxuICAgICAgICBkYXRhXG4gICAgICApO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3B1c2hFbGVtZW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcHVzaEVsZW1lbnQoY2hpbGRyZW4sIGVsZW1lbnQsIGJhc2VTdHlsZXMsIGFkZGl0aW9uYWxQcm9wcykge1xuICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgdmFyIHN0eWxlcyA9ICgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KSh7fSwgYmFzZVN0eWxlcywgZWxlbWVudC5wcm9wcy5zdHlsZSk7XG4gICAgICAgIGNoaWxkcmVuLnB1c2goX3JlYWN0Mi5kZWZhdWx0LmNsb25lRWxlbWVudChlbGVtZW50LCAoMCwgX2V4dGVuZHMzLmRlZmF1bHQpKHtcbiAgICAgICAgICBrZXk6IGNoaWxkcmVuLmxlbmd0aCxcbiAgICAgICAgICBzdHlsZTogc3R5bGVzXG4gICAgICAgIH0sIGFkZGl0aW9uYWxQcm9wcykpKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIF9wcm9wczMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGF1dG9HZW5lcmF0ZU5lc3RlZEluZGljYXRvciA9IF9wcm9wczMuYXV0b0dlbmVyYXRlTmVzdGVkSW5kaWNhdG9yLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3Byb3BzMy5jaGlsZHJlbixcbiAgICAgICAgICBjb250YWluZXJFbGVtZW50ID0gX3Byb3BzMy5jb250YWluZXJFbGVtZW50LFxuICAgICAgICAgIGRpc2FibGVkID0gX3Byb3BzMy5kaXNhYmxlZCxcbiAgICAgICAgICBkaXNhYmxlS2V5Ym9hcmRGb2N1cyA9IF9wcm9wczMuZGlzYWJsZUtleWJvYXJkRm9jdXMsXG4gICAgICAgICAgaG92ZXJDb2xvciA9IF9wcm9wczMuaG92ZXJDb2xvcixcbiAgICAgICAgICBpbml0aWFsbHlPcGVuID0gX3Byb3BzMy5pbml0aWFsbHlPcGVuLFxuICAgICAgICAgIGlubmVyRGl2U3R5bGUgPSBfcHJvcHMzLmlubmVyRGl2U3R5bGUsXG4gICAgICAgICAgaW5zZXRDaGlsZHJlbiA9IF9wcm9wczMuaW5zZXRDaGlsZHJlbixcbiAgICAgICAgICBsZWZ0QXZhdGFyID0gX3Byb3BzMy5sZWZ0QXZhdGFyLFxuICAgICAgICAgIGxlZnRDaGVja2JveCA9IF9wcm9wczMubGVmdENoZWNrYm94LFxuICAgICAgICAgIGxlZnRJY29uID0gX3Byb3BzMy5sZWZ0SWNvbixcbiAgICAgICAgICBuZXN0ZWRJdGVtcyA9IF9wcm9wczMubmVzdGVkSXRlbXMsXG4gICAgICAgICAgbmVzdGVkTGV2ZWwgPSBfcHJvcHMzLm5lc3RlZExldmVsLFxuICAgICAgICAgIG5lc3RlZExpc3RTdHlsZSA9IF9wcm9wczMubmVzdGVkTGlzdFN0eWxlLFxuICAgICAgICAgIG9uS2V5Ym9hcmRGb2N1cyA9IF9wcm9wczMub25LZXlib2FyZEZvY3VzLFxuICAgICAgICAgIGlzS2V5Ym9hcmRGb2N1c2VkID0gX3Byb3BzMy5pc0tleWJvYXJkRm9jdXNlZCxcbiAgICAgICAgICBvbk1vdXNlRW50ZXIgPSBfcHJvcHMzLm9uTW91c2VFbnRlcixcbiAgICAgICAgICBvbk1vdXNlTGVhdmUgPSBfcHJvcHMzLm9uTW91c2VMZWF2ZSxcbiAgICAgICAgICBvbk5lc3RlZExpc3RUb2dnbGUgPSBfcHJvcHMzLm9uTmVzdGVkTGlzdFRvZ2dsZSxcbiAgICAgICAgICBvblRvdWNoU3RhcnQgPSBfcHJvcHMzLm9uVG91Y2hTdGFydCxcbiAgICAgICAgICBvblRvdWNoVGFwID0gX3Byb3BzMy5vblRvdWNoVGFwLFxuICAgICAgICAgIHJpZ2h0QXZhdGFyID0gX3Byb3BzMy5yaWdodEF2YXRhcixcbiAgICAgICAgICByaWdodEljb24gPSBfcHJvcHMzLnJpZ2h0SWNvbixcbiAgICAgICAgICByaWdodEljb25CdXR0b24gPSBfcHJvcHMzLnJpZ2h0SWNvbkJ1dHRvbixcbiAgICAgICAgICByaWdodFRvZ2dsZSA9IF9wcm9wczMucmlnaHRUb2dnbGUsXG4gICAgICAgICAgcHJpbWFyeVRleHQgPSBfcHJvcHMzLnByaW1hcnlUZXh0LFxuICAgICAgICAgIHByaW1hcnlUb2dnbGVzTmVzdGVkTGlzdCA9IF9wcm9wczMucHJpbWFyeVRvZ2dsZXNOZXN0ZWRMaXN0LFxuICAgICAgICAgIHNlY29uZGFyeVRleHQgPSBfcHJvcHMzLnNlY29uZGFyeVRleHQsXG4gICAgICAgICAgc2Vjb25kYXJ5VGV4dExpbmVzID0gX3Byb3BzMy5zZWNvbmRhcnlUZXh0TGluZXMsXG4gICAgICAgICAgc3R5bGUgPSBfcHJvcHMzLnN0eWxlLFxuICAgICAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczMuZGVmYXVsdCkoX3Byb3BzMywgWydhdXRvR2VuZXJhdGVOZXN0ZWRJbmRpY2F0b3InLCAnY2hpbGRyZW4nLCAnY29udGFpbmVyRWxlbWVudCcsICdkaXNhYmxlZCcsICdkaXNhYmxlS2V5Ym9hcmRGb2N1cycsICdob3ZlckNvbG9yJywgJ2luaXRpYWxseU9wZW4nLCAnaW5uZXJEaXZTdHlsZScsICdpbnNldENoaWxkcmVuJywgJ2xlZnRBdmF0YXInLCAnbGVmdENoZWNrYm94JywgJ2xlZnRJY29uJywgJ25lc3RlZEl0ZW1zJywgJ25lc3RlZExldmVsJywgJ25lc3RlZExpc3RTdHlsZScsICdvbktleWJvYXJkRm9jdXMnLCAnaXNLZXlib2FyZEZvY3VzZWQnLCAnb25Nb3VzZUVudGVyJywgJ29uTW91c2VMZWF2ZScsICdvbk5lc3RlZExpc3RUb2dnbGUnLCAnb25Ub3VjaFN0YXJ0JywgJ29uVG91Y2hUYXAnLCAncmlnaHRBdmF0YXInLCAncmlnaHRJY29uJywgJ3JpZ2h0SWNvbkJ1dHRvbicsICdyaWdodFRvZ2dsZScsICdwcmltYXJ5VGV4dCcsICdwcmltYXJ5VG9nZ2xlc05lc3RlZExpc3QnLCAnc2Vjb25kYXJ5VGV4dCcsICdzZWNvbmRhcnlUZXh0TGluZXMnLCAnc3R5bGUnXSk7XG4gICAgICB2YXIgcHJlcGFyZVN0eWxlcyA9IHRoaXMuY29udGV4dC5tdWlUaGVtZS5wcmVwYXJlU3R5bGVzO1xuXG4gICAgICB2YXIgc3R5bGVzID0gZ2V0U3R5bGVzKHRoaXMucHJvcHMsIHRoaXMuY29udGV4dCwgdGhpcy5zdGF0ZSk7XG4gICAgICB2YXIgY29udGVudENoaWxkcmVuID0gW2NoaWxkcmVuXTtcblxuICAgICAgaWYgKGxlZnRJY29uKSB7XG4gICAgICAgIHZhciBhZGRpdGlvbmFsUHJvcHMgPSB7XG4gICAgICAgICAgY29sb3I6IGxlZnRJY29uLnByb3BzLmNvbG9yIHx8IHRoaXMuY29udGV4dC5tdWlUaGVtZS5saXN0SXRlbS5sZWZ0SWNvbkNvbG9yXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMucHVzaEVsZW1lbnQoY29udGVudENoaWxkcmVuLCBsZWZ0SWNvbiwgKDAsIF9zaW1wbGVBc3NpZ24yLmRlZmF1bHQpKHt9LCBzdHlsZXMuaWNvbnMsIHN0eWxlcy5sZWZ0SWNvbiksIGFkZGl0aW9uYWxQcm9wcyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChyaWdodEljb24pIHtcbiAgICAgICAgdmFyIF9hZGRpdGlvbmFsUHJvcHMgPSB7XG4gICAgICAgICAgY29sb3I6IHJpZ2h0SWNvbi5wcm9wcy5jb2xvciB8fCB0aGlzLmNvbnRleHQubXVpVGhlbWUubGlzdEl0ZW0ucmlnaHRJY29uQ29sb3JcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5wdXNoRWxlbWVudChjb250ZW50Q2hpbGRyZW4sIHJpZ2h0SWNvbiwgKDAsIF9zaW1wbGVBc3NpZ24yLmRlZmF1bHQpKHt9LCBzdHlsZXMuaWNvbnMsIHN0eWxlcy5yaWdodEljb24pLCBfYWRkaXRpb25hbFByb3BzKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGxlZnRBdmF0YXIpIHtcbiAgICAgICAgdGhpcy5wdXNoRWxlbWVudChjb250ZW50Q2hpbGRyZW4sIGxlZnRBdmF0YXIsICgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KSh7fSwgc3R5bGVzLmF2YXRhcnMsIHN0eWxlcy5sZWZ0QXZhdGFyKSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChyaWdodEF2YXRhcikge1xuICAgICAgICB0aGlzLnB1c2hFbGVtZW50KGNvbnRlbnRDaGlsZHJlbiwgcmlnaHRBdmF0YXIsICgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KSh7fSwgc3R5bGVzLmF2YXRhcnMsIHN0eWxlcy5yaWdodEF2YXRhcikpO1xuICAgICAgfVxuXG4gICAgICBpZiAobGVmdENoZWNrYm94KSB7XG4gICAgICAgIHRoaXMucHVzaEVsZW1lbnQoY29udGVudENoaWxkcmVuLCBsZWZ0Q2hlY2tib3gsICgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KSh7fSwgc3R5bGVzLmxlZnRDaGVja2JveCkpO1xuICAgICAgfVxuXG4gICAgICAvLyBSaWdodEljb25CdXR0b25FbGVtZW50XG4gICAgICB2YXIgaGFzTmVzdExpc3RJdGVtcyA9IG5lc3RlZEl0ZW1zLmxlbmd0aDtcbiAgICAgIHZhciBoYXNSaWdodEVsZW1lbnQgPSByaWdodEF2YXRhciB8fCByaWdodEljb24gfHwgcmlnaHRJY29uQnV0dG9uIHx8IHJpZ2h0VG9nZ2xlO1xuICAgICAgdmFyIG5lZWRzTmVzdGVkSW5kaWNhdG9yID0gaGFzTmVzdExpc3RJdGVtcyAmJiBhdXRvR2VuZXJhdGVOZXN0ZWRJbmRpY2F0b3IgJiYgIWhhc1JpZ2h0RWxlbWVudDtcblxuICAgICAgaWYgKHJpZ2h0SWNvbkJ1dHRvbiB8fCBuZWVkc05lc3RlZEluZGljYXRvcikge1xuICAgICAgICB2YXIgcmlnaHRJY29uQnV0dG9uRWxlbWVudCA9IHJpZ2h0SWNvbkJ1dHRvbjtcbiAgICAgICAgdmFyIHJpZ2h0SWNvbkJ1dHRvbkhhbmRsZXJzID0ge1xuICAgICAgICAgIG9uS2V5Ym9hcmRGb2N1czogdGhpcy5oYW5kbGVSaWdodEljb25CdXR0b25LZXlib2FyZEZvY3VzLFxuICAgICAgICAgIG9uTW91c2VFbnRlcjogdGhpcy5oYW5kbGVSaWdodEljb25CdXR0b25Nb3VzZUVudGVyLFxuICAgICAgICAgIG9uTW91c2VMZWF2ZTogdGhpcy5oYW5kbGVSaWdodEljb25CdXR0b25Nb3VzZUxlYXZlLFxuICAgICAgICAgIG9uVG91Y2hUYXA6IHRoaXMuaGFuZGxlUmlnaHRJY29uQnV0dG9uVG91Y2hUYXAsXG4gICAgICAgICAgb25Nb3VzZURvd246IHRoaXMuaGFuZGxlUmlnaHRJY29uQnV0dG9uTW91c2VVcCxcbiAgICAgICAgICBvbk1vdXNlVXA6IHRoaXMuaGFuZGxlUmlnaHRJY29uQnV0dG9uTW91c2VVcFxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIENyZWF0ZSBhIG5lc3RlZCBsaXN0IGluZGljYXRvciBpY29uIGlmIHdlIGRvbid0IGhhdmUgYW4gaWNvbiBvbiB0aGUgcmlnaHRcbiAgICAgICAgaWYgKG5lZWRzTmVzdGVkSW5kaWNhdG9yKSB7XG4gICAgICAgICAgcmlnaHRJY29uQnV0dG9uRWxlbWVudCA9IHRoaXMuc3RhdGUub3BlbiA/IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgX0ljb25CdXR0b24yLmRlZmF1bHQsXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V4cGFuZExlc3MyLmRlZmF1bHQsIG51bGwpXG4gICAgICAgICAgKSA6IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgX0ljb25CdXR0b24yLmRlZmF1bHQsXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX2V4cGFuZE1vcmUyLmRlZmF1bHQsIG51bGwpXG4gICAgICAgICAgKTtcbiAgICAgICAgICByaWdodEljb25CdXR0b25IYW5kbGVycy5vblRvdWNoVGFwID0gdGhpcy5oYW5kbGVOZXN0ZWRMaXN0VG9nZ2xlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5wdXNoRWxlbWVudChjb250ZW50Q2hpbGRyZW4sIHJpZ2h0SWNvbkJ1dHRvbkVsZW1lbnQsICgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KSh7fSwgc3R5bGVzLnJpZ2h0SWNvbkJ1dHRvbiksIHJpZ2h0SWNvbkJ1dHRvbkhhbmRsZXJzKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHJpZ2h0VG9nZ2xlKSB7XG4gICAgICAgIHRoaXMucHVzaEVsZW1lbnQoY29udGVudENoaWxkcmVuLCByaWdodFRvZ2dsZSwgKDAsIF9zaW1wbGVBc3NpZ24yLmRlZmF1bHQpKHt9LCBzdHlsZXMucmlnaHRUb2dnbGUpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHByaW1hcnlUZXh0KSB7XG4gICAgICAgIHZhciBwcmltYXJ5VGV4dEVsZW1lbnQgPSB0aGlzLmNyZWF0ZVRleHRFbGVtZW50KHN0eWxlcy5wcmltYXJ5VGV4dCwgcHJpbWFyeVRleHQsICdwcmltYXJ5VGV4dCcpO1xuICAgICAgICBjb250ZW50Q2hpbGRyZW4ucHVzaChwcmltYXJ5VGV4dEVsZW1lbnQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2Vjb25kYXJ5VGV4dCkge1xuICAgICAgICB2YXIgc2Vjb25kYXJ5VGV4dEVsZW1lbnQgPSB0aGlzLmNyZWF0ZVRleHRFbGVtZW50KHN0eWxlcy5zZWNvbmRhcnlUZXh0LCBzZWNvbmRhcnlUZXh0LCAnc2Vjb25kYXJ5VGV4dCcpO1xuICAgICAgICBjb250ZW50Q2hpbGRyZW4ucHVzaChzZWNvbmRhcnlUZXh0RWxlbWVudCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBuZXN0ZWRMaXN0ID0gbmVzdGVkSXRlbXMubGVuZ3RoID8gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIF9OZXN0ZWRMaXN0Mi5kZWZhdWx0LFxuICAgICAgICB7IG5lc3RlZExldmVsOiBuZXN0ZWRMZXZlbCwgb3BlbjogdGhpcy5zdGF0ZS5vcGVuLCBzdHlsZTogbmVzdGVkTGlzdFN0eWxlIH0sXG4gICAgICAgIG5lc3RlZEl0ZW1zXG4gICAgICApIDogdW5kZWZpbmVkO1xuXG4gICAgICB2YXIgc2ltcGxlTGFiZWwgPSAhcHJpbWFyeVRvZ2dsZXNOZXN0ZWRMaXN0ICYmIChsZWZ0Q2hlY2tib3ggfHwgcmlnaHRUb2dnbGUpO1xuXG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICBudWxsLFxuICAgICAgICBzaW1wbGVMYWJlbCA/IHRoaXMuY3JlYXRlTGFiZWxFbGVtZW50KHN0eWxlcywgY29udGVudENoaWxkcmVuLCBvdGhlcikgOiBkaXNhYmxlZCA/IHRoaXMuY3JlYXRlRGlzYWJsZWRFbGVtZW50KHN0eWxlcywgY29udGVudENoaWxkcmVuLCBvdGhlcikgOiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBfRW5oYW5jZWRCdXR0b24yLmRlZmF1bHQsXG4gICAgICAgICAgKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7XG4gICAgICAgICAgICBjb250YWluZXJFbGVtZW50OiBjb250YWluZXJFbGVtZW50XG4gICAgICAgICAgfSwgb3RoZXIsIHtcbiAgICAgICAgICAgIGRpc2FibGVLZXlib2FyZEZvY3VzOiBkaXNhYmxlS2V5Ym9hcmRGb2N1cyB8fCB0aGlzLnN0YXRlLnJpZ2h0SWNvbkJ1dHRvbktleWJvYXJkRm9jdXNlZCxcbiAgICAgICAgICAgIG9uS2V5Ym9hcmRGb2N1czogdGhpcy5oYW5kbGVLZXlib2FyZEZvY3VzLFxuICAgICAgICAgICAgb25Nb3VzZUxlYXZlOiB0aGlzLmhhbmRsZU1vdXNlTGVhdmUsXG4gICAgICAgICAgICBvbk1vdXNlRW50ZXI6IHRoaXMuaGFuZGxlTW91c2VFbnRlcixcbiAgICAgICAgICAgIG9uVG91Y2hTdGFydDogdGhpcy5oYW5kbGVUb3VjaFN0YXJ0LFxuICAgICAgICAgICAgb25Ub3VjaEVuZDogdGhpcy5oYW5kbGVUb3VjaEVuZCxcbiAgICAgICAgICAgIG9uVG91Y2hUYXA6IHRoaXMuaGFuZGxlVG91Y2hUYXAsXG4gICAgICAgICAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgICAgICAgICByZWY6IGZ1bmN0aW9uIHJlZihub2RlKSB7XG4gICAgICAgICAgICAgIHJldHVybiBfdGhpczIuYnV0dG9uID0gbm9kZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdHlsZTogKDAsIF9zaW1wbGVBc3NpZ24yLmRlZmF1bHQpKHt9LCBzdHlsZXMucm9vdCwgc3R5bGUpXG4gICAgICAgICAgfSksXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgIHsgc3R5bGU6IHByZXBhcmVTdHlsZXMoKDAsIF9zaW1wbGVBc3NpZ24yLmRlZmF1bHQpKHN0eWxlcy5pbm5lckRpdiwgaW5uZXJEaXZTdHlsZSkpIH0sXG4gICAgICAgICAgICBjb250ZW50Q2hpbGRyZW5cbiAgICAgICAgICApXG4gICAgICAgICksXG4gICAgICAgIG5lc3RlZExpc3RcbiAgICAgICk7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBMaXN0SXRlbTtcbn0oX3JlYWN0LkNvbXBvbmVudCk7XG5cbkxpc3RJdGVtLm11aU5hbWUgPSAnTGlzdEl0ZW0nO1xuTGlzdEl0ZW0uZGVmYXVsdFByb3BzID0ge1xuICBhdXRvR2VuZXJhdGVOZXN0ZWRJbmRpY2F0b3I6IHRydWUsXG4gIGNvbnRhaW5lckVsZW1lbnQ6ICdzcGFuJyxcbiAgZGlzYWJsZUtleWJvYXJkRm9jdXM6IGZhbHNlLFxuICBkaXNhYmxlZDogZmFsc2UsXG4gIGluaXRpYWxseU9wZW46IGZhbHNlLFxuICBpbnNldENoaWxkcmVuOiBmYWxzZSxcbiAgbmVzdGVkSXRlbXM6IFtdLFxuICBuZXN0ZWRMZXZlbDogMCxcbiAgb25LZXlib2FyZEZvY3VzOiBmdW5jdGlvbiBvbktleWJvYXJkRm9jdXMoKSB7fSxcbiAgb25Nb3VzZUVudGVyOiBmdW5jdGlvbiBvbk1vdXNlRW50ZXIoKSB7fSxcbiAgb25Nb3VzZUxlYXZlOiBmdW5jdGlvbiBvbk1vdXNlTGVhdmUoKSB7fSxcbiAgb25OZXN0ZWRMaXN0VG9nZ2xlOiBmdW5jdGlvbiBvbk5lc3RlZExpc3RUb2dnbGUoKSB7fSxcbiAgb25Ub3VjaEVuZDogZnVuY3Rpb24gb25Ub3VjaEVuZCgpIHt9LFxuICBvblRvdWNoU3RhcnQ6IGZ1bmN0aW9uIG9uVG91Y2hTdGFydCgpIHt9LFxuICBvcGVuOiBudWxsLFxuICBwcmltYXJ5VG9nZ2xlc05lc3RlZExpc3Q6IGZhbHNlLFxuICBzZWNvbmRhcnlUZXh0TGluZXM6IDFcbn07XG5MaXN0SXRlbS5jb250ZXh0VHlwZXMgPSB7XG4gIG11aVRoZW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkXG59O1xuTGlzdEl0ZW0ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogSWYgdHJ1ZSwgZ2VuZXJhdGUgYSBuZXN0ZWQtbGlzdC1pbmRpY2F0b3IgaWNvbiB3aGVuIG5lc3RlZCBsaXN0XG4gICAqIGl0ZW1zIGFyZSBkZXRlY3RlZC4gTm90ZSB0aGF0IGFuIGluZGljYXRvciB3aWxsIG5vdCBiZSBjcmVhdGVkXG4gICAqIGlmIGEgYHJpZ2h0SWNvbmAgb3IgYHJpZ2h0SWNvbkJ1dHRvbmAgaGFzIGJlZW4gcHJvdmlkZWQgdG9cbiAgICogdGhlIGVsZW1lbnQuXG4gICAqL1xuICBhdXRvR2VuZXJhdGVOZXN0ZWRJbmRpY2F0b3I6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgLyoqXG4gICAqIENoaWxkcmVuIHBhc3NlZCBpbnRvIHRoZSBgTGlzdEl0ZW1gLlxuICAgKi9cbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMyLmRlZmF1bHQubm9kZSxcbiAgLyoqXG4gICAqIFRoZSBlbGVtZW50IHRvIHVzZSBhcyB0aGUgY29udGFpbmVyIGZvciB0aGUgTGlzdEl0ZW0uIEVpdGhlciBhIHN0cmluZyB0b1xuICAgKiB1c2UgYSBET00gZWxlbWVudCBvciBhIFJlYWN0RWxlbWVudC4gVGhpcyBpcyB1c2VmdWwgZm9yIHdyYXBwaW5nIHRoZVxuICAgKiBMaXN0SXRlbSBpbiBhIGN1c3RvbSBMaW5rIGNvbXBvbmVudC4gSWYgYSBSZWFjdEVsZW1lbnQgaXMgZ2l2ZW4sIGVuc3VyZVxuICAgKiB0aGF0IGl0IHBhc3NlcyBhbGwgb2YgaXRzIGdpdmVuIHByb3BzIHRocm91Z2ggdG8gdGhlIHVuZGVybHlpbmcgRE9NXG4gICAqIGVsZW1lbnQgYW5kIHJlbmRlcnMgaXRzIGNoaWxkcmVuIHByb3AgZm9yIHByb3BlciBpbnRlZ3JhdGlvbi5cbiAgICovXG4gIGNvbnRhaW5lckVsZW1lbnQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlczIuZGVmYXVsdC5lbGVtZW50XSksXG4gIC8qKlxuICAgKiBJZiB0cnVlLCB0aGUgZWxlbWVudCB3aWxsIG5vdCBiZSBhYmxlIHRvIGJlIGZvY3VzZWQgYnkgdGhlIGtleWJvYXJkLlxuICAgKi9cbiAgZGlzYWJsZUtleWJvYXJkRm9jdXM6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgLyoqXG4gICAqIElmIHRydWUsIHRoZSBlbGVtZW50IHdpbGwgbm90IGJlIGNsaWNrYWJsZVxuICAgKiBhbmQgd2lsbCBub3QgZGlzcGxheSBob3ZlciBlZmZlY3RzLlxuICAgKiBUaGlzIGlzIGF1dG9tYXRpY2FsbHkgZGlzYWJsZWQgaWYgZWl0aGVyIGBsZWZ0Q2hlY2tib3hgXG4gICAqIG9yIGByaWdodFRvZ2dsZWAgaXMgc2V0LlxuICAgKi9cbiAgZGlzYWJsZWQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgLyoqXG4gICogT3ZlcnJpZGUgdGhlIGhvdmVyIGJhY2tncm91bmQgY29sb3IuXG4gICovXG4gIGhvdmVyQ29sb3I6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICAvKipcbiAgICogSWYgdHJ1ZSwgdGhlIG5lc3RlZCBgTGlzdEl0ZW1gcyBhcmUgaW5pdGlhbGx5IGRpc3BsYXllZC5cbiAgICovXG4gIGluaXRpYWxseU9wZW46IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRoZSBpbmxpbmUtc3R5bGVzIG9mIHRoZSBpbm5lciBkaXYgZWxlbWVudC5cbiAgICovXG4gIGlubmVyRGl2U3R5bGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LFxuICAvKipcbiAgICogSWYgdHJ1ZSwgdGhlIGNoaWxkcmVuIHdpbGwgYmUgaW5kZW50ZWQgYnkgNzJweC5cbiAgICogVGhpcyBpcyB1c2VmdWwgaWYgdGhlcmUgaXMgbm8gbGVmdCBhdmF0YXIgb3IgbGVmdCBpY29uLlxuICAgKi9cbiAgaW5zZXRDaGlsZHJlbjogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAvKipcbiAgICogVXNlIHRvIGNvbnRyb2wgaWYgdGhlIGxpc3QgaXRlbSBzaG91bGQgcmVuZGVyIGFzIGtleWJvYXJkIGZvY3VzZWQuICBJZlxuICAgKiB1bmRlZmluZWQgKGRlZmF1bHQpLCB0aGlzIHdpbGwgYmUgYXV0b21hdGljYWxseSBtYW5hZ2VkLiAgSWYgcHJvdmlkZWQsXG4gICAqIGl0IHdpbGwgY2hhbmdlIHRoZSBjb21wb25lbnRzIHN0eWxlLiAgTm90ZSB0aGF0IHRoaXMgd2lsbCBub3QgY2hhbmdlIHRoZVxuICAgKiBhY3R1YWwgZm9jdXMgLSBhbmQgc2hvdWxkIG9ubHkgYmUgdXNlZCB3aGVuIHlvdSB3YW50IHRvIHNpbXVsYXRlXG4gICAqIGtleWJvYXJkIGZvY3VzIChlZy4gaW4gYSByaWNoIHRleHQgaW5wdXQgYXV0b2NvbXBsZXRlKS5cbiAgICovXG4gIGlzS2V5Ym9hcmRGb2N1c2VkOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIC8qKlxuICAgKiBUaGlzIGlzIHRoZSBgQXZhdGFyYCBlbGVtZW50IHRvIGJlIGRpc3BsYXllZCBvbiB0aGUgbGVmdCBzaWRlLlxuICAgKi9cbiAgbGVmdEF2YXRhcjogX3Byb3BUeXBlczIuZGVmYXVsdC5lbGVtZW50LFxuICAvKipcbiAgICogVGhpcyBpcyB0aGUgYENoZWNrYm94YCBlbGVtZW50IHRvIGJlIGRpc3BsYXllZCBvbiB0aGUgbGVmdCBzaWRlLlxuICAgKi9cbiAgbGVmdENoZWNrYm94OiBfcHJvcFR5cGVzMi5kZWZhdWx0LmVsZW1lbnQsXG4gIC8qKlxuICAgKiBUaGlzIGlzIHRoZSBgU3ZnSWNvbmAgb3IgYEZvbnRJY29uYCB0byBiZSBkaXNwbGF5ZWQgb24gdGhlIGxlZnQgc2lkZS5cbiAgICovXG4gIGxlZnRJY29uOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmVsZW1lbnQsXG4gIC8qKlxuICAgKiBBbiBhcnJheSBvZiBgTGlzdEl0ZW1gcyB0byBuZXN0IHVuZGVybmVhdGggdGhlIGN1cnJlbnQgYExpc3RJdGVtYC5cbiAgICovXG4gIG5lc3RlZEl0ZW1zOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmFycmF5T2YoX3Byb3BUeXBlczIuZGVmYXVsdC5lbGVtZW50KSxcbiAgLyoqXG4gICAqIENvbnRyb2xzIGhvdyBkZWVwIGEgYExpc3RJdGVtYCBhcHBlYXJzLlxuICAgKiBUaGlzIHByb3BlcnR5IGlzIGF1dG9tYXRpY2FsbHkgbWFuYWdlZCwgc28gbW9kaWZ5IGF0IHlvdXIgb3duIHJpc2suXG4gICAqL1xuICBuZXN0ZWRMZXZlbDogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gIC8qKlxuICAgKiBPdmVycmlkZSB0aGUgaW5saW5lLXN0eWxlcyBvZiB0aGUgbmVzdGVkIGl0ZW1zJyBgTmVzdGVkTGlzdGAuXG4gICAqL1xuICBuZXN0ZWRMaXN0U3R5bGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LFxuICAvKipcbiAgICogQ2FsbGJhY2sgZnVuY3Rpb24gZmlyZWQgd2hlbiB0aGUgYExpc3RJdGVtYCBpcyBmb2N1c2VkIG9yIGJsdXJyZWQgYnkgdGhlIGtleWJvYXJkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgYGZvY3VzYCBvciBgYmx1cmAgZXZlbnQgdGFyZ2V0aW5nIHRoZSBgTGlzdEl0ZW1gLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzS2V5Ym9hcmRGb2N1c2VkIElmIHRydWUsIHRoZSBgTGlzdEl0ZW1gIGlzIGZvY3VzZWQuXG4gICAqL1xuICBvbktleWJvYXJkRm9jdXM6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgLyoqIEBpZ25vcmUgKi9cbiAgb25Nb3VzZUVudGVyOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIC8qKiBAaWdub3JlICovXG4gIG9uTW91c2VMZWF2ZTogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICAvKipcbiAgICogQ2FsbGJhayBmdW5jdGlvbiBmaXJlZCB3aGVuIHRoZSBgTGlzdEl0ZW1gIHRvZ2dsZXMgaXRzIG5lc3RlZCBsaXN0LlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gbGlzdEl0ZW0gVGhlIGBMaXN0SXRlbWAuXG4gICAqL1xuICBvbk5lc3RlZExpc3RUb2dnbGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgLyoqIEBpZ25vcmUgKi9cbiAgb25Ub3VjaEVuZDogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICAvKiogQGlnbm9yZSAqL1xuICBvblRvdWNoU3RhcnQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgLyoqXG4gICAqIENhbGxiYWNrIGZ1bmN0aW9uIGZpcmVkIHdoZW4gdGhlIGxpc3QgaXRlbSBpcyB0b3VjaC10YXBwZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUb3VjaFRhcCBldmVudCB0YXJnZXRpbmcgdGhlIGxpc3QgaXRlbS5cbiAgICovXG4gIG9uVG91Y2hUYXA6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgLyoqXG4gICAqIENvbnRyb2wgdG9nZ2xlIHN0YXRlIG9mIG5lc3RlZCBsaXN0LlxuICAgKi9cbiAgb3BlbjogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAvKipcbiAgICogVGhpcyBpcyB0aGUgYmxvY2sgZWxlbWVudCB0aGF0IGNvbnRhaW5zIHRoZSBwcmltYXJ5IHRleHQuXG4gICAqIElmIGEgc3RyaW5nIGlzIHBhc3NlZCBpbiwgYSBkaXYgdGFnIHdpbGwgYmUgcmVuZGVyZWQuXG4gICAqL1xuICBwcmltYXJ5VGV4dDogX3Byb3BUeXBlczIuZGVmYXVsdC5ub2RlLFxuICAvKipcbiAgICogSWYgdHJ1ZSwgY2xpY2tpbmcgb3IgdGFwcGluZyB0aGUgcHJpbWFyeSB0ZXh0IG9mIHRoZSBgTGlzdEl0ZW1gXG4gICAqIHRvZ2dsZXMgdGhlIG5lc3RlZCBsaXN0LlxuICAgKi9cbiAgcHJpbWFyeVRvZ2dsZXNOZXN0ZWRMaXN0OiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIC8qKlxuICAgKiBUaGlzIGlzIHRoZSBgQXZhdGFyYCBlbGVtZW50IHRvIGJlIGRpc3BsYXllZCBvbiB0aGUgcmlnaHQgc2lkZS5cbiAgICovXG4gIHJpZ2h0QXZhdGFyOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmVsZW1lbnQsXG4gIC8qKlxuICAgKiBUaGlzIGlzIHRoZSBgU3ZnSWNvbmAgb3IgYEZvbnRJY29uYCB0byBiZSBkaXNwbGF5ZWQgb24gdGhlIHJpZ2h0IHNpZGUuXG4gICAqL1xuICByaWdodEljb246IF9wcm9wVHlwZXMyLmRlZmF1bHQuZWxlbWVudCxcbiAgLyoqXG4gICAqIFRoaXMgaXMgdGhlIGBJY29uQnV0dG9uYCB0byBiZSBkaXNwbGF5ZWQgb24gdGhlIHJpZ2h0IHNpZGUuXG4gICAqIEhvdmVyaW5nIG92ZXIgdGhpcyBidXR0b24gd2lsbCByZW1vdmUgdGhlIGBMaXN0SXRlbWAgaG92ZXIuXG4gICAqIEFsc28sIGNsaWNraW5nIG9uIHRoaXMgYnV0dG9uIHdpbGwgbm90IHRyaWdnZXIgYVxuICAgKiByaXBwbGUgb24gdGhlIGBMaXN0SXRlbWA7IHRoZSBldmVudCB3aWxsIGJlIHN0b3BwZWQgYW5kIHByZXZlbnRlZFxuICAgKiBmcm9tIGJ1YmJsaW5nIHVwIHRvIGNhdXNlIGEgYExpc3RJdGVtYCBjbGljay5cbiAgICovXG4gIHJpZ2h0SWNvbkJ1dHRvbjogX3Byb3BUeXBlczIuZGVmYXVsdC5lbGVtZW50LFxuICAvKipcbiAgICogVGhpcyBpcyB0aGUgYFRvZ2dsZWAgZWxlbWVudCB0byBkaXNwbGF5IG9uIHRoZSByaWdodCBzaWRlLlxuICAgKi9cbiAgcmlnaHRUb2dnbGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZWxlbWVudCxcbiAgLyoqXG4gICAqIFRoaXMgaXMgdGhlIGJsb2NrIGVsZW1lbnQgdGhhdCBjb250YWlucyB0aGUgc2Vjb25kYXJ5IHRleHQuXG4gICAqIElmIGEgc3RyaW5nIGlzIHBhc3NlZCBpbiwgYSBkaXYgdGFnIHdpbGwgYmUgcmVuZGVyZWQuXG4gICAqL1xuICBzZWNvbmRhcnlUZXh0OiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm5vZGUsXG4gIC8qKlxuICAgKiBDYW4gYmUgMSBvciAyLiBUaGlzIGlzIHRoZSBudW1iZXIgb2Ygc2Vjb25kYXJ5XG4gICAqIHRleHQgbGluZXMgYmVmb3JlIGVsbGlwc2lzIHdpbGwgc2hvdy5cbiAgICovXG4gIHNlY29uZGFyeVRleHRMaW5lczogX3Byb3BUeXBlczIuZGVmYXVsdC5vbmVPZihbMSwgMl0pLFxuICAvKipcbiAgICogT3ZlcnJpZGUgdGhlIGlubGluZS1zdHlsZXMgb2YgdGhlIHJvb3QgZWxlbWVudC5cbiAgICovXG4gIHN0eWxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdFxufSA6IHt9O1xuZXhwb3J0cy5kZWZhdWx0ID0gTGlzdEl0ZW07XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L21hdGVyaWFsLXVpL0xpc3QvTGlzdEl0ZW0uanNcbi8vIG1vZHVsZSBpZCA9IDMxMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfTGlzdCA9IHJlcXVpcmUoJy4vTGlzdCcpO1xuXG52YXIgX0xpc3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTGlzdCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBOZXN0ZWRMaXN0ID0gZnVuY3Rpb24gTmVzdGVkTGlzdChwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIG9wZW4gPSBwcm9wcy5vcGVuLFxuICAgICAgbmVzdGVkTGV2ZWwgPSBwcm9wcy5uZXN0ZWRMZXZlbCxcbiAgICAgIHN0eWxlID0gcHJvcHMuc3R5bGU7XG5cblxuICBpZiAoIW9wZW4pIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICBfTGlzdDIuZGVmYXVsdCxcbiAgICB7IHN0eWxlOiBzdHlsZSB9LFxuICAgIF9yZWFjdC5DaGlsZHJlbi5tYXAoY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgcmV0dXJuICgwLCBfcmVhY3QuaXNWYWxpZEVsZW1lbnQpKGNoaWxkKSA/ICgwLCBfcmVhY3QuY2xvbmVFbGVtZW50KShjaGlsZCwge1xuICAgICAgICBuZXN0ZWRMZXZlbDogbmVzdGVkTGV2ZWwgKyAxXG4gICAgICB9KSA6IGNoaWxkO1xuICAgIH0pXG4gICk7XG59O1xuXG5OZXN0ZWRMaXN0LnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMyLmRlZmF1bHQubm9kZSxcbiAgbmVzdGVkTGV2ZWw6IF9wcm9wVHlwZXMyLmRlZmF1bHQubnVtYmVyLmlzUmVxdWlyZWQsXG4gIG9wZW46IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbC5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogT3ZlcnJpZGUgdGhlIGlubGluZS1zdHlsZXMgb2YgdGhlIHJvb3QgZWxlbWVudC5cbiAgICovXG4gIHN0eWxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdFxufSA6IHt9O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBOZXN0ZWRMaXN0O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9tYXRlcmlhbC11aS9MaXN0L05lc3RlZExpc3QuanNcbi8vIG1vZHVsZSBpZCA9IDMxMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcycpO1xuXG52YXIgX2V4dGVuZHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXh0ZW5kczIpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllcycpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMik7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2YnKTtcblxudmFyIF9nZXRQcm90b3R5cGVPZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRQcm90b3R5cGVPZik7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKTtcblxudmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yKTtcblxudmFyIF9pbmhlcml0czIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnKTtcblxudmFyIF9pbmhlcml0czMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbmhlcml0czIpO1xuXG52YXIgX3NpbXBsZUFzc2lnbiA9IHJlcXVpcmUoJ3NpbXBsZS1hc3NpZ24nKTtcblxudmFyIF9zaW1wbGVBc3NpZ24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2ltcGxlQXNzaWduKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9yZWFjdERvbSA9IHJlcXVpcmUoJ3JlYWN0LWRvbScpO1xuXG52YXIgX3JlYWN0RG9tMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0RG9tKTtcblxudmFyIF9zaGFsbG93RXF1YWwgPSByZXF1aXJlKCdyZWNvbXBvc2Uvc2hhbGxvd0VxdWFsJyk7XG5cbnZhciBfc2hhbGxvd0VxdWFsMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NoYWxsb3dFcXVhbCk7XG5cbnZhciBfUG9wb3ZlciA9IHJlcXVpcmUoJy4uL1BvcG92ZXIvUG9wb3ZlcicpO1xuXG52YXIgX1BvcG92ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUG9wb3Zlcik7XG5cbnZhciBfY2hlY2sgPSByZXF1aXJlKCcuLi9zdmctaWNvbnMvbmF2aWdhdGlvbi9jaGVjaycpO1xuXG52YXIgX2NoZWNrMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NoZWNrKTtcblxudmFyIF9MaXN0SXRlbSA9IHJlcXVpcmUoJy4uL0xpc3QvTGlzdEl0ZW0nKTtcblxudmFyIF9MaXN0SXRlbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9MaXN0SXRlbSk7XG5cbnZhciBfTWVudSA9IHJlcXVpcmUoJy4uL01lbnUvTWVudScpO1xuXG52YXIgX01lbnUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTWVudSk7XG5cbnZhciBfcHJvcFR5cGVzMyA9IHJlcXVpcmUoJy4uL3V0aWxzL3Byb3BUeXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIG5lc3RlZE1lbnVTdHlsZSA9IHtcbiAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbn07XG5cbmZ1bmN0aW9uIGdldFN0eWxlcyhwcm9wcywgY29udGV4dCkge1xuICB2YXIgZGlzYWJsZWRDb2xvciA9IGNvbnRleHQubXVpVGhlbWUuYmFzZVRoZW1lLnBhbGV0dGUuZGlzYWJsZWRDb2xvcjtcbiAgdmFyIHRleHRDb2xvciA9IGNvbnRleHQubXVpVGhlbWUuYmFzZVRoZW1lLnBhbGV0dGUudGV4dENvbG9yO1xuICB2YXIgaW5kZW50ID0gcHJvcHMuZGVza3RvcCA/IDY0IDogNzI7XG4gIHZhciBzaWRlUGFkZGluZyA9IHByb3BzLmRlc2t0b3AgPyAyNCA6IDE2O1xuXG4gIHZhciBzdHlsZXMgPSB7XG4gICAgcm9vdDoge1xuICAgICAgY29sb3I6IHByb3BzLmRpc2FibGVkID8gZGlzYWJsZWRDb2xvciA6IHRleHRDb2xvcixcbiAgICAgIGN1cnNvcjogcHJvcHMuZGlzYWJsZWQgPyAnZGVmYXVsdCcgOiAncG9pbnRlcicsXG4gICAgICBtaW5IZWlnaHQ6IHByb3BzLmRlc2t0b3AgPyAnMzJweCcgOiAnNDhweCcsXG4gICAgICBsaW5lSGVpZ2h0OiBwcm9wcy5kZXNrdG9wID8gJzMycHgnIDogJzQ4cHgnLFxuICAgICAgZm9udFNpemU6IHByb3BzLmRlc2t0b3AgPyAxNSA6IDE2LFxuICAgICAgd2hpdGVTcGFjZTogJ25vd3JhcCdcbiAgICB9LFxuXG4gICAgaW5uZXJEaXZTdHlsZToge1xuICAgICAgcGFkZGluZ0xlZnQ6IHByb3BzLmxlZnRJY29uIHx8IHByb3BzLmluc2V0Q2hpbGRyZW4gfHwgcHJvcHMuY2hlY2tlZCA/IGluZGVudCA6IHNpZGVQYWRkaW5nLFxuICAgICAgcGFkZGluZ1JpZ2h0OiBwcm9wcy5yaWdodEljb24gPyBpbmRlbnQgOiBzaWRlUGFkZGluZyxcbiAgICAgIHBhZGRpbmdCb3R0b206IDAsXG4gICAgICBwYWRkaW5nVG9wOiAwXG4gICAgfSxcblxuICAgIHNlY29uZGFyeVRleHQ6IHtcbiAgICAgIGZsb2F0OiAncmlnaHQnXG4gICAgfSxcblxuICAgIGxlZnRJY29uRGVza3RvcDoge1xuICAgICAgbWFyZ2luOiAwLFxuICAgICAgbGVmdDogMjQsXG4gICAgICB0b3A6IDRcbiAgICB9LFxuXG4gICAgcmlnaHRJY29uRGVza3RvcDoge1xuICAgICAgbWFyZ2luOiAwLFxuICAgICAgcmlnaHQ6IDI0LFxuICAgICAgdG9wOiA0LFxuICAgICAgZmlsbDogY29udGV4dC5tdWlUaGVtZS5tZW51SXRlbS5yaWdodEljb25EZXNrdG9wRmlsbFxuICAgIH1cbiAgfTtcblxuICByZXR1cm4gc3R5bGVzO1xufVxuXG52YXIgTWVudUl0ZW0gPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzMy5kZWZhdWx0KShNZW51SXRlbSwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTWVudUl0ZW0oKSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgTWVudUl0ZW0pO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zLmRlZmF1bHQpKHRoaXMsIChfcmVmID0gTWVudUl0ZW0uX19wcm90b19fIHx8ICgwLCBfZ2V0UHJvdG90eXBlT2YyLmRlZmF1bHQpKE1lbnVJdGVtKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBvcGVuOiBmYWxzZVxuICAgIH0sIF90aGlzLmNsb25lTWVudUl0ZW0gPSBmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jbG9uZUVsZW1lbnQoaXRlbSwge1xuICAgICAgICBvblRvdWNoVGFwOiBmdW5jdGlvbiBvblRvdWNoVGFwKGV2ZW50KSB7XG4gICAgICAgICAgaWYgKCFpdGVtLnByb3BzLm1lbnVJdGVtcykge1xuICAgICAgICAgICAgX3RoaXMuaGFuZGxlUmVxdWVzdENsb3NlKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGl0ZW0ucHJvcHMub25Ub3VjaFRhcCkge1xuICAgICAgICAgICAgaXRlbS5wcm9wcy5vblRvdWNoVGFwKGV2ZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sIF90aGlzLmhhbmRsZVRvdWNoVGFwID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICBfdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIG9wZW46IHRydWUsXG4gICAgICAgIGFuY2hvckVsOiBfcmVhY3REb20yLmRlZmF1bHQuZmluZERPTU5vZGUoX3RoaXMpXG4gICAgICB9KTtcblxuICAgICAgaWYgKF90aGlzLnByb3BzLm9uVG91Y2hUYXApIHtcbiAgICAgICAgX3RoaXMucHJvcHMub25Ub3VjaFRhcChldmVudCk7XG4gICAgICB9XG4gICAgfSwgX3RoaXMuaGFuZGxlUmVxdWVzdENsb3NlID0gZnVuY3Rpb24gKCkge1xuICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICBvcGVuOiBmYWxzZSxcbiAgICAgICAgYW5jaG9yRWw6IG51bGxcbiAgICAgIH0pO1xuICAgIH0sIF90ZW1wKSwgKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMy5kZWZhdWx0KShfdGhpcywgX3JldCk7XG4gIH1cblxuICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShNZW51SXRlbSwgW3tcbiAgICBrZXk6ICdjb21wb25lbnREaWRNb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdGhpcy5hcHBseUZvY3VzU3RhdGUoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIGlmICh0aGlzLnN0YXRlLm9wZW4gJiYgbmV4dFByb3BzLmZvY3VzU3RhdGUgPT09ICdub25lJykge1xuICAgICAgICB0aGlzLmhhbmRsZVJlcXVlc3RDbG9zZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3Nob3VsZENvbXBvbmVudFVwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNob3VsZENvbXBvbmVudFVwZGF0ZShuZXh0UHJvcHMsIG5leHRTdGF0ZSwgbmV4dENvbnRleHQpIHtcbiAgICAgIHJldHVybiAhKDAsIF9zaGFsbG93RXF1YWwyLmRlZmF1bHQpKHRoaXMucHJvcHMsIG5leHRQcm9wcykgfHwgISgwLCBfc2hhbGxvd0VxdWFsMi5kZWZhdWx0KSh0aGlzLnN0YXRlLCBuZXh0U3RhdGUpIHx8ICEoMCwgX3NoYWxsb3dFcXVhbDIuZGVmYXVsdCkodGhpcy5jb250ZXh0LCBuZXh0Q29udGV4dCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50RGlkVXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgICAgdGhpcy5hcHBseUZvY3VzU3RhdGUoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsVW5tb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgaWYgKHRoaXMuc3RhdGUub3Blbikge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBvcGVuOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdhcHBseUZvY3VzU3RhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhcHBseUZvY3VzU3RhdGUoKSB7XG4gICAgICB0aGlzLnJlZnMubGlzdEl0ZW0uYXBwbHlGb2N1c1N0YXRlKHRoaXMucHJvcHMuZm9jdXNTdGF0ZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgY2hlY2tlZCA9IF9wcm9wcy5jaGVja2VkLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3Byb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIGRlc2t0b3AgPSBfcHJvcHMuZGVza3RvcCxcbiAgICAgICAgICBkaXNhYmxlZCA9IF9wcm9wcy5kaXNhYmxlZCxcbiAgICAgICAgICBmb2N1c1N0YXRlID0gX3Byb3BzLmZvY3VzU3RhdGUsXG4gICAgICAgICAgaW5uZXJEaXZTdHlsZSA9IF9wcm9wcy5pbm5lckRpdlN0eWxlLFxuICAgICAgICAgIGluc2V0Q2hpbGRyZW4gPSBfcHJvcHMuaW5zZXRDaGlsZHJlbixcbiAgICAgICAgICBsZWZ0SWNvbiA9IF9wcm9wcy5sZWZ0SWNvbixcbiAgICAgICAgICBtZW51SXRlbXMgPSBfcHJvcHMubWVudUl0ZW1zLFxuICAgICAgICAgIHJpZ2h0SWNvbiA9IF9wcm9wcy5yaWdodEljb24sXG4gICAgICAgICAgc2Vjb25kYXJ5VGV4dCA9IF9wcm9wcy5zZWNvbmRhcnlUZXh0LFxuICAgICAgICAgIHN0eWxlID0gX3Byb3BzLnN0eWxlLFxuICAgICAgICAgIGFuaW1hdGlvbiA9IF9wcm9wcy5hbmltYXRpb24sXG4gICAgICAgICAgYW5jaG9yT3JpZ2luID0gX3Byb3BzLmFuY2hvck9yaWdpbixcbiAgICAgICAgICB0YXJnZXRPcmlnaW4gPSBfcHJvcHMudGFyZ2V0T3JpZ2luLFxuICAgICAgICAgIHZhbHVlID0gX3Byb3BzLnZhbHVlLFxuICAgICAgICAgIG90aGVyID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczMuZGVmYXVsdCkoX3Byb3BzLCBbJ2NoZWNrZWQnLCAnY2hpbGRyZW4nLCAnZGVza3RvcCcsICdkaXNhYmxlZCcsICdmb2N1c1N0YXRlJywgJ2lubmVyRGl2U3R5bGUnLCAnaW5zZXRDaGlsZHJlbicsICdsZWZ0SWNvbicsICdtZW51SXRlbXMnLCAncmlnaHRJY29uJywgJ3NlY29uZGFyeVRleHQnLCAnc3R5bGUnLCAnYW5pbWF0aW9uJywgJ2FuY2hvck9yaWdpbicsICd0YXJnZXRPcmlnaW4nLCAndmFsdWUnXSk7XG4gICAgICB2YXIgcHJlcGFyZVN0eWxlcyA9IHRoaXMuY29udGV4dC5tdWlUaGVtZS5wcmVwYXJlU3R5bGVzO1xuXG4gICAgICB2YXIgc3R5bGVzID0gZ2V0U3R5bGVzKHRoaXMucHJvcHMsIHRoaXMuY29udGV4dCk7XG4gICAgICB2YXIgbWVyZ2VkUm9vdFN0eWxlcyA9ICgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KShzdHlsZXMucm9vdCwgc3R5bGUpO1xuICAgICAgdmFyIG1lcmdlZElubmVyRGl2U3R5bGVzID0gKDAsIF9zaW1wbGVBc3NpZ24yLmRlZmF1bHQpKHN0eWxlcy5pbm5lckRpdlN0eWxlLCBpbm5lckRpdlN0eWxlKTtcblxuICAgICAgLy8gTGVmdCBJY29uXG4gICAgICB2YXIgbGVmdEljb25FbGVtZW50ID0gbGVmdEljb24gPyBsZWZ0SWNvbiA6IGNoZWNrZWQgPyBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChfY2hlY2syLmRlZmF1bHQsIG51bGwpIDogbnVsbDtcbiAgICAgIGlmIChsZWZ0SWNvbkVsZW1lbnQpIHtcbiAgICAgICAgdmFyIG1lcmdlZExlZnRJY29uU3R5bGVzID0gZGVza3RvcCA/ICgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KShzdHlsZXMubGVmdEljb25EZXNrdG9wLCBsZWZ0SWNvbkVsZW1lbnQucHJvcHMuc3R5bGUpIDogbGVmdEljb25FbGVtZW50LnByb3BzLnN0eWxlO1xuICAgICAgICBsZWZ0SWNvbkVsZW1lbnQgPSBfcmVhY3QyLmRlZmF1bHQuY2xvbmVFbGVtZW50KGxlZnRJY29uRWxlbWVudCwgeyBzdHlsZTogbWVyZ2VkTGVmdEljb25TdHlsZXMgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFJpZ2h0IEljb25cbiAgICAgIHZhciByaWdodEljb25FbGVtZW50ID0gdm9pZCAwO1xuICAgICAgaWYgKHJpZ2h0SWNvbikge1xuICAgICAgICB2YXIgbWVyZ2VkUmlnaHRJY29uU3R5bGVzID0gZGVza3RvcCA/ICgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KShzdHlsZXMucmlnaHRJY29uRGVza3RvcCwgcmlnaHRJY29uLnByb3BzLnN0eWxlKSA6IHJpZ2h0SWNvbi5wcm9wcy5zdHlsZTtcbiAgICAgICAgcmlnaHRJY29uRWxlbWVudCA9IF9yZWFjdDIuZGVmYXVsdC5jbG9uZUVsZW1lbnQocmlnaHRJY29uLCB7IHN0eWxlOiBtZXJnZWRSaWdodEljb25TdHlsZXMgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFNlY29uZGFyeSBUZXh0XG4gICAgICB2YXIgc2Vjb25kYXJ5VGV4dEVsZW1lbnQgPSB2b2lkIDA7XG4gICAgICBpZiAoc2Vjb25kYXJ5VGV4dCkge1xuICAgICAgICB2YXIgc2Vjb25kYXJ5VGV4dElzQW5FbGVtZW50ID0gX3JlYWN0Mi5kZWZhdWx0LmlzVmFsaWRFbGVtZW50KHNlY29uZGFyeVRleHQpO1xuICAgICAgICB2YXIgbWVyZ2VkU2Vjb25kYXJ5VGV4dFN0eWxlcyA9IHNlY29uZGFyeVRleHRJc0FuRWxlbWVudCA/ICgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KShzdHlsZXMuc2Vjb25kYXJ5VGV4dCwgc2Vjb25kYXJ5VGV4dC5wcm9wcy5zdHlsZSkgOiBudWxsO1xuXG4gICAgICAgIHNlY29uZGFyeVRleHRFbGVtZW50ID0gc2Vjb25kYXJ5VGV4dElzQW5FbGVtZW50ID8gX3JlYWN0Mi5kZWZhdWx0LmNsb25lRWxlbWVudChzZWNvbmRhcnlUZXh0LCB7IHN0eWxlOiBtZXJnZWRTZWNvbmRhcnlUZXh0U3R5bGVzIH0pIDogX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgeyBzdHlsZTogcHJlcGFyZVN0eWxlcyhzdHlsZXMuc2Vjb25kYXJ5VGV4dCkgfSxcbiAgICAgICAgICBzZWNvbmRhcnlUZXh0XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICB2YXIgY2hpbGRNZW51UG9wb3ZlciA9IHZvaWQgMDtcbiAgICAgIGlmIChtZW51SXRlbXMpIHtcbiAgICAgICAgY2hpbGRNZW51UG9wb3ZlciA9IF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIF9Qb3BvdmVyMi5kZWZhdWx0LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGFuaW1hdGlvbjogYW5pbWF0aW9uLFxuICAgICAgICAgICAgYW5jaG9yT3JpZ2luOiBhbmNob3JPcmlnaW4sXG4gICAgICAgICAgICBhbmNob3JFbDogdGhpcy5zdGF0ZS5hbmNob3JFbCxcbiAgICAgICAgICAgIG9wZW46IHRoaXMuc3RhdGUub3BlbixcbiAgICAgICAgICAgIHRhcmdldE9yaWdpbjogdGFyZ2V0T3JpZ2luLFxuICAgICAgICAgICAgdXNlTGF5ZXJGb3JDbGlja0F3YXk6IGZhbHNlLFxuICAgICAgICAgICAgb25SZXF1ZXN0Q2xvc2U6IHRoaXMuaGFuZGxlUmVxdWVzdENsb3NlXG4gICAgICAgICAgfSxcbiAgICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgIF9NZW51Mi5kZWZhdWx0LFxuICAgICAgICAgICAgeyBkZXNrdG9wOiBkZXNrdG9wLCBkaXNhYmxlZDogZGlzYWJsZWQsIHN0eWxlOiBuZXN0ZWRNZW51U3R5bGUgfSxcbiAgICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5DaGlsZHJlbi5tYXAobWVudUl0ZW1zLCB0aGlzLmNsb25lTWVudUl0ZW0pXG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgICBvdGhlci5vblRvdWNoVGFwID0gdGhpcy5oYW5kbGVUb3VjaFRhcDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICBfTGlzdEl0ZW0yLmRlZmF1bHQsXG4gICAgICAgICgwLCBfZXh0ZW5kczMuZGVmYXVsdCkoe30sIG90aGVyLCB7XG4gICAgICAgICAgZGlzYWJsZWQ6IGRpc2FibGVkLFxuICAgICAgICAgIGhvdmVyQ29sb3I6IHRoaXMuY29udGV4dC5tdWlUaGVtZS5tZW51SXRlbS5ob3ZlckNvbG9yLFxuICAgICAgICAgIGlubmVyRGl2U3R5bGU6IG1lcmdlZElubmVyRGl2U3R5bGVzLFxuICAgICAgICAgIGluc2V0Q2hpbGRyZW46IGluc2V0Q2hpbGRyZW4sXG4gICAgICAgICAgbGVmdEljb246IGxlZnRJY29uRWxlbWVudCxcbiAgICAgICAgICByZWY6ICdsaXN0SXRlbScsXG4gICAgICAgICAgcmlnaHRJY29uOiByaWdodEljb25FbGVtZW50LFxuICAgICAgICAgIHJvbGU6ICdtZW51aXRlbScsXG4gICAgICAgICAgc3R5bGU6IG1lcmdlZFJvb3RTdHlsZXNcbiAgICAgICAgfSksXG4gICAgICAgIGNoaWxkcmVuLFxuICAgICAgICBzZWNvbmRhcnlUZXh0RWxlbWVudCxcbiAgICAgICAgY2hpbGRNZW51UG9wb3ZlclxuICAgICAgKTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIE1lbnVJdGVtO1xufShfcmVhY3QuQ29tcG9uZW50KTtcblxuTWVudUl0ZW0ubXVpTmFtZSA9ICdNZW51SXRlbSc7XG5NZW51SXRlbS5kZWZhdWx0UHJvcHMgPSB7XG4gIGFuY2hvck9yaWdpbjogeyBob3Jpem9udGFsOiAncmlnaHQnLCB2ZXJ0aWNhbDogJ3RvcCcgfSxcbiAgY2hlY2tlZDogZmFsc2UsXG4gIGRlc2t0b3A6IGZhbHNlLFxuICBkaXNhYmxlZDogZmFsc2UsXG4gIGZvY3VzU3RhdGU6ICdub25lJyxcbiAgaW5zZXRDaGlsZHJlbjogZmFsc2UsXG4gIHRhcmdldE9yaWdpbjogeyBob3Jpem9udGFsOiAnbGVmdCcsIHZlcnRpY2FsOiAndG9wJyB9XG59O1xuTWVudUl0ZW0uY29udGV4dFR5cGVzID0ge1xuICBtdWlUaGVtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZFxufTtcbk1lbnVJdGVtLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIExvY2F0aW9uIG9mIHRoZSBhbmNob3IgZm9yIHRoZSBwb3BvdmVyIG9mIG5lc3RlZCBgTWVudUl0ZW1gXG4gICAqIGVsZW1lbnRzLlxuICAgKiBPcHRpb25zOlxuICAgKiBob3Jpem9udGFsOiBbbGVmdCwgbWlkZGxlLCByaWdodF1cbiAgICogdmVydGljYWw6IFt0b3AsIGNlbnRlciwgYm90dG9tXS5cbiAgICovXG4gIGFuY2hvck9yaWdpbjogX3Byb3BUeXBlczQuZGVmYXVsdC5vcmlnaW4sXG4gIC8qKlxuICAgKiBPdmVycmlkZSB0aGUgZGVmYXVsdCBhbmltYXRpb24gY29tcG9uZW50IHVzZWQuXG4gICAqL1xuICBhbmltYXRpb246IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgLyoqXG4gICAqIElmIHRydWUsIGEgbGVmdCBjaGVjayBtYXJrIHdpbGwgYmUgcmVuZGVyZWQuXG4gICAqL1xuICBjaGVja2VkOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIC8qKlxuICAgKiBFbGVtZW50cyBwYXNzZWQgYXMgY2hpbGRyZW4gdG8gdGhlIHVuZGVybHlpbmcgYExpc3RJdGVtYC5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm5vZGUsXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqIElmIHRydWUsIHRoZSBtZW51IGl0ZW0gd2lsbCByZW5kZXIgd2l0aCBjb21wYWN0IGRlc2t0b3BcbiAgICogc3R5bGVzLlxuICAgKi9cbiAgZGVza3RvcDogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAvKipcbiAgICogSWYgdHJ1ZSwgdGhlIG1lbnUgaXRlbSB3aWxsIGJlIGRpc2FibGVkLlxuICAgKi9cbiAgZGlzYWJsZWQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgLyoqXG4gICAqIFRoZSBmb2N1cyBzdGF0ZSBvZiB0aGUgbWVudSBpdGVtLiBUaGlzIHByb3AgaXMgdXNlZCB0byBzZXQgdGhlIGZvY3VzXG4gICAqIHN0YXRlIG9mIHRoZSB1bmRlcmx5aW5nIGBMaXN0SXRlbWAuXG4gICAqL1xuICBmb2N1c1N0YXRlOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9uZU9mKFsnbm9uZScsICdmb2N1c2VkJywgJ2tleWJvYXJkLWZvY3VzZWQnXSksXG4gIC8qKlxuICAgKiBPdmVycmlkZSB0aGUgaW5saW5lLXN0eWxlcyBvZiB0aGUgaW5uZXIgZGl2LlxuICAgKi9cbiAgaW5uZXJEaXZTdHlsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsXG4gIC8qKlxuICAgKiBJZiB0cnVlLCB0aGUgY2hpbGRyZW4gd2lsbCBiZSBpbmRlbnRlZC5cbiAgICogVGhpcyBpcyBvbmx5IG5lZWRlZCB3aGVuIHRoZXJlIGlzIG5vIGBsZWZ0SWNvbmAuXG4gICAqL1xuICBpbnNldENoaWxkcmVuOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgYFN2Z0ljb25gIG9yIGBGb250SWNvbmAgdG8gYmUgZGlzcGxheWVkIG9uIHRoZSBsZWZ0IHNpZGUuXG4gICAqL1xuICBsZWZ0SWNvbjogX3Byb3BUeXBlczIuZGVmYXVsdC5lbGVtZW50LFxuICAvKipcbiAgICogYE1lbnVJdGVtYCBlbGVtZW50cyB0byBuZXN0IHdpdGhpbiB0aGUgbWVudSBpdGVtLlxuICAgKi9cbiAgbWVudUl0ZW1zOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm5vZGUsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmdW5jdGlvbiBmaXJlZCB3aGVuIHRoZSBtZW51IGl0ZW0gaXMgdG91Y2gtdGFwcGVkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVG91Y2hUYXAgZXZlbnQgdGFyZ2V0aW5nIHRoZSBtZW51IGl0ZW0uXG4gICAqL1xuICBvblRvdWNoVGFwOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIC8qKlxuICAgKiBDYW4gYmUgdXNlZCB0byByZW5kZXIgcHJpbWFyeSB0ZXh0IHdpdGhpbiB0aGUgbWVudSBpdGVtLlxuICAgKi9cbiAgcHJpbWFyeVRleHQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQubm9kZSxcbiAgLyoqXG4gICAqIFRoZSBgU3ZnSWNvbmAgb3IgYEZvbnRJY29uYCB0byBiZSBkaXNwbGF5ZWQgb24gdGhlIHJpZ2h0IHNpZGUuXG4gICAqL1xuICByaWdodEljb246IF9wcm9wVHlwZXMyLmRlZmF1bHQuZWxlbWVudCxcbiAgLyoqXG4gICAqIENhbiBiZSB1c2VkIHRvIHJlbmRlciBzZWNvbmRhcnkgdGV4dCB3aXRoaW4gdGhlIG1lbnUgaXRlbS5cbiAgICovXG4gIHNlY29uZGFyeVRleHQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQubm9kZSxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRoZSBpbmxpbmUtc3R5bGVzIG9mIHRoZSByb290IGVsZW1lbnQuXG4gICAqL1xuICBzdHlsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsXG4gIC8qKlxuICAgKiBMb2NhdGlvbiBvbiB0aGUgcG9wb3ZlciBvZiBuZXN0ZWQgYE1lbnVJdGVtYCBlbGVtZW50cyB0aGF0IHdpbGwgYXR0YWNoXG4gICAqIHRvIHRoZSBhbmNob3IncyBvcmlnaW4uXG4gICAqIE9wdGlvbnM6XG4gICAqIGhvcml6b250YWw6IFtsZWZ0LCBtaWRkbGUsIHJpZ2h0XVxuICAgKiB2ZXJ0aWNhbDogW3RvcCwgY2VudGVyLCBib3R0b21dLlxuICAgKi9cbiAgdGFyZ2V0T3JpZ2luOiBfcHJvcFR5cGVzNC5kZWZhdWx0Lm9yaWdpbixcbiAgLyoqXG4gICAqIFRoZSB2YWx1ZSBvZiB0aGUgbWVudSBpdGVtLlxuICAgKi9cbiAgdmFsdWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYW55XG59IDoge307XG5leHBvcnRzLmRlZmF1bHQgPSBNZW51SXRlbTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vbWF0ZXJpYWwtdWkvTWVudUl0ZW0vTWVudUl0ZW0uanNcbi8vIG1vZHVsZSBpZCA9IDMxMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcycpO1xuXG52YXIgX2V4dGVuZHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXh0ZW5kczIpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllcycpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMik7XG5cbnZhciBfdG9BcnJheTIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvdG9BcnJheScpO1xuXG52YXIgX3RvQXJyYXkzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdG9BcnJheTIpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9jb3JlLWpzL29iamVjdC9nZXQtcHJvdG90eXBlLW9mJyk7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0UHJvdG90eXBlT2YpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7XG5cbnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJyk7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMik7XG5cbnZhciBfaW5oZXJpdHMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJyk7XG5cbnZhciBfaW5oZXJpdHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5oZXJpdHMyKTtcblxudmFyIF9zaW1wbGVBc3NpZ24gPSByZXF1aXJlKCdzaW1wbGUtYXNzaWduJyk7XG5cbnZhciBfc2ltcGxlQXNzaWduMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NpbXBsZUFzc2lnbik7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfcmVhY3REb20gPSByZXF1aXJlKCdyZWFjdC1kb20nKTtcblxudmFyIF9yZWFjdERvbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdERvbSk7XG5cbnZhciBfc2hhbGxvd0VxdWFsID0gcmVxdWlyZSgncmVjb21wb3NlL3NoYWxsb3dFcXVhbCcpO1xuXG52YXIgX3NoYWxsb3dFcXVhbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zaGFsbG93RXF1YWwpO1xuXG52YXIgX0NsaWNrQXdheUxpc3RlbmVyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWwvQ2xpY2tBd2F5TGlzdGVuZXInKTtcblxudmFyIF9DbGlja0F3YXlMaXN0ZW5lcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9DbGlja0F3YXlMaXN0ZW5lcik7XG5cbnZhciBfa2V5Y29kZSA9IHJlcXVpcmUoJ2tleWNvZGUnKTtcblxudmFyIF9rZXljb2RlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2tleWNvZGUpO1xuXG52YXIgX3Byb3BUeXBlczMgPSByZXF1aXJlKCcuLi91dGlscy9wcm9wVHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXM0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzMyk7XG5cbnZhciBfTGlzdCA9IHJlcXVpcmUoJy4uL0xpc3QvTGlzdCcpO1xuXG52YXIgX0xpc3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfTGlzdCk7XG5cbnZhciBfbWVudVV0aWxzID0gcmVxdWlyZSgnLi9tZW51VXRpbHMnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gZ2V0U3R5bGVzKHByb3BzLCBjb250ZXh0KSB7XG4gIHZhciBkZXNrdG9wID0gcHJvcHMuZGVza3RvcCxcbiAgICAgIG1heEhlaWdodCA9IHByb3BzLm1heEhlaWdodCxcbiAgICAgIHdpZHRoID0gcHJvcHMud2lkdGg7XG4gIHZhciBtdWlUaGVtZSA9IGNvbnRleHQubXVpVGhlbWU7XG5cblxuICB2YXIgc3R5bGVzID0ge1xuICAgIHJvb3Q6IHtcbiAgICAgIC8vIE5lc3RlZCBkaXYgYmFjYXVzZSB0aGUgTGlzdCBzY2FsZXMgeCBmYXN0ZXIgdGhhbiBpdCBzY2FsZXMgeVxuICAgICAgekluZGV4OiBtdWlUaGVtZS56SW5kZXgubWVudSxcbiAgICAgIG1heEhlaWdodDogbWF4SGVpZ2h0LFxuICAgICAgb3ZlcmZsb3dZOiBtYXhIZWlnaHQgPyAnYXV0bycgOiBudWxsXG4gICAgfSxcbiAgICBkaXZpZGVyOiB7XG4gICAgICBtYXJnaW5Ub3A6IDcsXG4gICAgICBtYXJnaW5Cb3R0b206IDhcbiAgICB9LFxuICAgIGxpc3Q6IHtcbiAgICAgIGRpc3BsYXk6ICd0YWJsZS1jZWxsJyxcbiAgICAgIHBhZGRpbmdCb3R0b206IGRlc2t0b3AgPyAxNiA6IDgsXG4gICAgICBwYWRkaW5nVG9wOiBkZXNrdG9wID8gMTYgOiA4LFxuICAgICAgdXNlclNlbGVjdDogJ25vbmUnLFxuICAgICAgd2lkdGg6IHdpZHRoXG4gICAgfSxcbiAgICBzZWxlY3RlZE1lbnVJdGVtOiB7XG4gICAgICBjb2xvcjogbXVpVGhlbWUubWVudUl0ZW0uc2VsZWN0ZWRUZXh0Q29sb3JcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHN0eWxlcztcbn1cblxudmFyIE1lbnUgPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzMy5kZWZhdWx0KShNZW51LCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBNZW51KHByb3BzLCBjb250ZXh0KSB7XG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgTWVudSk7XG5cbiAgICB2YXIgX3RoaXMgPSAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zLmRlZmF1bHQpKHRoaXMsIChNZW51Ll9fcHJvdG9fXyB8fCAoMCwgX2dldFByb3RvdHlwZU9mMi5kZWZhdWx0KShNZW51KSkuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkpO1xuXG4gICAgX2luaXRpYWxpc2VQcm9wcy5jYWxsKF90aGlzKTtcblxuICAgIHZhciBmaWx0ZXJlZENoaWxkcmVuID0gX3RoaXMuZ2V0RmlsdGVyZWRDaGlsZHJlbihwcm9wcy5jaGlsZHJlbik7XG4gICAgdmFyIHNlbGVjdGVkSW5kZXggPSBfdGhpcy5nZXRMYXN0U2VsZWN0ZWRJbmRleChwcm9wcywgZmlsdGVyZWRDaGlsZHJlbik7XG5cbiAgICB2YXIgbmV3Rm9jdXNJbmRleCA9IHByb3BzLmRpc2FibGVBdXRvRm9jdXMgPyAtMSA6IHNlbGVjdGVkSW5kZXggPj0gMCA/IHNlbGVjdGVkSW5kZXggOiAwO1xuICAgIGlmIChuZXdGb2N1c0luZGV4ICE9PSAtMSAmJiBwcm9wcy5vbk1lbnVJdGVtRm9jdXNDaGFuZ2UpIHtcbiAgICAgIHByb3BzLm9uTWVudUl0ZW1Gb2N1c0NoYW5nZShudWxsLCBuZXdGb2N1c0luZGV4KTtcbiAgICB9XG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBmb2N1c0luZGV4OiBuZXdGb2N1c0luZGV4LFxuICAgICAgaXNLZXlib2FyZEZvY3VzZWQ6IHByb3BzLmluaXRpYWxseUtleWJvYXJkRm9jdXNlZCxcbiAgICAgIGtleVdpZHRoOiBwcm9wcy5kZXNrdG9wID8gNjQgOiA1NlxuICAgIH07XG5cbiAgICBfdGhpcy5ob3RLZXlIb2xkZXIgPSBuZXcgX21lbnVVdGlscy5Ib3RLZXlIb2xkZXIoKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShNZW51LCBbe1xuICAgIGtleTogJ2NvbXBvbmVudERpZE1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy5hdXRvV2lkdGgpIHtcbiAgICAgICAgdGhpcy5zZXRXaWR0aCgpO1xuICAgICAgfVxuICAgICAgdGhpcy5zZXRTY29sbFBvc2l0aW9uKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICB2YXIgc2VsZWN0ZWRJbmRleCA9IHZvaWQgMDtcbiAgICAgIHZhciBmaWx0ZXJlZENoaWxkcmVuID0gdGhpcy5nZXRGaWx0ZXJlZENoaWxkcmVuKG5leHRQcm9wcy5jaGlsZHJlbik7XG5cbiAgICAgIGlmICh0aGlzLnByb3BzLm11bHRpcGxlICE9PSB0cnVlKSB7XG4gICAgICAgIHNlbGVjdGVkSW5kZXggPSB0aGlzLmdldExhc3RTZWxlY3RlZEluZGV4KG5leHRQcm9wcywgZmlsdGVyZWRDaGlsZHJlbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZWxlY3RlZEluZGV4ID0gdGhpcy5zdGF0ZS5mb2N1c0luZGV4O1xuICAgICAgfVxuXG4gICAgICB2YXIgbmV3Rm9jdXNJbmRleCA9IG5leHRQcm9wcy5kaXNhYmxlQXV0b0ZvY3VzID8gLTEgOiBzZWxlY3RlZEluZGV4ID49IDAgPyBzZWxlY3RlZEluZGV4IDogMDtcbiAgICAgIGlmIChuZXdGb2N1c0luZGV4ICE9PSB0aGlzLnN0YXRlLmZvY3VzSW5kZXggJiYgdGhpcy5wcm9wcy5vbk1lbnVJdGVtRm9jdXNDaGFuZ2UpIHtcbiAgICAgICAgdGhpcy5wcm9wcy5vbk1lbnVJdGVtRm9jdXNDaGFuZ2UobnVsbCwgbmV3Rm9jdXNJbmRleCk7XG4gICAgICB9XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgZm9jdXNJbmRleDogbmV3Rm9jdXNJbmRleCxcbiAgICAgICAga2V5V2lkdGg6IG5leHRQcm9wcy5kZXNrdG9wID8gNjQgOiA1NlxuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2hvdWxkQ29tcG9uZW50VXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcywgbmV4dFN0YXRlLCBuZXh0Q29udGV4dCkge1xuICAgICAgcmV0dXJuICEoMCwgX3NoYWxsb3dFcXVhbDIuZGVmYXVsdCkodGhpcy5wcm9wcywgbmV4dFByb3BzKSB8fCAhKDAsIF9zaGFsbG93RXF1YWwyLmRlZmF1bHQpKHRoaXMuc3RhdGUsIG5leHRTdGF0ZSkgfHwgISgwLCBfc2hhbGxvd0VxdWFsMi5kZWZhdWx0KSh0aGlzLmNvbnRleHQsIG5leHRDb250ZXh0KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnREaWRVcGRhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUoKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy5hdXRvV2lkdGgpIHRoaXMuc2V0V2lkdGgoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRWYWx1ZUxpbmsnLFxuXG5cbiAgICAvLyBEbyBub3QgdXNlIG91dHNpZGUgb2YgdGhpcyBjb21wb25lbnQsIGl0IHdpbGwgYmUgcmVtb3ZlZCBvbmNlIHZhbHVlTGluayBpcyBkZXByZWNhdGVkXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFZhbHVlTGluayhwcm9wcykge1xuICAgICAgcmV0dXJuIHByb3BzLnZhbHVlTGluayB8fCB7XG4gICAgICAgIHZhbHVlOiBwcm9wcy52YWx1ZSxcbiAgICAgICAgcmVxdWVzdENoYW5nZTogcHJvcHMub25DaGFuZ2VcbiAgICAgIH07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2V0S2V5Ym9hcmRGb2N1c2VkJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0S2V5Ym9hcmRGb2N1c2VkKGtleWJvYXJkRm9jdXNlZCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGlzS2V5Ym9hcmRGb2N1c2VkOiBrZXlib2FyZEZvY3VzZWRcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldEZpbHRlcmVkQ2hpbGRyZW4nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRGaWx0ZXJlZENoaWxkcmVuKGNoaWxkcmVuKSB7XG4gICAgICB2YXIgZmlsdGVyZWRDaGlsZHJlbiA9IFtdO1xuICAgICAgX3JlYWN0Mi5kZWZhdWx0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICBpZiAoY2hpbGQpIHtcbiAgICAgICAgICBmaWx0ZXJlZENoaWxkcmVuLnB1c2goY2hpbGQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBmaWx0ZXJlZENoaWxkcmVuO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2Nsb25lTWVudUl0ZW0nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjbG9uZU1lbnVJdGVtKGNoaWxkLCBjaGlsZEluZGV4LCBzdHlsZXMsIGluZGV4KSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIGNoaWxkSXNEaXNhYmxlZCA9IGNoaWxkLnByb3BzLmRpc2FibGVkO1xuXG4gICAgICB2YXIgc2VsZWN0ZWRDaGlsZFN0eWxlcyA9IHt9O1xuICAgICAgaWYgKCFjaGlsZElzRGlzYWJsZWQpIHtcbiAgICAgICAgdmFyIHNlbGVjdGVkID0gdGhpcy5pc0NoaWxkU2VsZWN0ZWQoY2hpbGQsIHRoaXMucHJvcHMpO1xuXG4gICAgICAgIGlmIChzZWxlY3RlZCkge1xuICAgICAgICAgICgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KShzZWxlY3RlZENoaWxkU3R5bGVzLCBzdHlsZXMuc2VsZWN0ZWRNZW51SXRlbSwgdGhpcy5wcm9wcy5zZWxlY3RlZE1lbnVJdGVtU3R5bGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgbWVyZ2VkQ2hpbGRTdHlsZXMgPSAoMCwgX3NpbXBsZUFzc2lnbjIuZGVmYXVsdCkoe30sIGNoaWxkLnByb3BzLnN0eWxlLCB0aGlzLnByb3BzLm1lbnVJdGVtU3R5bGUsIHNlbGVjdGVkQ2hpbGRTdHlsZXMpO1xuXG4gICAgICB2YXIgZXh0cmFQcm9wcyA9IHtcbiAgICAgICAgZGVza3RvcDogdGhpcy5wcm9wcy5kZXNrdG9wLFxuICAgICAgICBzdHlsZTogbWVyZ2VkQ2hpbGRTdHlsZXNcbiAgICAgIH07XG4gICAgICBpZiAoIWNoaWxkSXNEaXNhYmxlZCkge1xuICAgICAgICB2YXIgaXNGb2N1c2VkID0gY2hpbGRJbmRleCA9PT0gdGhpcy5zdGF0ZS5mb2N1c0luZGV4O1xuICAgICAgICB2YXIgZm9jdXNTdGF0ZSA9ICdub25lJztcbiAgICAgICAgaWYgKGlzRm9jdXNlZCkge1xuICAgICAgICAgIGZvY3VzU3RhdGUgPSB0aGlzLnN0YXRlLmlzS2V5Ym9hcmRGb2N1c2VkID8gJ2tleWJvYXJkLWZvY3VzZWQnIDogJ2ZvY3VzZWQnO1xuICAgICAgICB9XG5cbiAgICAgICAgKDAsIF9zaW1wbGVBc3NpZ24yLmRlZmF1bHQpKGV4dHJhUHJvcHMsIHtcbiAgICAgICAgICBmb2N1c1N0YXRlOiBmb2N1c1N0YXRlLFxuICAgICAgICAgIG9uVG91Y2hUYXA6IGZ1bmN0aW9uIG9uVG91Y2hUYXAoZXZlbnQpIHtcbiAgICAgICAgICAgIF90aGlzMi5oYW5kbGVNZW51SXRlbVRvdWNoVGFwKGV2ZW50LCBjaGlsZCwgaW5kZXgpO1xuICAgICAgICAgICAgaWYgKGNoaWxkLnByb3BzLm9uVG91Y2hUYXApIGNoaWxkLnByb3BzLm9uVG91Y2hUYXAoZXZlbnQpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgcmVmOiBpc0ZvY3VzZWQgPyAnZm9jdXNlZE1lbnVJdGVtJyA6IG51bGxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNsb25lRWxlbWVudChjaGlsZCwgZXh0cmFQcm9wcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZGVjcmVtZW50S2V5Ym9hcmRGb2N1c0luZGV4JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVjcmVtZW50S2V5Ym9hcmRGb2N1c0luZGV4KGV2ZW50KSB7XG4gICAgICB2YXIgaW5kZXggPSB0aGlzLnN0YXRlLmZvY3VzSW5kZXg7XG5cbiAgICAgIGluZGV4LS07XG4gICAgICBpZiAoaW5kZXggPCAwKSBpbmRleCA9IDA7XG5cbiAgICAgIHRoaXMuc2V0Rm9jdXNJbmRleChldmVudCwgaW5kZXgsIHRydWUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldE1lbnVJdGVtQ291bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRNZW51SXRlbUNvdW50KGZpbHRlcmVkQ2hpbGRyZW4pIHtcbiAgICAgIHZhciBtZW51SXRlbUNvdW50ID0gMDtcbiAgICAgIGZpbHRlcmVkQ2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgdmFyIGNoaWxkSXNBRGl2aWRlciA9IGNoaWxkLnR5cGUgJiYgY2hpbGQudHlwZS5tdWlOYW1lID09PSAnRGl2aWRlcic7XG4gICAgICAgIHZhciBjaGlsZElzRGlzYWJsZWQgPSBjaGlsZC5wcm9wcy5kaXNhYmxlZDtcbiAgICAgICAgaWYgKCFjaGlsZElzQURpdmlkZXIgJiYgIWNoaWxkSXNEaXNhYmxlZCkgbWVudUl0ZW1Db3VudCsrO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gbWVudUl0ZW1Db3VudDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRMYXN0U2VsZWN0ZWRJbmRleCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldExhc3RTZWxlY3RlZEluZGV4KHByb3BzLCBmaWx0ZXJlZENoaWxkcmVuKSB7XG4gICAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgICAgdmFyIHNlbGVjdGVkSW5kZXggPSAtMTtcbiAgICAgIHZhciBtZW51SXRlbUluZGV4ID0gMDtcblxuICAgICAgZmlsdGVyZWRDaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICB2YXIgY2hpbGRJc0FEaXZpZGVyID0gY2hpbGQudHlwZSAmJiBjaGlsZC50eXBlLm11aU5hbWUgPT09ICdEaXZpZGVyJztcblxuICAgICAgICBpZiAoX3RoaXMzLmlzQ2hpbGRTZWxlY3RlZChjaGlsZCwgcHJvcHMpKSBzZWxlY3RlZEluZGV4ID0gbWVudUl0ZW1JbmRleDtcbiAgICAgICAgaWYgKCFjaGlsZElzQURpdmlkZXIpIG1lbnVJdGVtSW5kZXgrKztcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gc2VsZWN0ZWRJbmRleDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzZXRGb2N1c0luZGV4U3RhcnRzV2l0aCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldEZvY3VzSW5kZXhTdGFydHNXaXRoKGV2ZW50LCBrZXlzKSB7XG4gICAgICB2YXIgZm91bmRJbmRleCA9IC0xO1xuICAgICAgX3JlYWN0Mi5kZWZhdWx0LkNoaWxkcmVuLmZvckVhY2godGhpcy5wcm9wcy5jaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkLCBpbmRleCkge1xuICAgICAgICBpZiAoZm91bmRJbmRleCA+PSAwKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBwcmltYXJ5VGV4dCA9IGNoaWxkLnByb3BzLnByaW1hcnlUZXh0O1xuXG4gICAgICAgIGlmICh0eXBlb2YgcHJpbWFyeVRleHQgPT09ICdzdHJpbmcnICYmIHByaW1hcnlUZXh0LnN1YnN0cigwLCBrZXlzLmxlbmd0aCkudG9Mb3dlckNhc2UoKSA9PT0ga2V5cy50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgZm91bmRJbmRleCA9IGluZGV4O1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGlmIChmb3VuZEluZGV4ID49IDApIHtcbiAgICAgICAgdGhpcy5zZXRGb2N1c0luZGV4KGV2ZW50LCBmb3VuZEluZGV4LCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnaGFuZGxlTWVudUl0ZW1Ub3VjaFRhcCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGhhbmRsZU1lbnVJdGVtVG91Y2hUYXAoZXZlbnQsIGl0ZW0sIGluZGV4KSB7XG4gICAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICAgICAgdmFyIG11bHRpcGxlID0gdGhpcy5wcm9wcy5tdWx0aXBsZTtcbiAgICAgIHZhciB2YWx1ZUxpbmsgPSB0aGlzLmdldFZhbHVlTGluayh0aGlzLnByb3BzKTtcbiAgICAgIHZhciBtZW51VmFsdWUgPSB2YWx1ZUxpbmsudmFsdWU7XG4gICAgICB2YXIgaXRlbVZhbHVlID0gaXRlbS5wcm9wcy52YWx1ZTtcbiAgICAgIHZhciBmb2N1c0luZGV4ID0gX3JlYWN0Mi5kZWZhdWx0LmlzVmFsaWRFbGVtZW50KGNoaWxkcmVuKSA/IDAgOiBjaGlsZHJlbi5pbmRleE9mKGl0ZW0pO1xuXG4gICAgICB0aGlzLnNldEZvY3VzSW5kZXgoZXZlbnQsIGZvY3VzSW5kZXgsIGZhbHNlKTtcblxuICAgICAgaWYgKG11bHRpcGxlKSB7XG4gICAgICAgIG1lbnVWYWx1ZSA9IG1lbnVWYWx1ZSB8fCBbXTtcblxuICAgICAgICB2YXIgaXRlbUluZGV4ID0gbWVudVZhbHVlLmluZGV4T2YoaXRlbVZhbHVlKTtcblxuICAgICAgICB2YXIgX21lbnVWYWx1ZSA9IG1lbnVWYWx1ZSxcbiAgICAgICAgICAgIF9tZW51VmFsdWUyID0gKDAsIF90b0FycmF5My5kZWZhdWx0KShfbWVudVZhbHVlKSxcbiAgICAgICAgICAgIG5ld01lbnVWYWx1ZSA9IF9tZW51VmFsdWUyLnNsaWNlKDApO1xuXG4gICAgICAgIGlmIChpdGVtSW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgbmV3TWVudVZhbHVlLnB1c2goaXRlbVZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXdNZW51VmFsdWUuc3BsaWNlKGl0ZW1JbmRleCwgMSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YWx1ZUxpbmsucmVxdWVzdENoYW5nZShldmVudCwgbmV3TWVudVZhbHVlKTtcbiAgICAgIH0gZWxzZSBpZiAoIW11bHRpcGxlICYmIGl0ZW1WYWx1ZSAhPT0gbWVudVZhbHVlKSB7XG4gICAgICAgIHZhbHVlTGluay5yZXF1ZXN0Q2hhbmdlKGV2ZW50LCBpdGVtVmFsdWUpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnByb3BzLm9uSXRlbVRvdWNoVGFwKGV2ZW50LCBpdGVtLCBpbmRleCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnaW5jcmVtZW50S2V5Ym9hcmRGb2N1c0luZGV4JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5jcmVtZW50S2V5Ym9hcmRGb2N1c0luZGV4KGV2ZW50LCBmaWx0ZXJlZENoaWxkcmVuKSB7XG4gICAgICB2YXIgaW5kZXggPSB0aGlzLnN0YXRlLmZvY3VzSW5kZXg7XG4gICAgICB2YXIgbWF4SW5kZXggPSB0aGlzLmdldE1lbnVJdGVtQ291bnQoZmlsdGVyZWRDaGlsZHJlbikgLSAxO1xuXG4gICAgICBpbmRleCsrO1xuICAgICAgaWYgKGluZGV4ID4gbWF4SW5kZXgpIGluZGV4ID0gbWF4SW5kZXg7XG5cbiAgICAgIHRoaXMuc2V0Rm9jdXNJbmRleChldmVudCwgaW5kZXgsIHRydWUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2lzQ2hpbGRTZWxlY3RlZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGlzQ2hpbGRTZWxlY3RlZChjaGlsZCwgcHJvcHMpIHtcbiAgICAgIHZhciBtZW51VmFsdWUgPSB0aGlzLmdldFZhbHVlTGluayhwcm9wcykudmFsdWU7XG4gICAgICB2YXIgY2hpbGRWYWx1ZSA9IGNoaWxkLnByb3BzLnZhbHVlO1xuXG4gICAgICBpZiAocHJvcHMubXVsdGlwbGUpIHtcbiAgICAgICAgcmV0dXJuIG1lbnVWYWx1ZSAmJiBtZW51VmFsdWUubGVuZ3RoICYmIG1lbnVWYWx1ZS5pbmRleE9mKGNoaWxkVmFsdWUpICE9PSAtMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBjaGlsZC5wcm9wcy5oYXNPd25Qcm9wZXJ0eSgndmFsdWUnKSAmJiBtZW51VmFsdWUgPT09IGNoaWxkVmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2V0Rm9jdXNJbmRleCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldEZvY3VzSW5kZXgoZXZlbnQsIG5ld0luZGV4LCBpc0tleWJvYXJkRm9jdXNlZCkge1xuICAgICAgaWYgKHRoaXMucHJvcHMub25NZW51SXRlbUZvY3VzQ2hhbmdlKSB7XG4gICAgICAgIC8vIERvIHRoaXMgZXZlbiBpZiBgbmV3SW5kZXggPT09IHRoaXMuc3RhdGUuZm9jdXNJbmRleGAgdG8gYWxsb3cgdXNlcnNcbiAgICAgICAgLy8gdG8gZGV0ZWN0IHVwLWFycm93IG9uIHRoZSBmaXJzdCBNZW51SXRlbSBvciBkb3duLWFycm93IG9uIHRoZSBsYXN0LlxuICAgICAgICB0aGlzLnByb3BzLm9uTWVudUl0ZW1Gb2N1c0NoYW5nZShldmVudCwgbmV3SW5kZXgpO1xuICAgICAgfVxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGZvY3VzSW5kZXg6IG5ld0luZGV4LFxuICAgICAgICBpc0tleWJvYXJkRm9jdXNlZDogaXNLZXlib2FyZEZvY3VzZWRcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3NldFNjb2xsUG9zaXRpb24nLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRTY29sbFBvc2l0aW9uKCkge1xuICAgICAgdmFyIGRlc2t0b3AgPSB0aGlzLnByb3BzLmRlc2t0b3A7XG4gICAgICB2YXIgZm9jdXNlZE1lbnVJdGVtID0gdGhpcy5yZWZzLmZvY3VzZWRNZW51SXRlbTtcbiAgICAgIHZhciBtZW51SXRlbUhlaWdodCA9IGRlc2t0b3AgPyAzMiA6IDQ4O1xuXG4gICAgICBpZiAoZm9jdXNlZE1lbnVJdGVtKSB7XG4gICAgICAgIHZhciBzZWxlY3RlZE9mZlNldCA9IF9yZWFjdERvbTIuZGVmYXVsdC5maW5kRE9NTm9kZShmb2N1c2VkTWVudUl0ZW0pLm9mZnNldFRvcDtcblxuICAgICAgICAvLyBNYWtlIHRoZSBmb2N1c2VkIGl0ZW0gYmUgdGhlIDJuZCBpdGVtIGluIHRoZSBsaXN0IHRoZSB1c2VyIHNlZXNcbiAgICAgICAgdmFyIHNjcm9sbFRvcCA9IHNlbGVjdGVkT2ZmU2V0IC0gbWVudUl0ZW1IZWlnaHQ7XG4gICAgICAgIGlmIChzY3JvbGxUb3AgPCBtZW51SXRlbUhlaWdodCkgc2Nyb2xsVG9wID0gMDtcblxuICAgICAgICBfcmVhY3REb20yLmRlZmF1bHQuZmluZERPTU5vZGUodGhpcy5yZWZzLnNjcm9sbENvbnRhaW5lcikuc2Nyb2xsVG9wID0gc2Nyb2xsVG9wO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NhbmNlbFNjcm9sbEV2ZW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2FuY2VsU2Nyb2xsRXZlbnQoZXZlbnQpIHtcbiAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzZXRXaWR0aCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFdpZHRoKCkge1xuICAgICAgdmFyIGVsID0gX3JlYWN0RG9tMi5kZWZhdWx0LmZpbmRET01Ob2RlKHRoaXMpO1xuICAgICAgdmFyIGxpc3RFbCA9IF9yZWFjdERvbTIuZGVmYXVsdC5maW5kRE9NTm9kZSh0aGlzLnJlZnMubGlzdCk7XG4gICAgICB2YXIgZWxXaWR0aCA9IGVsLm9mZnNldFdpZHRoO1xuICAgICAgdmFyIGtleVdpZHRoID0gdGhpcy5zdGF0ZS5rZXlXaWR0aDtcbiAgICAgIHZhciBtaW5XaWR0aCA9IGtleVdpZHRoICogMS41O1xuICAgICAgdmFyIGtleUluY3JlbWVudHMgPSBlbFdpZHRoIC8ga2V5V2lkdGg7XG4gICAgICB2YXIgbmV3V2lkdGggPSB2b2lkIDA7XG5cbiAgICAgIGtleUluY3JlbWVudHMgPSBrZXlJbmNyZW1lbnRzIDw9IDEuNSA/IDEuNSA6IE1hdGguY2VpbChrZXlJbmNyZW1lbnRzKTtcbiAgICAgIG5ld1dpZHRoID0ga2V5SW5jcmVtZW50cyAqIGtleVdpZHRoO1xuXG4gICAgICBpZiAobmV3V2lkdGggPCBtaW5XaWR0aCkgbmV3V2lkdGggPSBtaW5XaWR0aDtcblxuICAgICAgZWwuc3R5bGUud2lkdGggPSBuZXdXaWR0aCArICdweCc7XG4gICAgICBsaXN0RWwuc3R5bGUud2lkdGggPSBuZXdXaWR0aCArICdweCc7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGF1dG9XaWR0aCA9IF9wcm9wcy5hdXRvV2lkdGgsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgZGVza3RvcCA9IF9wcm9wcy5kZXNrdG9wLFxuICAgICAgICAgIGRpc2FibGVBdXRvRm9jdXMgPSBfcHJvcHMuZGlzYWJsZUF1dG9Gb2N1cyxcbiAgICAgICAgICBpbml0aWFsbHlLZXlib2FyZEZvY3VzZWQgPSBfcHJvcHMuaW5pdGlhbGx5S2V5Ym9hcmRGb2N1c2VkLFxuICAgICAgICAgIGxpc3RTdHlsZSA9IF9wcm9wcy5saXN0U3R5bGUsXG4gICAgICAgICAgbWF4SGVpZ2h0ID0gX3Byb3BzLm1heEhlaWdodCxcbiAgICAgICAgICBtdWx0aXBsZSA9IF9wcm9wcy5tdWx0aXBsZSxcbiAgICAgICAgICBvbkl0ZW1Ub3VjaFRhcCA9IF9wcm9wcy5vbkl0ZW1Ub3VjaFRhcCxcbiAgICAgICAgICBvbkVzY0tleURvd24gPSBfcHJvcHMub25Fc2NLZXlEb3duLFxuICAgICAgICAgIG9uTWVudUl0ZW1Gb2N1c0NoYW5nZSA9IF9wcm9wcy5vbk1lbnVJdGVtRm9jdXNDaGFuZ2UsXG4gICAgICAgICAgc2VsZWN0ZWRNZW51SXRlbVN0eWxlID0gX3Byb3BzLnNlbGVjdGVkTWVudUl0ZW1TdHlsZSxcbiAgICAgICAgICBtZW51SXRlbVN0eWxlID0gX3Byb3BzLm1lbnVJdGVtU3R5bGUsXG4gICAgICAgICAgc3R5bGUgPSBfcHJvcHMuc3R5bGUsXG4gICAgICAgICAgdmFsdWUgPSBfcHJvcHMudmFsdWUsXG4gICAgICAgICAgdmFsdWVMaW5rID0gX3Byb3BzLnZhbHVlTGluayxcbiAgICAgICAgICB3aWR0aCA9IF9wcm9wcy53aWR0aCxcbiAgICAgICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMzLmRlZmF1bHQpKF9wcm9wcywgWydhdXRvV2lkdGgnLCAnY2hpbGRyZW4nLCAnZGVza3RvcCcsICdkaXNhYmxlQXV0b0ZvY3VzJywgJ2luaXRpYWxseUtleWJvYXJkRm9jdXNlZCcsICdsaXN0U3R5bGUnLCAnbWF4SGVpZ2h0JywgJ211bHRpcGxlJywgJ29uSXRlbVRvdWNoVGFwJywgJ29uRXNjS2V5RG93bicsICdvbk1lbnVJdGVtRm9jdXNDaGFuZ2UnLCAnc2VsZWN0ZWRNZW51SXRlbVN0eWxlJywgJ21lbnVJdGVtU3R5bGUnLCAnc3R5bGUnLCAndmFsdWUnLCAndmFsdWVMaW5rJywgJ3dpZHRoJ10pO1xuICAgICAgdmFyIHByZXBhcmVTdHlsZXMgPSB0aGlzLmNvbnRleHQubXVpVGhlbWUucHJlcGFyZVN0eWxlcztcblxuICAgICAgdmFyIHN0eWxlcyA9IGdldFN0eWxlcyh0aGlzLnByb3BzLCB0aGlzLmNvbnRleHQpO1xuXG4gICAgICB2YXIgbWVyZ2VkUm9vdFN0eWxlcyA9ICgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KShzdHlsZXMucm9vdCwgc3R5bGUpO1xuICAgICAgdmFyIG1lcmdlZExpc3RTdHlsZXMgPSAoMCwgX3NpbXBsZUFzc2lnbjIuZGVmYXVsdCkoc3R5bGVzLmxpc3QsIGxpc3RTdHlsZSk7XG5cbiAgICAgIHZhciBmaWx0ZXJlZENoaWxkcmVuID0gdGhpcy5nZXRGaWx0ZXJlZENoaWxkcmVuKGNoaWxkcmVuKTtcblxuICAgICAgdmFyIG1lbnVJdGVtSW5kZXggPSAwO1xuICAgICAgdmFyIG5ld0NoaWxkcmVuID0gX3JlYWN0Mi5kZWZhdWx0LkNoaWxkcmVuLm1hcChmaWx0ZXJlZENoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQsIGluZGV4KSB7XG4gICAgICAgIHZhciBjaGlsZElzRGlzYWJsZWQgPSBjaGlsZC5wcm9wcy5kaXNhYmxlZDtcbiAgICAgICAgdmFyIGNoaWxkTmFtZSA9IGNoaWxkLnR5cGUgPyBjaGlsZC50eXBlLm11aU5hbWUgOiAnJztcbiAgICAgICAgdmFyIG5ld0NoaWxkID0gY2hpbGQ7XG5cbiAgICAgICAgc3dpdGNoIChjaGlsZE5hbWUpIHtcbiAgICAgICAgICBjYXNlICdNZW51SXRlbSc6XG4gICAgICAgICAgICBuZXdDaGlsZCA9IF90aGlzNC5jbG9uZU1lbnVJdGVtKGNoaWxkLCBtZW51SXRlbUluZGV4LCBzdHlsZXMsIGluZGV4KTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAnRGl2aWRlcic6XG4gICAgICAgICAgICBuZXdDaGlsZCA9IF9yZWFjdDIuZGVmYXVsdC5jbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgICAgICAgICAgc3R5bGU6ICgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KSh7fSwgc3R5bGVzLmRpdmlkZXIsIGNoaWxkLnByb3BzLnN0eWxlKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjaGlsZE5hbWUgPT09ICdNZW51SXRlbScgJiYgIWNoaWxkSXNEaXNhYmxlZCkge1xuICAgICAgICAgIG1lbnVJdGVtSW5kZXgrKztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXdDaGlsZDtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIF9DbGlja0F3YXlMaXN0ZW5lcjIuZGVmYXVsdCxcbiAgICAgICAgeyBvbkNsaWNrQXdheTogdGhpcy5oYW5kbGVDbGlja0F3YXkgfSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAge1xuICAgICAgICAgICAgb25LZXlEb3duOiB0aGlzLmhhbmRsZUtleURvd24sXG4gICAgICAgICAgICBvbldoZWVsOiB0aGlzLmhhbmRsZU9uV2hlZWwsXG4gICAgICAgICAgICBzdHlsZTogcHJlcGFyZVN0eWxlcyhtZXJnZWRSb290U3R5bGVzKSxcbiAgICAgICAgICAgIHJlZjogJ3Njcm9sbENvbnRhaW5lcicsXG4gICAgICAgICAgICByb2xlOiAncHJlc2VudGF0aW9uJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICBfTGlzdDIuZGVmYXVsdCxcbiAgICAgICAgICAgICgwLCBfZXh0ZW5kczMuZGVmYXVsdCkoe30sIG90aGVyLCB7XG4gICAgICAgICAgICAgIHJlZjogJ2xpc3QnLFxuICAgICAgICAgICAgICBzdHlsZTogbWVyZ2VkTGlzdFN0eWxlcyxcbiAgICAgICAgICAgICAgcm9sZTogJ21lbnUnXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIG5ld0NoaWxkcmVuXG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgICApO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gTWVudTtcbn0oX3JlYWN0LkNvbXBvbmVudCk7XG5cbk1lbnUuZGVmYXVsdFByb3BzID0ge1xuICBhdXRvV2lkdGg6IHRydWUsXG4gIGRlc2t0b3A6IGZhbHNlLFxuICBkaXNhYmxlQXV0b0ZvY3VzOiBmYWxzZSxcbiAgaW5pdGlhbGx5S2V5Ym9hcmRGb2N1c2VkOiBmYWxzZSxcbiAgbWF4SGVpZ2h0OiBudWxsLFxuICBtdWx0aXBsZTogZmFsc2UsXG4gIG9uQ2hhbmdlOiBmdW5jdGlvbiBvbkNoYW5nZSgpIHt9LFxuICBvbkVzY0tleURvd246IGZ1bmN0aW9uIG9uRXNjS2V5RG93bigpIHt9LFxuICBvbkl0ZW1Ub3VjaFRhcDogZnVuY3Rpb24gb25JdGVtVG91Y2hUYXAoKSB7fSxcbiAgb25LZXlEb3duOiBmdW5jdGlvbiBvbktleURvd24oKSB7fVxufTtcbk1lbnUuY29udGV4dFR5cGVzID0ge1xuICBtdWlUaGVtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZFxufTtcblxudmFyIF9pbml0aWFsaXNlUHJvcHMgPSBmdW5jdGlvbiBfaW5pdGlhbGlzZVByb3BzKCkge1xuICB2YXIgX3RoaXM1ID0gdGhpcztcblxuICB0aGlzLmhhbmRsZUNsaWNrQXdheSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgIGlmIChldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgX3RoaXM1LnNldEZvY3VzSW5kZXgoZXZlbnQsIC0xLCBmYWxzZSk7XG4gIH07XG5cbiAgdGhpcy5oYW5kbGVLZXlEb3duID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgdmFyIGZpbHRlcmVkQ2hpbGRyZW4gPSBfdGhpczUuZ2V0RmlsdGVyZWRDaGlsZHJlbihfdGhpczUucHJvcHMuY2hpbGRyZW4pO1xuICAgIHZhciBrZXkgPSAoMCwgX2tleWNvZGUyLmRlZmF1bHQpKGV2ZW50KTtcbiAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgY2FzZSAnZG93bic6XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIF90aGlzNS5pbmNyZW1lbnRLZXlib2FyZEZvY3VzSW5kZXgoZXZlbnQsIGZpbHRlcmVkQ2hpbGRyZW4pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2VzYyc6XG4gICAgICAgIF90aGlzNS5wcm9wcy5vbkVzY0tleURvd24oZXZlbnQpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3RhYic6XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGlmIChldmVudC5zaGlmdEtleSkge1xuICAgICAgICAgIF90aGlzNS5kZWNyZW1lbnRLZXlib2FyZEZvY3VzSW5kZXgoZXZlbnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzNS5pbmNyZW1lbnRLZXlib2FyZEZvY3VzSW5kZXgoZXZlbnQsIGZpbHRlcmVkQ2hpbGRyZW4pO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAndXAnOlxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBfdGhpczUuZGVjcmVtZW50S2V5Ym9hcmRGb2N1c0luZGV4KGV2ZW50KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAoa2V5ICYmIGtleS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICB2YXIgaG90S2V5cyA9IF90aGlzNS5ob3RLZXlIb2xkZXIuYXBwZW5kKGtleSk7XG4gICAgICAgICAgaWYgKF90aGlzNS5zZXRGb2N1c0luZGV4U3RhcnRzV2l0aChldmVudCwgaG90S2V5cykpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIF90aGlzNS5wcm9wcy5vbktleURvd24oZXZlbnQpO1xuICB9O1xuXG4gIHRoaXMuaGFuZGxlT25XaGVlbCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgIHZhciBzY3JvbGxDb250YWluZXIgPSBfdGhpczUucmVmcy5zY3JvbGxDb250YWluZXI7XG4gICAgLy8gT25seSBzY3JvbGwgbG9jayBpZiB0aGUgdGhlIE1lbnUgaXMgc2Nyb2xsYWJsZS5cbiAgICBpZiAoc2Nyb2xsQ29udGFpbmVyLnNjcm9sbEhlaWdodCA8PSBzY3JvbGxDb250YWluZXIuY2xpZW50SGVpZ2h0KSByZXR1cm47XG5cbiAgICB2YXIgc2Nyb2xsVG9wID0gc2Nyb2xsQ29udGFpbmVyLnNjcm9sbFRvcCxcbiAgICAgICAgc2Nyb2xsSGVpZ2h0ID0gc2Nyb2xsQ29udGFpbmVyLnNjcm9sbEhlaWdodCxcbiAgICAgICAgY2xpZW50SGVpZ2h0ID0gc2Nyb2xsQ29udGFpbmVyLmNsaWVudEhlaWdodDtcblxuICAgIHZhciB3aGVlbERlbHRhID0gZXZlbnQuZGVsdGFZO1xuICAgIHZhciBpc0RlbHRhUG9zaXRpdmUgPSB3aGVlbERlbHRhID4gMDtcblxuICAgIGlmIChpc0RlbHRhUG9zaXRpdmUgJiYgd2hlZWxEZWx0YSA+IHNjcm9sbEhlaWdodCAtIGNsaWVudEhlaWdodCAtIHNjcm9sbFRvcCkge1xuICAgICAgc2Nyb2xsQ29udGFpbmVyLnNjcm9sbFRvcCA9IHNjcm9sbEhlaWdodDtcbiAgICAgIHJldHVybiBfdGhpczUuY2FuY2VsU2Nyb2xsRXZlbnQoZXZlbnQpO1xuICAgIH0gZWxzZSBpZiAoIWlzRGVsdGFQb3NpdGl2ZSAmJiAtd2hlZWxEZWx0YSA+IHNjcm9sbFRvcCkge1xuICAgICAgc2Nyb2xsQ29udGFpbmVyLnNjcm9sbFRvcCA9IDA7XG4gICAgICByZXR1cm4gX3RoaXM1LmNhbmNlbFNjcm9sbEV2ZW50KGV2ZW50KTtcbiAgICB9XG4gIH07XG59O1xuXG5NZW51LnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIElmIHRydWUsIHRoZSB3aWR0aCBvZiB0aGUgbWVudSB3aWxsIGJlIHNldCBhdXRvbWF0aWNhbGx5XG4gICAqIGFjY29yZGluZyB0byB0aGUgd2lkdGhzIG9mIGl0cyBjaGlsZHJlbixcbiAgICogdXNpbmcgcHJvcGVyIGtleWxpbmUgaW5jcmVtZW50cyAoNjRweCBmb3IgZGVza3RvcCxcbiAgICogNTZweCBvdGhlcndpc2UpLlxuICAgKi9cbiAgYXV0b1dpZHRoOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgbWVudS4gVGhpcyBpcyB1c3VhbGx5IHVzZWQgdG8gcGFzcyBgTWVudUl0ZW1gXG4gICAqIGVsZW1lbnRzLlxuICAgKi9cbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMyLmRlZmF1bHQubm9kZSxcbiAgLyoqXG4gICAqIElmIHRydWUsIHRoZSBtZW51IGl0ZW0gd2lsbCByZW5kZXIgd2l0aCBjb21wYWN0IGRlc2t0b3Agc3R5bGVzLlxuICAgKi9cbiAgZGVza3RvcDogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAvKipcbiAgICogSWYgdHJ1ZSwgdGhlIG1lbnUgd2lsbCBub3QgYmUgYXV0by1mb2N1c2VkLlxuICAgKi9cbiAgZGlzYWJsZUF1dG9Gb2N1czogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAvKipcbiAgICogSWYgdHJ1ZSwgdGhlIG1lbnUgd2lsbCBiZSBrZXlib2FyZC1mb2N1c2VkIGluaXRpYWxseS5cbiAgICovXG4gIGluaXRpYWxseUtleWJvYXJkRm9jdXNlZDogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAvKipcbiAgICogT3ZlcnJpZGUgdGhlIGlubGluZS1zdHlsZXMgb2YgdGhlIHVuZGVybHlpbmcgYExpc3RgIGVsZW1lbnQuXG4gICAqL1xuICBsaXN0U3R5bGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LFxuICAvKipcbiAgICogVGhlIG1heGltdW0gaGVpZ2h0IG9mIHRoZSBtZW51IGluIHBpeGVscy4gSWYgc3BlY2lmaWVkLFxuICAgKiB0aGUgbWVudSB3aWxsIGJlIHNjcm9sbGFibGUgaWYgaXQgaXMgdGFsbGVyIHRoYW4gdGhlIHByb3ZpZGVkXG4gICAqIGhlaWdodC5cbiAgICovXG4gIG1heEhlaWdodDogX3Byb3BUeXBlczIuZGVmYXVsdC5udW1iZXIsXG4gIC8qKlxuICAgKiBPdmVycmlkZSB0aGUgaW5saW5lLXN0eWxlcyBvZiBtZW51IGl0ZW1zLlxuICAgKi9cbiAgbWVudUl0ZW1TdHlsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsXG4gIC8qKlxuICAgKiBJZiB0cnVlLCBgdmFsdWVgIG11c3QgYmUgYW4gYXJyYXkgYW5kIHRoZSBtZW51IHdpbGwgc3VwcG9ydFxuICAgKiBtdWx0aXBsZSBzZWxlY3Rpb25zLlxuICAgKi9cbiAgbXVsdGlwbGU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgLyoqXG4gICAqIENhbGxiYWNrIGZ1bmN0aW9uIGZpcmVkIHdoZW4gYSBtZW51IGl0ZW0gd2l0aCBgdmFsdWVgIG5vdFxuICAgKiBlcXVhbCB0byB0aGUgY3VycmVudCBgdmFsdWVgIG9mIHRoZSBtZW51IGlzIHRvdWNoLXRhcHBlZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRvdWNoVGFwIGV2ZW50IHRhcmdldGluZyB0aGUgbWVudSBpdGVtLlxuICAgKiBAcGFyYW0ge2FueX0gIHZhbHVlIElmIGBtdWx0aXBsZWAgaXMgdHJ1ZSwgdGhlIG1lbnUncyBgdmFsdWVgXG4gICAqIGFycmF5IHdpdGggZWl0aGVyIHRoZSBtZW51IGl0ZW0ncyBgdmFsdWVgIGFkZGVkIChpZlxuICAgKiBpdCB3YXNuJ3QgYWxyZWFkeSBzZWxlY3RlZCkgb3Igb21pdHRlZCAoaWYgaXQgd2FzIGFscmVhZHkgc2VsZWN0ZWQpLlxuICAgKiBPdGhlcndpc2UsIHRoZSBgdmFsdWVgIG9mIHRoZSBtZW51IGl0ZW0uXG4gICAqL1xuICBvbkNoYW5nZTogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICAvKipcbiAgICogQ2FsbGJhY2sgZnVuY3Rpb24gZmlyZWQgd2hlbiB0aGUgbWVudSBpcyBmb2N1c2VkIGFuZCB0aGUgKkVzYyoga2V5XG4gICAqIGlzIHByZXNzZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBga2V5ZG93bmAgZXZlbnQgdGFyZ2V0aW5nIHRoZSBtZW51LlxuICAgKi9cbiAgb25Fc2NLZXlEb3duOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmdW5jdGlvbiBmaXJlZCB3aGVuIGEgbWVudSBpdGVtIGlzIHRvdWNoLXRhcHBlZC5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IFRvdWNoVGFwIGV2ZW50IHRhcmdldGluZyB0aGUgbWVudSBpdGVtLlxuICAgKiBAcGFyYW0ge29iamVjdH0gbWVudUl0ZW0gVGhlIG1lbnUgaXRlbS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IFRoZSBpbmRleCBvZiB0aGUgbWVudSBpdGVtLlxuICAgKi9cbiAgb25JdGVtVG91Y2hUYXA6IF9wcm9wVHlwZXMyLmRlZmF1bHQuZnVuYyxcbiAgLyoqIEBpZ25vcmUgKi9cbiAgb25LZXlEb3duOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmdW5jdGlvbiBmaXJlZCB3aGVuIHRoZSBmb2N1cyBvbiBhIGBNZW51SXRlbWAgaXMgY2hhbmdlZC5cbiAgICogVGhlcmUgd2lsbCBiZSBzb21lIFwiZHVwbGljYXRlXCIgY2hhbmdlcyByZXBvcnRlZCBpZiB0d28gZGlmZmVyZW50XG4gICAqIGZvY3VzaW5nIGV2ZW50IGhhcHBlbiwgZm9yIGV4YW1wbGUgaWYgYSBgTWVudUl0ZW1gIGlzIGZvY3VzZWQgdmlhXG4gICAqIHRoZSBrZXlib2FyZCBhbmQgdGhlbiBpdCBpcyBjbGlja2VkIG9uLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHRoYXQgdHJpZ2dlcmVkIHRoZSBmb2N1cyBjaGFuZ2UuXG4gICAqIFRoZSBldmVudCBjYW4gYmUgbnVsbCBzaW5jZSB0aGUgZm9jdXMgY2FuIGJlIGNoYW5nZWQgZm9yIG5vbi1ldmVudFxuICAgKiByZWFzb25zIHN1Y2ggYXMgcHJvcCBjaGFuZ2VzLlxuICAgKiBAcGFyYW0ge251bWJlcn0gbmV3Rm9jdXNJbmRleCBUaGUgaW5kZXggb2YgdGhlIG5ld2x5IGZvY3VzZWRcbiAgICogYE1lbnVJdGVtYCBvciBgLTFgIGlmIGZvY3VzIHdhcyBsb3N0LlxuICAgKi9cbiAgb25NZW51SXRlbUZvY3VzQ2hhbmdlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIC8qKlxuICAgKiBPdmVycmlkZSB0aGUgaW5saW5lLXN0eWxlcyBvZiBzZWxlY3RlZCBtZW51IGl0ZW1zLlxuICAgKi9cbiAgc2VsZWN0ZWRNZW51SXRlbVN0eWxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRoZSBpbmxpbmUtc3R5bGVzIG9mIHRoZSByb290IGVsZW1lbnQuXG4gICAqL1xuICBzdHlsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsXG4gIC8qKlxuICAgKiBJZiBgbXVsdGlwbGVgIGlzIHRydWUsIGFuIGFycmF5IG9mIHRoZSBgdmFsdWVgcyBvZiB0aGUgc2VsZWN0ZWRcbiAgICogbWVudSBpdGVtcy4gT3RoZXJ3aXNlLCB0aGUgYHZhbHVlYCBvZiB0aGUgc2VsZWN0ZWQgbWVudSBpdGVtLlxuICAgKiBJZiBwcm92aWRlZCwgdGhlIG1lbnUgd2lsbCBiZSBhIGNvbnRyb2xsZWQgY29tcG9uZW50LlxuICAgKiBUaGlzIGNvbXBvbmVudCBhbHNvIHN1cHBvcnRzIHZhbHVlTGluay5cbiAgICovXG4gIHZhbHVlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmFueSxcbiAgLyoqXG4gICAqIFZhbHVlTGluayBmb3IgdGhlIG1lbnUncyBgdmFsdWVgLlxuICAgKi9cbiAgdmFsdWVMaW5rOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCxcbiAgLyoqXG4gICAqIFRoZSB3aWR0aCBvZiB0aGUgbWVudS4gSWYgbm90IHNwZWNpZmllZCwgdGhlIG1lbnUncyB3aWR0aFxuICAgKiB3aWxsIGJlIHNldCBhY2NvcmRpbmcgdG8gdGhlIHdpZHRocyBvZiBpdHMgY2hpbGRyZW4sIHVzaW5nXG4gICAqIHByb3BlciBrZXlsaW5lIGluY3JlbWVudHMgKDY0cHggZm9yIGRlc2t0b3AsIDU2cHggb3RoZXJ3aXNlKS5cbiAgICovXG4gIHdpZHRoOiBfcHJvcFR5cGVzNC5kZWZhdWx0LnN0cmluZ09yTnVtYmVyXG59IDoge307XG5leHBvcnRzLmRlZmF1bHQgPSBNZW51O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9tYXRlcmlhbC11aS9NZW51L01lbnUuanNcbi8vIG1vZHVsZSBpZCA9IDMxM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkhvdEtleUhvbGRlciA9IHVuZGVmaW5lZDtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBIb3RLZXlIb2xkZXIgPSBleHBvcnRzLkhvdEtleUhvbGRlciA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gSG90S2V5SG9sZGVyKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBIb3RLZXlIb2xkZXIpO1xuXG4gICAgdGhpcy5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLnRpbWVySWQgPSBudWxsO1xuICAgICAgX3RoaXMubGFzdEtleXMgPSBudWxsO1xuICAgIH07XG4gIH1cblxuICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShIb3RLZXlIb2xkZXIsIFt7XG4gICAga2V5OiAnYXBwZW5kJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYXBwZW5kKGtleSkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZXJJZCk7XG4gICAgICB0aGlzLnRpbWVySWQgPSBzZXRUaW1lb3V0KHRoaXMuY2xlYXIsIDUwMCk7XG4gICAgICByZXR1cm4gdGhpcy5sYXN0S2V5cyA9ICh0aGlzLmxhc3RLZXlzIHx8ICcnKSArIGtleTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIEhvdEtleUhvbGRlcjtcbn0oKTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vbWF0ZXJpYWwtdWkvTWVudS9tZW51VXRpbHMuanNcbi8vIG1vZHVsZSBpZCA9IDMxNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcycpO1xuXG52YXIgX2V4dGVuZHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXh0ZW5kczIpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllcycpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMik7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2YnKTtcblxudmFyIF9nZXRQcm90b3R5cGVPZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRQcm90b3R5cGVPZik7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKTtcblxudmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yKTtcblxudmFyIF9pbmhlcml0czIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnKTtcblxudmFyIF9pbmhlcml0czMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbmhlcml0czIpO1xuXG52YXIgX3NpbXBsZUFzc2lnbiA9IHJlcXVpcmUoJ3NpbXBsZS1hc3NpZ24nKTtcblxudmFyIF9zaW1wbGVBc3NpZ24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2ltcGxlQXNzaWduKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9yZWFjdERvbSA9IHJlcXVpcmUoJ3JlYWN0LWRvbScpO1xuXG52YXIgX3JlYWN0RG9tMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0RG9tKTtcblxudmFyIF9yZWFjdEV2ZW50TGlzdGVuZXIgPSByZXF1aXJlKCdyZWFjdC1ldmVudC1saXN0ZW5lcicpO1xuXG52YXIgX3JlYWN0RXZlbnRMaXN0ZW5lcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdEV2ZW50TGlzdGVuZXIpO1xuXG52YXIgX1JlbmRlclRvTGF5ZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbC9SZW5kZXJUb0xheWVyJyk7XG5cbnZhciBfUmVuZGVyVG9MYXllcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9SZW5kZXJUb0xheWVyKTtcblxudmFyIF9wcm9wVHlwZXMzID0gcmVxdWlyZSgnLi4vdXRpbHMvcHJvcFR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzNCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlczMpO1xuXG52YXIgX1BhcGVyID0gcmVxdWlyZSgnLi4vUGFwZXInKTtcblxudmFyIF9QYXBlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9QYXBlcik7XG5cbnZhciBfbG9kYXNoID0gcmVxdWlyZSgnbG9kYXNoLnRocm90dGxlJyk7XG5cbnZhciBfbG9kYXNoMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2xvZGFzaCk7XG5cbnZhciBfUG9wb3ZlckFuaW1hdGlvbkRlZmF1bHQgPSByZXF1aXJlKCcuL1BvcG92ZXJBbmltYXRpb25EZWZhdWx0Jyk7XG5cbnZhciBfUG9wb3ZlckFuaW1hdGlvbkRlZmF1bHQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUG9wb3ZlckFuaW1hdGlvbkRlZmF1bHQpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgc3R5bGVzID0ge1xuICByb290OiB7XG4gICAgZGlzcGxheTogJ25vbmUnXG4gIH1cbn07XG5cbnZhciBQb3BvdmVyID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0czMuZGVmYXVsdCkoUG9wb3ZlciwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUG9wb3Zlcihwcm9wcywgY29udGV4dCkge1xuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIFBvcG92ZXIpO1xuXG4gICAgdmFyIF90aGlzID0gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMy5kZWZhdWx0KSh0aGlzLCAoUG9wb3Zlci5fX3Byb3RvX18gfHwgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoUG9wb3ZlcikpLmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpKTtcblxuICAgIF90aGlzLnRpbWVvdXQgPSBudWxsO1xuXG4gICAgX3RoaXMucmVuZGVyTGF5ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBhbmltYXRlZCA9IF90aGlzJHByb3BzLmFuaW1hdGVkLFxuICAgICAgICAgIGFuaW1hdGlvbiA9IF90aGlzJHByb3BzLmFuaW1hdGlvbixcbiAgICAgICAgICBhbmNob3JFbCA9IF90aGlzJHByb3BzLmFuY2hvckVsLFxuICAgICAgICAgIGFuY2hvck9yaWdpbiA9IF90aGlzJHByb3BzLmFuY2hvck9yaWdpbixcbiAgICAgICAgICBhdXRvQ2xvc2VXaGVuT2ZmU2NyZWVuID0gX3RoaXMkcHJvcHMuYXV0b0Nsb3NlV2hlbk9mZlNjcmVlbixcbiAgICAgICAgICBjYW5BdXRvUG9zaXRpb24gPSBfdGhpcyRwcm9wcy5jYW5BdXRvUG9zaXRpb24sXG4gICAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgICBvblJlcXVlc3RDbG9zZSA9IF90aGlzJHByb3BzLm9uUmVxdWVzdENsb3NlLFxuICAgICAgICAgIHN0eWxlID0gX3RoaXMkcHJvcHMuc3R5bGUsXG4gICAgICAgICAgdGFyZ2V0T3JpZ2luID0gX3RoaXMkcHJvcHMudGFyZ2V0T3JpZ2luLFxuICAgICAgICAgIHVzZUxheWVyRm9yQ2xpY2tBd2F5ID0gX3RoaXMkcHJvcHMudXNlTGF5ZXJGb3JDbGlja0F3YXksXG4gICAgICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMy5kZWZhdWx0KShfdGhpcyRwcm9wcywgWydhbmltYXRlZCcsICdhbmltYXRpb24nLCAnYW5jaG9yRWwnLCAnYW5jaG9yT3JpZ2luJywgJ2F1dG9DbG9zZVdoZW5PZmZTY3JlZW4nLCAnY2FuQXV0b1Bvc2l0aW9uJywgJ2NoaWxkcmVuJywgJ29uUmVxdWVzdENsb3NlJywgJ3N0eWxlJywgJ3RhcmdldE9yaWdpbicsICd1c2VMYXllckZvckNsaWNrQXdheSddKTtcblxuXG4gICAgICB2YXIgc3R5bGVSb290ID0gc3R5bGU7XG5cbiAgICAgIGlmICghYW5pbWF0ZWQpIHtcbiAgICAgICAgc3R5bGVSb290ID0ge1xuICAgICAgICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgICAgICAgIHpJbmRleDogX3RoaXMuY29udGV4dC5tdWlUaGVtZS56SW5kZXgucG9wb3ZlclxuICAgICAgICB9O1xuXG4gICAgICAgIGlmICghX3RoaXMuc3RhdGUub3Blbikge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIF9QYXBlcjIuZGVmYXVsdCxcbiAgICAgICAgICAoMCwgX2V4dGVuZHMzLmRlZmF1bHQpKHsgc3R5bGU6ICgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KShzdHlsZVJvb3QsIHN0eWxlKSB9LCBvdGhlciksXG4gICAgICAgICAgY2hpbGRyZW5cbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgdmFyIEFuaW1hdGlvbiA9IGFuaW1hdGlvbiB8fCBfUG9wb3ZlckFuaW1hdGlvbkRlZmF1bHQyLmRlZmF1bHQ7XG5cbiAgICAgIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgQW5pbWF0aW9uLFxuICAgICAgICAoMCwgX2V4dGVuZHMzLmRlZmF1bHQpKHtcbiAgICAgICAgICB0YXJnZXRPcmlnaW46IHRhcmdldE9yaWdpbixcbiAgICAgICAgICBzdHlsZTogc3R5bGVSb290XG4gICAgICAgIH0sIG90aGVyLCB7XG4gICAgICAgICAgb3BlbjogX3RoaXMuc3RhdGUub3BlbiAmJiAhX3RoaXMuc3RhdGUuY2xvc2luZ1xuICAgICAgICB9KSxcbiAgICAgICAgY2hpbGRyZW5cbiAgICAgICk7XG4gICAgfTtcblxuICAgIF90aGlzLmNvbXBvbmVudENsaWNrQXdheSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzLnJlcXVlc3RDbG9zZSgnY2xpY2tBd2F5Jyk7XG4gICAgfTtcblxuICAgIF90aGlzLnNldFBsYWNlbWVudCA9IGZ1bmN0aW9uIChzY3JvbGxpbmcpIHtcbiAgICAgIGlmICghX3RoaXMuc3RhdGUub3Blbikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICghX3RoaXMucmVmcy5sYXllci5nZXRMYXllcigpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHRhcmdldEVsID0gX3RoaXMucmVmcy5sYXllci5nZXRMYXllcigpLmNoaWxkcmVuWzBdO1xuICAgICAgaWYgKCF0YXJnZXRFbCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICB0YXJnZXRPcmlnaW4gPSBfdGhpcyRwcm9wczIudGFyZ2V0T3JpZ2luLFxuICAgICAgICAgIGFuY2hvck9yaWdpbiA9IF90aGlzJHByb3BzMi5hbmNob3JPcmlnaW47XG5cbiAgICAgIHZhciBhbmNob3JFbCA9IF90aGlzLnByb3BzLmFuY2hvckVsIHx8IF90aGlzLmFuY2hvckVsO1xuXG4gICAgICB2YXIgYW5jaG9yID0gX3RoaXMuZ2V0QW5jaG9yUG9zaXRpb24oYW5jaG9yRWwpO1xuICAgICAgdmFyIHRhcmdldCA9IF90aGlzLmdldFRhcmdldFBvc2l0aW9uKHRhcmdldEVsKTtcblxuICAgICAgdmFyIHRhcmdldFBvc2l0aW9uID0ge1xuICAgICAgICB0b3A6IGFuY2hvclthbmNob3JPcmlnaW4udmVydGljYWxdIC0gdGFyZ2V0W3RhcmdldE9yaWdpbi52ZXJ0aWNhbF0sXG4gICAgICAgIGxlZnQ6IGFuY2hvclthbmNob3JPcmlnaW4uaG9yaXpvbnRhbF0gLSB0YXJnZXRbdGFyZ2V0T3JpZ2luLmhvcml6b250YWxdXG4gICAgICB9O1xuXG4gICAgICBpZiAoc2Nyb2xsaW5nICYmIF90aGlzLnByb3BzLmF1dG9DbG9zZVdoZW5PZmZTY3JlZW4pIHtcbiAgICAgICAgX3RoaXMuYXV0b0Nsb3NlV2hlbk9mZlNjcmVlbihhbmNob3IpO1xuICAgICAgfVxuXG4gICAgICBpZiAoX3RoaXMucHJvcHMuY2FuQXV0b1Bvc2l0aW9uKSB7XG4gICAgICAgIHRhcmdldCA9IF90aGlzLmdldFRhcmdldFBvc2l0aW9uKHRhcmdldEVsKTsgLy8gdXBkYXRlIGFzIGhlaWdodCBtYXkgaGF2ZSBjaGFuZ2VkXG4gICAgICAgIHRhcmdldFBvc2l0aW9uID0gX3RoaXMuYXBwbHlBdXRvUG9zaXRpb25JZk5lZWRlZChhbmNob3IsIHRhcmdldCwgdGFyZ2V0T3JpZ2luLCBhbmNob3JPcmlnaW4sIHRhcmdldFBvc2l0aW9uKTtcbiAgICAgIH1cblxuICAgICAgdGFyZ2V0RWwuc3R5bGUudG9wID0gdGFyZ2V0UG9zaXRpb24udG9wICsgJ3B4JztcbiAgICAgIHRhcmdldEVsLnN0eWxlLmxlZnQgPSB0YXJnZXRQb3NpdGlvbi5sZWZ0ICsgJ3B4JztcbiAgICAgIHRhcmdldEVsLnN0eWxlLm1heEhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodCArICdweCc7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZVJlc2l6ZSA9ICgwLCBfbG9kYXNoMi5kZWZhdWx0KShfdGhpcy5zZXRQbGFjZW1lbnQsIDEwMCk7XG4gICAgX3RoaXMuaGFuZGxlU2Nyb2xsID0gKDAsIF9sb2Rhc2gyLmRlZmF1bHQpKF90aGlzLnNldFBsYWNlbWVudC5iaW5kKF90aGlzLCB0cnVlKSwgNTApO1xuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBvcGVuOiBwcm9wcy5vcGVuLFxuICAgICAgY2xvc2luZzogZmFsc2VcbiAgICB9O1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKFBvcG92ZXIsIFt7XG4gICAga2V5OiAnY29tcG9uZW50RGlkTW91bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHRoaXMuc2V0UGxhY2VtZW50KCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgaWYgKG5leHRQcm9wcy5vcGVuID09PSB0aGlzLnByb3BzLm9wZW4pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAobmV4dFByb3BzLm9wZW4pIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dCk7XG4gICAgICAgIHRoaXMudGltZW91dCA9IG51bGw7XG4gICAgICAgIHRoaXMuYW5jaG9yRWwgPSBuZXh0UHJvcHMuYW5jaG9yRWwgfHwgdGhpcy5wcm9wcy5hbmNob3JFbDtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgb3BlbjogdHJ1ZSxcbiAgICAgICAgICBjbG9zaW5nOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChuZXh0UHJvcHMuYW5pbWF0ZWQpIHtcbiAgICAgICAgICBpZiAodGhpcy50aW1lb3V0ICE9PSBudWxsKSByZXR1cm47XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGNsb3Npbmc6IHRydWUgfSk7XG4gICAgICAgICAgdGhpcy50aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpczIuc2V0U3RhdGUoe1xuICAgICAgICAgICAgICBvcGVuOiBmYWxzZVxuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBfdGhpczIudGltZW91dCA9IG51bGw7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9LCA1MDApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgb3BlbjogZmFsc2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudERpZFVwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICAgIHRoaXMuc2V0UGxhY2VtZW50KCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50V2lsbFVubW91bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIHRoaXMuaGFuZGxlUmVzaXplLmNhbmNlbCgpO1xuICAgICAgdGhpcy5oYW5kbGVTY3JvbGwuY2FuY2VsKCk7XG5cbiAgICAgIGlmICh0aGlzLnRpbWVvdXQpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dCk7XG4gICAgICAgIHRoaXMudGltZW91dCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVxdWVzdENsb3NlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVxdWVzdENsb3NlKHJlYXNvbikge1xuICAgICAgaWYgKHRoaXMucHJvcHMub25SZXF1ZXN0Q2xvc2UpIHtcbiAgICAgICAgdGhpcy5wcm9wcy5vblJlcXVlc3RDbG9zZShyZWFzb24pO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldEFuY2hvclBvc2l0aW9uJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0QW5jaG9yUG9zaXRpb24oZWwpIHtcbiAgICAgIGlmICghZWwpIHtcbiAgICAgICAgZWwgPSBfcmVhY3REb20yLmRlZmF1bHQuZmluZERPTU5vZGUodGhpcyk7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWN0ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICB2YXIgYSA9IHtcbiAgICAgICAgdG9wOiByZWN0LnRvcCxcbiAgICAgICAgbGVmdDogcmVjdC5sZWZ0LFxuICAgICAgICB3aWR0aDogZWwub2Zmc2V0V2lkdGgsXG4gICAgICAgIGhlaWdodDogZWwub2Zmc2V0SGVpZ2h0XG4gICAgICB9O1xuXG4gICAgICBhLnJpZ2h0ID0gcmVjdC5yaWdodCB8fCBhLmxlZnQgKyBhLndpZHRoO1xuICAgICAgYS5ib3R0b20gPSByZWN0LmJvdHRvbSB8fCBhLnRvcCArIGEuaGVpZ2h0O1xuICAgICAgYS5taWRkbGUgPSBhLmxlZnQgKyAoYS5yaWdodCAtIGEubGVmdCkgLyAyO1xuICAgICAgYS5jZW50ZXIgPSBhLnRvcCArIChhLmJvdHRvbSAtIGEudG9wKSAvIDI7XG5cbiAgICAgIHJldHVybiBhO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldFRhcmdldFBvc2l0aW9uJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VGFyZ2V0UG9zaXRpb24odGFyZ2V0RWwpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHRvcDogMCxcbiAgICAgICAgY2VudGVyOiB0YXJnZXRFbC5vZmZzZXRIZWlnaHQgLyAyLFxuICAgICAgICBib3R0b206IHRhcmdldEVsLm9mZnNldEhlaWdodCxcbiAgICAgICAgbGVmdDogMCxcbiAgICAgICAgbWlkZGxlOiB0YXJnZXRFbC5vZmZzZXRXaWR0aCAvIDIsXG4gICAgICAgIHJpZ2h0OiB0YXJnZXRFbC5vZmZzZXRXaWR0aFxuICAgICAgfTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdhdXRvQ2xvc2VXaGVuT2ZmU2NyZWVuJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYXV0b0Nsb3NlV2hlbk9mZlNjcmVlbihhbmNob3JQb3NpdGlvbikge1xuICAgICAgaWYgKGFuY2hvclBvc2l0aW9uLnRvcCA8IDAgfHwgYW5jaG9yUG9zaXRpb24udG9wID4gd2luZG93LmlubmVySGVpZ2h0IHx8IGFuY2hvclBvc2l0aW9uLmxlZnQgPCAwIHx8IGFuY2hvclBvc2l0aW9uLmxlZnQgPiB3aW5kb3cuaW5uZXJXaWR0aCkge1xuICAgICAgICB0aGlzLnJlcXVlc3RDbG9zZSgnb2ZmU2NyZWVuJyk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0T3ZlcmxhcE1vZGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRPdmVybGFwTW9kZShhbmNob3IsIHRhcmdldCwgbWVkaWFuKSB7XG4gICAgICBpZiAoW2FuY2hvciwgdGFyZ2V0XS5pbmRleE9mKG1lZGlhbikgPj0gMCkgcmV0dXJuICdhdXRvJztcbiAgICAgIGlmIChhbmNob3IgPT09IHRhcmdldCkgcmV0dXJuICdpbmNsdXNpdmUnO1xuICAgICAgcmV0dXJuICdleGNsdXNpdmUnO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldFBvc2l0aW9ucycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFBvc2l0aW9ucyhhbmNob3IsIHRhcmdldCkge1xuICAgICAgdmFyIGEgPSAoMCwgX2V4dGVuZHMzLmRlZmF1bHQpKHt9LCBhbmNob3IpO1xuICAgICAgdmFyIHQgPSAoMCwgX2V4dGVuZHMzLmRlZmF1bHQpKHt9LCB0YXJnZXQpO1xuXG4gICAgICB2YXIgcG9zaXRpb25zID0ge1xuICAgICAgICB4OiBbJ2xlZnQnLCAncmlnaHQnXS5maWx0ZXIoZnVuY3Rpb24gKHApIHtcbiAgICAgICAgICByZXR1cm4gcCAhPT0gdC5ob3Jpem9udGFsO1xuICAgICAgICB9KSxcbiAgICAgICAgeTogWyd0b3AnLCAnYm90dG9tJ10uZmlsdGVyKGZ1bmN0aW9uIChwKSB7XG4gICAgICAgICAgcmV0dXJuIHAgIT09IHQudmVydGljYWw7XG4gICAgICAgIH0pXG4gICAgICB9O1xuXG4gICAgICB2YXIgb3ZlcmxhcCA9IHtcbiAgICAgICAgeDogdGhpcy5nZXRPdmVybGFwTW9kZShhLmhvcml6b250YWwsIHQuaG9yaXpvbnRhbCwgJ21pZGRsZScpLFxuICAgICAgICB5OiB0aGlzLmdldE92ZXJsYXBNb2RlKGEudmVydGljYWwsIHQudmVydGljYWwsICdjZW50ZXInKVxuICAgICAgfTtcblxuICAgICAgcG9zaXRpb25zLnguc3BsaWNlKG92ZXJsYXAueCA9PT0gJ2F1dG8nID8gMCA6IDEsIDAsICdtaWRkbGUnKTtcbiAgICAgIHBvc2l0aW9ucy55LnNwbGljZShvdmVybGFwLnkgPT09ICdhdXRvJyA/IDAgOiAxLCAwLCAnY2VudGVyJyk7XG5cbiAgICAgIGlmIChvdmVybGFwLnkgIT09ICdhdXRvJykge1xuICAgICAgICBhLnZlcnRpY2FsID0gYS52ZXJ0aWNhbCA9PT0gJ3RvcCcgPyAnYm90dG9tJyA6ICd0b3AnO1xuICAgICAgICBpZiAob3ZlcmxhcC55ID09PSAnaW5jbHVzaXZlJykge1xuICAgICAgICAgIHQudmVydGljYWwgPSB0LnZlcnRpY2FsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChvdmVybGFwLnggIT09ICdhdXRvJykge1xuICAgICAgICBhLmhvcml6b250YWwgPSBhLmhvcml6b250YWwgPT09ICdsZWZ0JyA/ICdyaWdodCcgOiAnbGVmdCc7XG4gICAgICAgIGlmIChvdmVybGFwLnkgPT09ICdpbmNsdXNpdmUnKSB7XG4gICAgICAgICAgdC5ob3Jpem9udGFsID0gdC5ob3Jpem9udGFsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBvc2l0aW9uczogcG9zaXRpb25zLFxuICAgICAgICBhbmNob3JQb3M6IGFcbiAgICAgIH07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnYXBwbHlBdXRvUG9zaXRpb25JZk5lZWRlZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFwcGx5QXV0b1Bvc2l0aW9uSWZOZWVkZWQoYW5jaG9yLCB0YXJnZXQsIHRhcmdldE9yaWdpbiwgYW5jaG9yT3JpZ2luLCB0YXJnZXRQb3NpdGlvbikge1xuICAgICAgdmFyIF9nZXRQb3NpdGlvbnMgPSB0aGlzLmdldFBvc2l0aW9ucyhhbmNob3JPcmlnaW4sIHRhcmdldE9yaWdpbiksXG4gICAgICAgICAgcG9zaXRpb25zID0gX2dldFBvc2l0aW9ucy5wb3NpdGlvbnMsXG4gICAgICAgICAgYW5jaG9yUG9zID0gX2dldFBvc2l0aW9ucy5hbmNob3JQb3M7XG5cbiAgICAgIGlmICh0YXJnZXRQb3NpdGlvbi50b3AgPCAwIHx8IHRhcmdldFBvc2l0aW9uLnRvcCArIHRhcmdldC5ib3R0b20gPiB3aW5kb3cuaW5uZXJIZWlnaHQpIHtcbiAgICAgICAgdmFyIG5ld1RvcCA9IGFuY2hvclthbmNob3JQb3MudmVydGljYWxdIC0gdGFyZ2V0W3Bvc2l0aW9ucy55WzBdXTtcbiAgICAgICAgaWYgKG5ld1RvcCArIHRhcmdldC5ib3R0b20gPD0gd2luZG93LmlubmVySGVpZ2h0KSB7XG4gICAgICAgICAgdGFyZ2V0UG9zaXRpb24udG9wID0gTWF0aC5tYXgoMCwgbmV3VG9wKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXdUb3AgPSBhbmNob3JbYW5jaG9yUG9zLnZlcnRpY2FsXSAtIHRhcmdldFtwb3NpdGlvbnMueVsxXV07XG4gICAgICAgICAgaWYgKG5ld1RvcCArIHRhcmdldC5ib3R0b20gPD0gd2luZG93LmlubmVySGVpZ2h0KSB7XG4gICAgICAgICAgICB0YXJnZXRQb3NpdGlvbi50b3AgPSBNYXRoLm1heCgwLCBuZXdUb3ApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodGFyZ2V0UG9zaXRpb24ubGVmdCA8IDAgfHwgdGFyZ2V0UG9zaXRpb24ubGVmdCArIHRhcmdldC5yaWdodCA+IHdpbmRvdy5pbm5lcldpZHRoKSB7XG4gICAgICAgIHZhciBuZXdMZWZ0ID0gYW5jaG9yW2FuY2hvclBvcy5ob3Jpem9udGFsXSAtIHRhcmdldFtwb3NpdGlvbnMueFswXV07XG4gICAgICAgIGlmIChuZXdMZWZ0ICsgdGFyZ2V0LnJpZ2h0IDw9IHdpbmRvdy5pbm5lcldpZHRoKSB7XG4gICAgICAgICAgdGFyZ2V0UG9zaXRpb24ubGVmdCA9IE1hdGgubWF4KDAsIG5ld0xlZnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5ld0xlZnQgPSBhbmNob3JbYW5jaG9yUG9zLmhvcml6b250YWxdIC0gdGFyZ2V0W3Bvc2l0aW9ucy54WzFdXTtcbiAgICAgICAgICBpZiAobmV3TGVmdCArIHRhcmdldC5yaWdodCA8PSB3aW5kb3cuaW5uZXJXaWR0aCkge1xuICAgICAgICAgICAgdGFyZ2V0UG9zaXRpb24ubGVmdCA9IE1hdGgubWF4KDAsIG5ld0xlZnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGFyZ2V0UG9zaXRpb247XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgeyBzdHlsZTogc3R5bGVzLnJvb3QgfSxcbiAgICAgICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX3JlYWN0RXZlbnRMaXN0ZW5lcjIuZGVmYXVsdCwge1xuICAgICAgICAgIHRhcmdldDogdGhpcy5wcm9wcy5zY3JvbGxhYmxlQ29udGFpbmVyLFxuICAgICAgICAgIG9uU2Nyb2xsOiB0aGlzLmhhbmRsZVNjcm9sbCxcbiAgICAgICAgICBvblJlc2l6ZTogdGhpcy5oYW5kbGVSZXNpemVcbiAgICAgICAgfSksXG4gICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9SZW5kZXJUb0xheWVyMi5kZWZhdWx0LCB7XG4gICAgICAgICAgcmVmOiAnbGF5ZXInLFxuICAgICAgICAgIG9wZW46IHRoaXMuc3RhdGUub3BlbixcbiAgICAgICAgICBjb21wb25lbnRDbGlja0F3YXk6IHRoaXMuY29tcG9uZW50Q2xpY2tBd2F5LFxuICAgICAgICAgIHVzZUxheWVyRm9yQ2xpY2tBd2F5OiB0aGlzLnByb3BzLnVzZUxheWVyRm9yQ2xpY2tBd2F5LFxuICAgICAgICAgIHJlbmRlcjogdGhpcy5yZW5kZXJMYXllclxuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIFBvcG92ZXI7XG59KF9yZWFjdC5Db21wb25lbnQpO1xuXG5Qb3BvdmVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgYW5jaG9yT3JpZ2luOiB7XG4gICAgdmVydGljYWw6ICdib3R0b20nLFxuICAgIGhvcml6b250YWw6ICdsZWZ0J1xuICB9LFxuICBhbmltYXRlZDogdHJ1ZSxcbiAgYXV0b0Nsb3NlV2hlbk9mZlNjcmVlbjogdHJ1ZSxcbiAgY2FuQXV0b1Bvc2l0aW9uOiB0cnVlLFxuICBvblJlcXVlc3RDbG9zZTogZnVuY3Rpb24gb25SZXF1ZXN0Q2xvc2UoKSB7fSxcbiAgb3BlbjogZmFsc2UsXG4gIHNjcm9sbGFibGVDb250YWluZXI6ICd3aW5kb3cnLFxuICBzdHlsZToge1xuICAgIG92ZXJmbG93WTogJ2F1dG8nXG4gIH0sXG4gIHRhcmdldE9yaWdpbjoge1xuICAgIHZlcnRpY2FsOiAndG9wJyxcbiAgICBob3Jpem9udGFsOiAnbGVmdCdcbiAgfSxcbiAgdXNlTGF5ZXJGb3JDbGlja0F3YXk6IHRydWUsXG4gIHpEZXB0aDogMVxufTtcblBvcG92ZXIuY29udGV4dFR5cGVzID0ge1xuICBtdWlUaGVtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZFxufTtcblBvcG92ZXIucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogVGhpcyBpcyB0aGUgRE9NIGVsZW1lbnQgdGhhdCB3aWxsIGJlIHVzZWQgdG8gc2V0IHRoZSBwb3NpdGlvbiBvZiB0aGVcbiAgICogcG9wb3Zlci5cbiAgICovXG4gIGFuY2hvckVsOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCxcbiAgLyoqXG4gICAqIFRoaXMgaXMgdGhlIHBvaW50IG9uIHRoZSBhbmNob3Igd2hlcmUgdGhlIHBvcG92ZXInc1xuICAgKiBgdGFyZ2V0T3JpZ2luYCB3aWxsIGF0dGFjaCB0by5cbiAgICogT3B0aW9uczpcbiAgICogdmVydGljYWw6IFt0b3AsIGNlbnRlciwgYm90dG9tXVxuICAgKiBob3Jpem9udGFsOiBbbGVmdCwgbWlkZGxlLCByaWdodF0uXG4gICAqL1xuICBhbmNob3JPcmlnaW46IF9wcm9wVHlwZXM0LmRlZmF1bHQub3JpZ2luLFxuICAvKipcbiAgICogSWYgdHJ1ZSwgdGhlIHBvcG92ZXIgd2lsbCBhcHBseSB0cmFuc2l0aW9ucyB3aGVuXG4gICAqIGl0IGlzIGFkZGVkIHRvIHRoZSBET00uXG4gICAqL1xuICBhbmltYXRlZDogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAvKipcbiAgICogT3ZlcnJpZGUgdGhlIGRlZmF1bHQgYW5pbWF0aW9uIGNvbXBvbmVudCB1c2VkLlxuICAgKi9cbiAgYW5pbWF0aW9uOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIC8qKlxuICAgKiBJZiB0cnVlLCB0aGUgcG9wb3ZlciB3aWxsIGhpZGUgd2hlbiB0aGUgYW5jaG9yIGlzIHNjcm9sbGVkIG9mZiB0aGUgc2NyZWVuLlxuICAgKi9cbiAgYXV0b0Nsb3NlV2hlbk9mZlNjcmVlbjogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAvKipcbiAgICogSWYgdHJ1ZSwgdGhlIHBvcG92ZXIgKHBvdGVudGlhbGx5KSBpZ25vcmVzIGB0YXJnZXRPcmlnaW5gXG4gICAqIGFuZCBgYW5jaG9yT3JpZ2luYCB0byBtYWtlIGl0c2VsZiBmaXQgb24gc2NyZWVuLFxuICAgKiB3aGljaCBpcyB1c2VmdWwgZm9yIG1vYmlsZSBkZXZpY2VzLlxuICAgKi9cbiAgY2FuQXV0b1Bvc2l0aW9uOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgcG9wb3Zlci5cbiAgICovXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm5vZGUsXG4gIC8qKlxuICAgKiBUaGUgQ1NTIGNsYXNzIG5hbWUgb2YgdGhlIHJvb3QgZWxlbWVudC5cbiAgICovXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5zdHJpbmcsXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmdW5jdGlvbiBmaXJlZCB3aGVuIHRoZSBwb3BvdmVyIGlzIHJlcXVlc3RlZCB0byBiZSBjbG9zZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSByZWFzb24gVGhlIHJlYXNvbiBmb3IgdGhlIGNsb3NlIHJlcXVlc3QuIFBvc3NpYmxlcyB2YWx1ZXNcbiAgICogYXJlICdjbGlja0F3YXknIGFuZCAnb2ZmU2NyZWVuJy5cbiAgICovXG4gIG9uUmVxdWVzdENsb3NlOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMsXG4gIC8qKlxuICAgKiBJZiB0cnVlLCB0aGUgcG9wb3ZlciBpcyB2aXNpYmxlLlxuICAgKi9cbiAgb3BlbjogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAvKipcbiAgICogUmVwcmVzZW50cyB0aGUgcGFyZW50IHNjcm9sbGFibGUgY29udGFpbmVyLlxuICAgKiBJdCBjYW4gYmUgYW4gZWxlbWVudCBvciBhIHN0cmluZyBsaWtlIGB3aW5kb3dgLlxuICAgKi9cbiAgc2Nyb2xsYWJsZUNvbnRhaW5lcjogX3Byb3BUeXBlczIuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMyLmRlZmF1bHQub2JqZWN0LCBfcHJvcFR5cGVzMi5kZWZhdWx0LnN0cmluZ10pLFxuICAvKipcbiAgICogT3ZlcnJpZGUgdGhlIGlubGluZS1zdHlsZXMgb2YgdGhlIHJvb3QgZWxlbWVudC5cbiAgICovXG4gIHN0eWxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCxcbiAgLyoqXG4gICAqIFRoaXMgaXMgdGhlIHBvaW50IG9uIHRoZSBwb3BvdmVyIHdoaWNoIHdpbGwgYXR0YWNoIHRvXG4gICAqIHRoZSBhbmNob3IncyBvcmlnaW4uXG4gICAqIE9wdGlvbnM6XG4gICAqIHZlcnRpY2FsOiBbdG9wLCBjZW50ZXIsIGJvdHRvbV1cbiAgICogaG9yaXpvbnRhbDogW2xlZnQsIG1pZGRsZSwgcmlnaHRdLlxuICAgKi9cbiAgdGFyZ2V0T3JpZ2luOiBfcHJvcFR5cGVzNC5kZWZhdWx0Lm9yaWdpbixcbiAgLyoqXG4gICAqIElmIHRydWUsIHRoZSBwb3BvdmVyIHdpbGwgcmVuZGVyIG9uIHRvcCBvZiBhbiBpbnZpc2libGVcbiAgICogbGF5ZXIsIHdoaWNoIHdpbGwgcHJldmVudCBjbGlja3MgdG8gdGhlIHVuZGVybHlpbmdcbiAgICogZWxlbWVudHMsIGFuZCB0cmlnZ2VyIGFuIGBvblJlcXVlc3RDbG9zZSgnY2xpY2tBd2F5JylgIGNhbGwuXG4gICAqL1xuICB1c2VMYXllckZvckNsaWNrQXdheTogX3Byb3BUeXBlczIuZGVmYXVsdC5ib29sLFxuICAvKipcbiAgICogVGhlIHpEZXB0aCBvZiB0aGUgcG9wb3Zlci5cbiAgICovXG4gIHpEZXB0aDogX3Byb3BUeXBlczQuZGVmYXVsdC56RGVwdGhcbn0gOiB7fTtcbmV4cG9ydHMuZGVmYXVsdCA9IFBvcG92ZXI7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L21hdGVyaWFsLXVpL1BvcG92ZXIvUG9wb3Zlci5qc1xuLy8gbW9kdWxlIGlkID0gMzE2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9nZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZicpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFByb3RvdHlwZU9mKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybicpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIpO1xuXG52YXIgX2luaGVyaXRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cycpO1xuXG52YXIgX2luaGVyaXRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2luaGVyaXRzMik7XG5cbnZhciBfc2ltcGxlQXNzaWduID0gcmVxdWlyZSgnc2ltcGxlLWFzc2lnbicpO1xuXG52YXIgX3NpbXBsZUFzc2lnbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zaW1wbGVBc3NpZ24pO1xuXG52YXIgX3RyYW5zaXRpb25zID0gcmVxdWlyZSgnLi4vc3R5bGVzL3RyYW5zaXRpb25zJyk7XG5cbnZhciBfdHJhbnNpdGlvbnMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdHJhbnNpdGlvbnMpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX3Byb3BUeXBlczMgPSByZXF1aXJlKCcuLi91dGlscy9wcm9wVHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXM0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzMyk7XG5cbnZhciBfUGFwZXIgPSByZXF1aXJlKCcuLi9QYXBlcicpO1xuXG52YXIgX1BhcGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1BhcGVyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gZ2V0U3R5bGVzKHByb3BzLCBjb250ZXh0LCBzdGF0ZSkge1xuICB2YXIgdGFyZ2V0T3JpZ2luID0gcHJvcHMudGFyZ2V0T3JpZ2luO1xuICB2YXIgb3BlbiA9IHN0YXRlLm9wZW47XG4gIHZhciBtdWlUaGVtZSA9IGNvbnRleHQubXVpVGhlbWU7XG5cbiAgdmFyIGhvcml6b250YWwgPSB0YXJnZXRPcmlnaW4uaG9yaXpvbnRhbC5yZXBsYWNlKCdtaWRkbGUnLCAndmVydGljYWwnKTtcblxuICByZXR1cm4ge1xuICAgIHJvb3Q6IHtcbiAgICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgICAgekluZGV4OiBtdWlUaGVtZS56SW5kZXgucG9wb3ZlcixcbiAgICAgIG9wYWNpdHk6IG9wZW4gPyAxIDogMCxcbiAgICAgIHRyYW5zZm9ybTogb3BlbiA/ICdzY2FsZSgxLCAxKScgOiAnc2NhbGUoMCwgMCknLFxuICAgICAgdHJhbnNmb3JtT3JpZ2luOiBob3Jpem9udGFsICsgJyAnICsgdGFyZ2V0T3JpZ2luLnZlcnRpY2FsLFxuICAgICAgdHJhbnNpdGlvbjogX3RyYW5zaXRpb25zMi5kZWZhdWx0LmVhc2VPdXQoJzI1MG1zJywgWyd0cmFuc2Zvcm0nLCAnb3BhY2l0eSddKSxcbiAgICAgIG1heEhlaWdodDogJzEwMCUnXG4gICAgfSxcbiAgICBob3Jpem9udGFsOiB7XG4gICAgICBtYXhIZWlnaHQ6ICcxMDAlJyxcbiAgICAgIG92ZXJmbG93WTogJ2F1dG8nLFxuICAgICAgdHJhbnNmb3JtOiBvcGVuID8gJ3NjYWxlWCgxKScgOiAnc2NhbGVYKDApJyxcbiAgICAgIG9wYWNpdHk6IG9wZW4gPyAxIDogMCxcbiAgICAgIHRyYW5zZm9ybU9yaWdpbjogaG9yaXpvbnRhbCArICcgJyArIHRhcmdldE9yaWdpbi52ZXJ0aWNhbCxcbiAgICAgIHRyYW5zaXRpb246IF90cmFuc2l0aW9uczIuZGVmYXVsdC5lYXNlT3V0KCcyNTBtcycsIFsndHJhbnNmb3JtJywgJ29wYWNpdHknXSlcbiAgICB9LFxuICAgIHZlcnRpY2FsOiB7XG4gICAgICBvcGFjaXR5OiBvcGVuID8gMSA6IDAsXG4gICAgICB0cmFuc2Zvcm06IG9wZW4gPyAnc2NhbGVZKDEpJyA6ICdzY2FsZVkoMCknLFxuICAgICAgdHJhbnNmb3JtT3JpZ2luOiBob3Jpem9udGFsICsgJyAnICsgdGFyZ2V0T3JpZ2luLnZlcnRpY2FsLFxuICAgICAgdHJhbnNpdGlvbjogX3RyYW5zaXRpb25zMi5kZWZhdWx0LmVhc2VPdXQoJzUwMG1zJywgWyd0cmFuc2Zvcm0nLCAnb3BhY2l0eSddKVxuICAgIH1cbiAgfTtcbn1cblxudmFyIFBvcG92ZXJBbmltYXRpb25EZWZhdWx0ID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0czMuZGVmYXVsdCkoUG9wb3ZlckFuaW1hdGlvbkRlZmF1bHQsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFBvcG92ZXJBbmltYXRpb25EZWZhdWx0KCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIFBvcG92ZXJBbmltYXRpb25EZWZhdWx0KTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMy5kZWZhdWx0KSh0aGlzLCAoX3JlZiA9IFBvcG92ZXJBbmltYXRpb25EZWZhdWx0Ll9fcHJvdG9fXyB8fCAoMCwgX2dldFByb3RvdHlwZU9mMi5kZWZhdWx0KShQb3BvdmVyQW5pbWF0aW9uRGVmYXVsdCkpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLnN0YXRlID0ge1xuICAgICAgb3BlbjogZmFsc2VcbiAgICB9LCBfdGVtcCksICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMuZGVmYXVsdCkoX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoUG9wb3ZlckFuaW1hdGlvbkRlZmF1bHQsIFt7XG4gICAga2V5OiAnY29tcG9uZW50RGlkTW91bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBvcGVuOiB0cnVlIH0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlYWN0L25vLWRpZC1tb3VudC1zZXQtc3RhdGVcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBvcGVuOiBuZXh0UHJvcHMub3BlblxuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgY2xhc3NOYW1lID0gX3Byb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgICBzdHlsZSA9IF9wcm9wcy5zdHlsZSxcbiAgICAgICAgICB6RGVwdGggPSBfcHJvcHMuekRlcHRoO1xuICAgICAgdmFyIHByZXBhcmVTdHlsZXMgPSB0aGlzLmNvbnRleHQubXVpVGhlbWUucHJlcGFyZVN0eWxlcztcblxuICAgICAgdmFyIHN0eWxlcyA9IGdldFN0eWxlcyh0aGlzLnByb3BzLCB0aGlzLmNvbnRleHQsIHRoaXMuc3RhdGUpO1xuXG4gICAgICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIF9QYXBlcjIuZGVmYXVsdCxcbiAgICAgICAge1xuICAgICAgICAgIHN0eWxlOiAoMCwgX3NpbXBsZUFzc2lnbjIuZGVmYXVsdCkoc3R5bGVzLnJvb3QsIHN0eWxlKSxcbiAgICAgICAgICB6RGVwdGg6IHpEZXB0aCxcbiAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZVxuICAgICAgICB9LFxuICAgICAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICB7IHN0eWxlOiBwcmVwYXJlU3R5bGVzKHN0eWxlcy5ob3Jpem9udGFsKSB9LFxuICAgICAgICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgJ2RpdicsXG4gICAgICAgICAgICB7IHN0eWxlOiBwcmVwYXJlU3R5bGVzKHN0eWxlcy52ZXJ0aWNhbCkgfSxcbiAgICAgICAgICAgIHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICAgICAgICApXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBQb3BvdmVyQW5pbWF0aW9uRGVmYXVsdDtcbn0oX3JlYWN0LkNvbXBvbmVudCk7XG5cblBvcG92ZXJBbmltYXRpb25EZWZhdWx0LmRlZmF1bHRQcm9wcyA9IHtcbiAgc3R5bGU6IHt9LFxuICB6RGVwdGg6IDFcbn07XG5Qb3BvdmVyQW5pbWF0aW9uRGVmYXVsdC5jb250ZXh0VHlwZXMgPSB7XG4gIG11aVRoZW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkXG59O1xuUG9wb3ZlckFuaW1hdGlvbkRlZmF1bHQucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICBjaGlsZHJlbjogX3Byb3BUeXBlczIuZGVmYXVsdC5ub2RlLFxuICAvKipcbiAgICogVGhlIGNzcyBjbGFzcyBuYW1lIG9mIHRoZSByb290IGVsZW1lbnQuXG4gICAqL1xuICBjbGFzc05hbWU6IF9wcm9wVHlwZXMyLmRlZmF1bHQuc3RyaW5nLFxuICBvcGVuOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wuaXNSZXF1aXJlZCxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRoZSBpbmxpbmUtc3R5bGVzIG9mIHRoZSByb290IGVsZW1lbnQuXG4gICAqL1xuICBzdHlsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QsXG4gIHRhcmdldE9yaWdpbjogX3Byb3BUeXBlczQuZGVmYXVsdC5vcmlnaW4uaXNSZXF1aXJlZCxcbiAgekRlcHRoOiBfcHJvcFR5cGVzNC5kZWZhdWx0LnpEZXB0aFxufSA6IHt9O1xuZXhwb3J0cy5kZWZhdWx0ID0gUG9wb3ZlckFuaW1hdGlvbkRlZmF1bHQ7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L21hdGVyaWFsLXVpL1BvcG92ZXIvUG9wb3ZlckFuaW1hdGlvbkRlZmF1bHQuanNcbi8vIG1vZHVsZSBpZCA9IDMxN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcycpO1xuXG52YXIgX2V4dGVuZHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXh0ZW5kczIpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllcycpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMik7XG5cbnZhciBfc2ltcGxlQXNzaWduID0gcmVxdWlyZSgnc2ltcGxlLWFzc2lnbicpO1xuXG52YXIgX3NpbXBsZUFzc2lnbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zaW1wbGVBc3NpZ24pO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgU3ViaGVhZGVyID0gZnVuY3Rpb24gU3ViaGVhZGVyKHByb3BzLCBjb250ZXh0KSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgaW5zZXQgPSBwcm9wcy5pbnNldCxcbiAgICAgIHN0eWxlID0gcHJvcHMuc3R5bGUsXG4gICAgICBvdGhlciA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMzLmRlZmF1bHQpKHByb3BzLCBbJ2NoaWxkcmVuJywgJ2luc2V0JywgJ3N0eWxlJ10pO1xuICB2YXIgX2NvbnRleHQkbXVpVGhlbWUgPSBjb250ZXh0Lm11aVRoZW1lLFxuICAgICAgcHJlcGFyZVN0eWxlcyA9IF9jb250ZXh0JG11aVRoZW1lLnByZXBhcmVTdHlsZXMsXG4gICAgICBzdWJoZWFkZXIgPSBfY29udGV4dCRtdWlUaGVtZS5zdWJoZWFkZXI7XG5cblxuICB2YXIgc3R5bGVzID0ge1xuICAgIHJvb3Q6IHtcbiAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgY29sb3I6IHN1YmhlYWRlci5jb2xvcixcbiAgICAgIGZvbnRTaXplOiAxNCxcbiAgICAgIGZvbnRXZWlnaHQ6IHN1YmhlYWRlci5mb250V2VpZ2h0LFxuICAgICAgbGluZUhlaWdodDogJzQ4cHgnLFxuICAgICAgcGFkZGluZ0xlZnQ6IGluc2V0ID8gNzIgOiAxNixcbiAgICAgIHdpZHRoOiAnMTAwJSdcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICdkaXYnLFxuICAgICgwLCBfZXh0ZW5kczMuZGVmYXVsdCkoe30sIG90aGVyLCB7IHN0eWxlOiBwcmVwYXJlU3R5bGVzKCgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KShzdHlsZXMucm9vdCwgc3R5bGUpKSB9KSxcbiAgICBjaGlsZHJlblxuICApO1xufTtcblxuU3ViaGVhZGVyLm11aU5hbWUgPSAnU3ViaGVhZGVyJztcblxuU3ViaGVhZGVyLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIE5vZGUgdGhhdCB3aWxsIGJlIHBsYWNlZCBpbnNpZGUgdGhlIGBTdWJoZWFkZXJgLlxuICAgKi9cbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMyLmRlZmF1bHQubm9kZSxcbiAgLyoqXG4gICAqIElmIHRydWUsIHRoZSBgU3ViaGVhZGVyYCB3aWxsIGJlIGluZGVudGVkLlxuICAgKi9cbiAgaW5zZXQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbCxcbiAgLyoqXG4gICAqIE92ZXJyaWRlIHRoZSBpbmxpbmUtc3R5bGVzIG9mIHRoZSByb290IGVsZW1lbnQuXG4gICAqL1xuICBzdHlsZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3Rcbn0gOiB7fTtcblxuU3ViaGVhZGVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgaW5zZXQ6IGZhbHNlXG59O1xuXG5TdWJoZWFkZXIuY29udGV4dFR5cGVzID0ge1xuICBtdWlUaGVtZTogX3Byb3BUeXBlczIuZGVmYXVsdC5vYmplY3QuaXNSZXF1aXJlZFxufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gU3ViaGVhZGVyO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9tYXRlcmlhbC11aS9TdWJoZWFkZXIvU3ViaGVhZGVyLmpzXG4vLyBtb2R1bGUgaWQgPSAzMTlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdW5kZWZpbmVkO1xuXG52YXIgX1N1YmhlYWRlciA9IHJlcXVpcmUoJy4vU3ViaGVhZGVyJyk7XG5cbnZhciBfU3ViaGVhZGVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1N1YmhlYWRlcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9TdWJoZWFkZXIyLmRlZmF1bHQ7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L21hdGVyaWFsLXVpL1N1YmhlYWRlci9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gMzIwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9nZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZicpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFByb3RvdHlwZU9mKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybicpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIpO1xuXG52YXIgX2luaGVyaXRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cycpO1xuXG52YXIgX2luaGVyaXRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2luaGVyaXRzMik7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIG9yaWdpbmFsQm9keU92ZXJmbG93ID0gbnVsbDtcbnZhciBsb2NraW5nQ291bnRlciA9IDA7XG5cbnZhciBBdXRvTG9ja1Njcm9sbGluZyA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHMzLmRlZmF1bHQpKEF1dG9Mb2NrU2Nyb2xsaW5nLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBBdXRvTG9ja1Njcm9sbGluZygpIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBBdXRvTG9ja1Njcm9sbGluZyk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9ICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMuZGVmYXVsdCkodGhpcywgKF9yZWYgPSBBdXRvTG9ja1Njcm9sbGluZy5fX3Byb3RvX18gfHwgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoQXV0b0xvY2tTY3JvbGxpbmcpKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5sb2NrZWQgPSBmYWxzZSwgX3RlbXApLCAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zLmRlZmF1bHQpKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKEF1dG9Mb2NrU2Nyb2xsaW5nLCBbe1xuICAgIGtleTogJ2NvbXBvbmVudERpZE1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy5sb2NrID09PSB0cnVlKSB7XG4gICAgICAgIHRoaXMucHJldmVudFNjcm9sbGluZygpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgaWYgKHRoaXMucHJvcHMubG9jayAhPT0gbmV4dFByb3BzLmxvY2spIHtcbiAgICAgICAgaWYgKG5leHRQcm9wcy5sb2NrKSB7XG4gICAgICAgICAgdGhpcy5wcmV2ZW50U2Nyb2xsaW5nKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5hbGxvd1Njcm9sbGluZygpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50V2lsbFVubW91bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIHRoaXMuYWxsb3dTY3JvbGxpbmcoKTtcbiAgICB9XG5cbiAgICAvLyBmb3JjZSB0byBvbmx5IGxvY2svdW5sb2NrIG9uY2VcblxuICB9LCB7XG4gICAga2V5OiAncHJldmVudFNjcm9sbGluZycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHByZXZlbnRTY3JvbGxpbmcoKSB7XG4gICAgICBpZiAodGhpcy5sb2NrZWQgPT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBsb2NraW5nQ291bnRlciA9IGxvY2tpbmdDb3VudGVyICsgMTtcbiAgICAgIHRoaXMubG9ja2VkID0gdHJ1ZTtcblxuICAgICAgLy8gb25seSBsb2NrIHRoZSBmaXJzdCB0aW1lIHRoZSBjb21wb25lbnQgaXMgbW91bnRlZC5cbiAgICAgIGlmIChsb2NraW5nQ291bnRlciA9PT0gMSkge1xuICAgICAgICB2YXIgYm9keSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdib2R5JylbMF07XG4gICAgICAgIG9yaWdpbmFsQm9keU92ZXJmbG93ID0gYm9keS5zdHlsZS5vdmVyZmxvdztcbiAgICAgICAgYm9keS5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2FsbG93U2Nyb2xsaW5nJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWxsb3dTY3JvbGxpbmcoKSB7XG4gICAgICBpZiAodGhpcy5sb2NrZWQgPT09IHRydWUpIHtcbiAgICAgICAgbG9ja2luZ0NvdW50ZXIgPSBsb2NraW5nQ291bnRlciAtIDE7XG4gICAgICAgIHRoaXMubG9ja2VkID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmIChsb2NraW5nQ291bnRlciA9PT0gMCAmJiBvcmlnaW5hbEJvZHlPdmVyZmxvdyAhPT0gbnVsbCkge1xuICAgICAgICB2YXIgYm9keSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdib2R5JylbMF07XG4gICAgICAgIGJvZHkuc3R5bGUub3ZlcmZsb3cgPSBvcmlnaW5hbEJvZHlPdmVyZmxvdyB8fCAnJztcbiAgICAgICAgb3JpZ2luYWxCb2R5T3ZlcmZsb3cgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gQXV0b0xvY2tTY3JvbGxpbmc7XG59KF9yZWFjdC5Db21wb25lbnQpO1xuXG5BdXRvTG9ja1Njcm9sbGluZy5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIGxvY2s6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbC5pc1JlcXVpcmVkXG59IDoge307XG5leHBvcnRzLmRlZmF1bHQgPSBBdXRvTG9ja1Njcm9sbGluZztcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vbWF0ZXJpYWwtdWkvaW50ZXJuYWwvQXV0b0xvY2tTY3JvbGxpbmcuanNcbi8vIG1vZHVsZSBpZCA9IDMyN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2YnKTtcblxudmFyIF9nZXRQcm90b3R5cGVPZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRQcm90b3R5cGVPZik7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKTtcblxudmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yKTtcblxudmFyIF9pbmhlcml0czIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnKTtcblxudmFyIF9pbmhlcml0czMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbmhlcml0czIpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfcmVhY3REb20gPSByZXF1aXJlKCdyZWFjdC1kb20nKTtcblxudmFyIF9yZWFjdERvbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdERvbSk7XG5cbnZhciBfZXZlbnRzID0gcmVxdWlyZSgnLi4vdXRpbHMvZXZlbnRzJyk7XG5cbnZhciBfZXZlbnRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V2ZW50cyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBpc0Rlc2NlbmRhbnQgPSBmdW5jdGlvbiBpc0Rlc2NlbmRhbnQoZWwsIHRhcmdldCkge1xuICBpZiAodGFyZ2V0ICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIGVsID09PSB0YXJnZXQgfHwgaXNEZXNjZW5kYW50KGVsLCB0YXJnZXQucGFyZW50Tm9kZSk7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxudmFyIGNsaWNrQXdheUV2ZW50cyA9IFsnbW91c2V1cCcsICd0b3VjaGVuZCddO1xudmFyIGJpbmQgPSBmdW5jdGlvbiBiaW5kKGNhbGxiYWNrKSB7XG4gIHJldHVybiBjbGlja0F3YXlFdmVudHMuZm9yRWFjaChmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICByZXR1cm4gX2V2ZW50czIuZGVmYXVsdC5vbihkb2N1bWVudCwgZXZlbnQsIGNhbGxiYWNrKTtcbiAgfSk7XG59O1xudmFyIHVuYmluZCA9IGZ1bmN0aW9uIHVuYmluZChjYWxsYmFjaykge1xuICByZXR1cm4gY2xpY2tBd2F5RXZlbnRzLmZvckVhY2goZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgcmV0dXJuIF9ldmVudHMyLmRlZmF1bHQub2ZmKGRvY3VtZW50LCBldmVudCwgY2FsbGJhY2spO1xuICB9KTtcbn07XG5cbnZhciBDbGlja0F3YXlMaXN0ZW5lciA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHMzLmRlZmF1bHQpKENsaWNrQXdheUxpc3RlbmVyLCBfQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBDbGlja0F3YXlMaXN0ZW5lcigpIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBDbGlja0F3YXlMaXN0ZW5lcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9ICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMuZGVmYXVsdCkodGhpcywgKF9yZWYgPSBDbGlja0F3YXlMaXN0ZW5lci5fX3Byb3RvX18gfHwgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoQ2xpY2tBd2F5TGlzdGVuZXIpKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5oYW5kbGVDbGlja0F3YXkgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gSUUxMSBzdXBwb3J0LCB3aGljaCB0cmlnZ2VyIHRoZSBoYW5kbGVDbGlja0F3YXkgZXZlbiBhZnRlciB0aGUgdW5iaW5kXG4gICAgICBpZiAoX3RoaXMuaXNDdXJyZW50bHlNb3VudGVkKSB7XG4gICAgICAgIHZhciBlbCA9IF9yZWFjdERvbTIuZGVmYXVsdC5maW5kRE9NTm9kZShfdGhpcyk7XG5cbiAgICAgICAgaWYgKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jb250YWlucyhldmVudC50YXJnZXQpICYmICFpc0Rlc2NlbmRhbnQoZWwsIGV2ZW50LnRhcmdldCkpIHtcbiAgICAgICAgICBfdGhpcy5wcm9wcy5vbkNsaWNrQXdheShldmVudCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LCBfdGVtcCksICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMuZGVmYXVsdCkoX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoQ2xpY2tBd2F5TGlzdGVuZXIsIFt7XG4gICAga2V5OiAnY29tcG9uZW50RGlkTW91bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIHRoaXMuaXNDdXJyZW50bHlNb3VudGVkID0gdHJ1ZTtcbiAgICAgIGlmICh0aGlzLnByb3BzLm9uQ2xpY2tBd2F5KSB7XG4gICAgICAgIGJpbmQodGhpcy5oYW5kbGVDbGlja0F3YXkpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudERpZFVwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICAgIGlmIChwcmV2UHJvcHMub25DbGlja0F3YXkgIT09IHRoaXMucHJvcHMub25DbGlja0F3YXkpIHtcbiAgICAgICAgdW5iaW5kKHRoaXMuaGFuZGxlQ2xpY2tBd2F5KTtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMub25DbGlja0F3YXkpIHtcbiAgICAgICAgICBiaW5kKHRoaXMuaGFuZGxlQ2xpY2tBd2F5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxVbm1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICB0aGlzLmlzQ3VycmVudGx5TW91bnRlZCA9IGZhbHNlO1xuICAgICAgdW5iaW5kKHRoaXMuaGFuZGxlQ2xpY2tBd2F5KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIENsaWNrQXdheUxpc3RlbmVyO1xufShfcmVhY3QuQ29tcG9uZW50KTtcblxuQ2xpY2tBd2F5TGlzdGVuZXIucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICBjaGlsZHJlbjogX3Byb3BUeXBlczIuZGVmYXVsdC5lbGVtZW50LFxuICBvbkNsaWNrQXdheTogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jXG59IDoge307XG5leHBvcnRzLmRlZmF1bHQgPSBDbGlja0F3YXlMaXN0ZW5lcjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vbWF0ZXJpYWwtdWkvaW50ZXJuYWwvQ2xpY2tBd2F5TGlzdGVuZXIuanNcbi8vIG1vZHVsZSBpZCA9IDMyOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZXh0ZW5kczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZXh0ZW5kcycpO1xuXG52YXIgX2V4dGVuZHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZXh0ZW5kczIpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllcycpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMik7XG5cbnZhciBfZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2YnKTtcblxudmFyIF9nZXRQcm90b3R5cGVPZjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRQcm90b3R5cGVPZik7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKTtcblxudmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yKTtcblxudmFyIF9pbmhlcml0czIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnKTtcblxudmFyIF9pbmhlcml0czMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbmhlcml0czIpO1xuXG52YXIgX3NpbXBsZUFzc2lnbiA9IHJlcXVpcmUoJ3NpbXBsZS1hc3NpZ24nKTtcblxudmFyIF9zaW1wbGVBc3NpZ24yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2ltcGxlQXNzaWduKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF90cmFuc2l0aW9ucyA9IHJlcXVpcmUoJy4uL3N0eWxlcy90cmFuc2l0aW9ucycpO1xuXG52YXIgX3RyYW5zaXRpb25zMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3RyYW5zaXRpb25zKTtcblxudmFyIF9BdXRvTG9ja1Njcm9sbGluZyA9IHJlcXVpcmUoJy4vQXV0b0xvY2tTY3JvbGxpbmcnKTtcblxudmFyIF9BdXRvTG9ja1Njcm9sbGluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9BdXRvTG9ja1Njcm9sbGluZyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIGdldFN0eWxlcyhwcm9wcywgY29udGV4dCkge1xuICB2YXIgb3ZlcmxheSA9IGNvbnRleHQubXVpVGhlbWUub3ZlcmxheTtcblxuXG4gIHZhciBzdHlsZSA9IHtcbiAgICByb290OiB7XG4gICAgICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgIHRvcDogMCxcbiAgICAgIGxlZnQ6ICctMTAwJScsXG4gICAgICBvcGFjaXR5OiAwLFxuICAgICAgYmFja2dyb3VuZENvbG9yOiBvdmVybGF5LmJhY2tncm91bmRDb2xvcixcbiAgICAgIFdlYmtpdFRhcEhpZ2hsaWdodENvbG9yOiAncmdiYSgwLCAwLCAwLCAwKScsIC8vIFJlbW92ZSBtb2JpbGUgY29sb3IgZmxhc2hpbmcgKGRlcHJlY2F0ZWQpXG5cbiAgICAgIC8vIFR3byB3YXlzIHRvIHByb21vdGUgb3ZlcmxheSB0byBpdHMgb3duIHJlbmRlciBsYXllclxuICAgICAgd2lsbENoYW5nZTogJ29wYWNpdHknLFxuICAgICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlWigwKScsXG5cbiAgICAgIHRyYW5zaXRpb246IHByb3BzLnRyYW5zaXRpb25FbmFibGVkICYmIF90cmFuc2l0aW9uczIuZGVmYXVsdC5lYXNlT3V0KCcwbXMnLCAnbGVmdCcsICc0MDBtcycpICsgJywgJyArIF90cmFuc2l0aW9uczIuZGVmYXVsdC5lYXNlT3V0KCc0MDBtcycsICdvcGFjaXR5JylcbiAgICB9XG4gIH07XG5cbiAgaWYgKHByb3BzLnNob3cpIHtcbiAgICAoMCwgX3NpbXBsZUFzc2lnbjIuZGVmYXVsdCkoc3R5bGUucm9vdCwge1xuICAgICAgbGVmdDogMCxcbiAgICAgIG9wYWNpdHk6IDEsXG4gICAgICB0cmFuc2l0aW9uOiBfdHJhbnNpdGlvbnMyLmRlZmF1bHQuZWFzZU91dCgnMG1zJywgJ2xlZnQnKSArICcsICcgKyBfdHJhbnNpdGlvbnMyLmRlZmF1bHQuZWFzZU91dCgnNDAwbXMnLCAnb3BhY2l0eScpXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gc3R5bGU7XG59XG5cbnZhciBPdmVybGF5ID0gZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgKDAsIF9pbmhlcml0czMuZGVmYXVsdCkoT3ZlcmxheSwgX0NvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gT3ZlcmxheSgpIHtcbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBPdmVybGF5KTtcbiAgICByZXR1cm4gKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMy5kZWZhdWx0KSh0aGlzLCAoT3ZlcmxheS5fX3Byb3RvX18gfHwgKDAsIF9nZXRQcm90b3R5cGVPZjIuZGVmYXVsdCkoT3ZlcmxheSkpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoT3ZlcmxheSwgW3tcbiAgICBrZXk6ICdzZXRPcGFjaXR5JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0T3BhY2l0eShvcGFjaXR5KSB7XG4gICAgICB0aGlzLnJlZnMub3ZlcmxheS5zdHlsZS5vcGFjaXR5ID0gb3BhY2l0eTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBhdXRvTG9ja1Njcm9sbGluZyA9IF9wcm9wcy5hdXRvTG9ja1Njcm9sbGluZyxcbiAgICAgICAgICBzaG93ID0gX3Byb3BzLnNob3csXG4gICAgICAgICAgc3R5bGUgPSBfcHJvcHMuc3R5bGUsXG4gICAgICAgICAgdHJhbnNpdGlvbkVuYWJsZWQgPSBfcHJvcHMudHJhbnNpdGlvbkVuYWJsZWQsXG4gICAgICAgICAgb3RoZXIgPSAoMCwgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMy5kZWZhdWx0KShfcHJvcHMsIFsnYXV0b0xvY2tTY3JvbGxpbmcnLCAnc2hvdycsICdzdHlsZScsICd0cmFuc2l0aW9uRW5hYmxlZCddKTtcbiAgICAgIHZhciBwcmVwYXJlU3R5bGVzID0gdGhpcy5jb250ZXh0Lm11aVRoZW1lLnByZXBhcmVTdHlsZXM7XG5cbiAgICAgIHZhciBzdHlsZXMgPSBnZXRTdHlsZXModGhpcy5wcm9wcywgdGhpcy5jb250ZXh0KTtcblxuICAgICAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgKDAsIF9leHRlbmRzMy5kZWZhdWx0KSh7fSwgb3RoZXIsIHsgcmVmOiAnb3ZlcmxheScsIHN0eWxlOiBwcmVwYXJlU3R5bGVzKCgwLCBfc2ltcGxlQXNzaWduMi5kZWZhdWx0KShzdHlsZXMucm9vdCwgc3R5bGUpKSB9KSxcbiAgICAgICAgYXV0b0xvY2tTY3JvbGxpbmcgJiYgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX0F1dG9Mb2NrU2Nyb2xsaW5nMi5kZWZhdWx0LCB7IGxvY2s6IHNob3cgfSlcbiAgICAgICk7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBPdmVybGF5O1xufShfcmVhY3QuQ29tcG9uZW50KTtcblxuT3ZlcmxheS5kZWZhdWx0UHJvcHMgPSB7XG4gIGF1dG9Mb2NrU2Nyb2xsaW5nOiB0cnVlLFxuICBzdHlsZToge30sXG4gIHRyYW5zaXRpb25FbmFibGVkOiB0cnVlXG59O1xuT3ZlcmxheS5jb250ZXh0VHlwZXMgPSB7XG4gIG11aVRoZW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkXG59O1xuT3ZlcmxheS5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIGF1dG9Mb2NrU2Nyb2xsaW5nOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wsXG4gIHNob3c6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbC5pc1JlcXVpcmVkLFxuICAvKipcbiAgICogT3ZlcnJpZGUgdGhlIGlubGluZS1zdHlsZXMgb2YgdGhlIHJvb3QgZWxlbWVudC5cbiAgICovXG4gIHN0eWxlOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdCxcbiAgdHJhbnNpdGlvbkVuYWJsZWQ6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbFxufSA6IHt9O1xuZXhwb3J0cy5kZWZhdWx0ID0gT3ZlcmxheTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vbWF0ZXJpYWwtdWkvaW50ZXJuYWwvT3ZlcmxheS5qc1xuLy8gbW9kdWxlIGlkID0gMzMxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9nZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZicpO1xuXG52YXIgX2dldFByb3RvdHlwZU9mMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldFByb3RvdHlwZU9mKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybicpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIpO1xuXG52YXIgX2luaGVyaXRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cycpO1xuXG52YXIgX2luaGVyaXRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2luaGVyaXRzMik7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9yZWFjdERvbSA9IHJlcXVpcmUoJ3JlYWN0LWRvbScpO1xuXG52YXIgX2RvbSA9IHJlcXVpcmUoJy4uL3V0aWxzL2RvbScpO1xuXG52YXIgX2RvbTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kb20pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vLyBoZWF2aWx5IGluc3BpcmVkIGJ5IGh0dHBzOi8vZ2l0aHViLmNvbS9LaGFuL3JlYWN0LWNvbXBvbmVudHMvYmxvYi9tYXN0ZXIvanMvbGF5ZXJlZC1jb21wb25lbnQtbWl4aW4uanN4XG52YXIgUmVuZGVyVG9MYXllciA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHMzLmRlZmF1bHQpKFJlbmRlclRvTGF5ZXIsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFJlbmRlclRvTGF5ZXIoKSB7XG4gICAgdmFyIF9yZWY7XG5cbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgUmVuZGVyVG9MYXllcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9ICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMuZGVmYXVsdCkodGhpcywgKF9yZWYgPSBSZW5kZXJUb0xheWVyLl9fcHJvdG9fXyB8fCAoMCwgX2dldFByb3RvdHlwZU9mMi5kZWZhdWx0KShSZW5kZXJUb0xheWVyKSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMub25DbGlja0F3YXkgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKCFfdGhpcy5wcm9wcy5jb21wb25lbnRDbGlja0F3YXkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoIV90aGlzLnByb3BzLm9wZW4pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgZWwgPSBfdGhpcy5sYXllcjtcbiAgICAgIGlmIChldmVudC50YXJnZXQgIT09IGVsICYmIGV2ZW50LnRhcmdldCA9PT0gd2luZG93IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jb250YWlucyhldmVudC50YXJnZXQpICYmICFfZG9tMi5kZWZhdWx0LmlzRGVzY2VuZGFudChlbCwgZXZlbnQudGFyZ2V0KSkge1xuICAgICAgICBfdGhpcy5wcm9wcy5jb21wb25lbnRDbGlja0F3YXkoZXZlbnQpO1xuICAgICAgfVxuICAgIH0sIF90ZW1wKSwgKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMy5kZWZhdWx0KShfdGhpcywgX3JldCk7XG4gIH1cblxuICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShSZW5kZXJUb0xheWVyLCBbe1xuICAgIGtleTogJ2NvbXBvbmVudERpZE1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB0aGlzLnJlbmRlckxheWVyKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50RGlkVXBkYXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkVXBkYXRlKCkge1xuICAgICAgdGhpcy5yZW5kZXJMYXllcigpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudFdpbGxVbm1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICB0aGlzLnVucmVuZGVyTGF5ZXIoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRMYXllcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldExheWVyKCkge1xuICAgICAgcmV0dXJuIHRoaXMubGF5ZXI7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAndW5yZW5kZXJMYXllcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVucmVuZGVyTGF5ZXIoKSB7XG4gICAgICBpZiAoIXRoaXMubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5wcm9wcy51c2VMYXllckZvckNsaWNrQXdheSkge1xuICAgICAgICB0aGlzLmxheWVyLnN0eWxlLnBvc2l0aW9uID0gJ3JlbGF0aXZlJztcbiAgICAgICAgdGhpcy5sYXllci5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5vbkNsaWNrQXdheSk7XG4gICAgICAgIHRoaXMubGF5ZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm9uQ2xpY2tBd2F5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5vbkNsaWNrQXdheSk7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMub25DbGlja0F3YXkpO1xuICAgICAgfVxuXG4gICAgICAoMCwgX3JlYWN0RG9tLnVubW91bnRDb21wb25lbnRBdE5vZGUpKHRoaXMubGF5ZXIpO1xuICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZCh0aGlzLmxheWVyKTtcbiAgICAgIHRoaXMubGF5ZXIgPSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEJ5IGNhbGxpbmcgdGhpcyBtZXRob2QgaW4gY29tcG9uZW50RGlkTW91bnQoKSBhbmRcbiAgICAgKiBjb21wb25lbnREaWRVcGRhdGUoKSwgeW91J3JlIGVmZmVjdGl2ZWx5IGNyZWF0aW5nIGEgXCJ3b3JtaG9sZVwiIHRoYXRcbiAgICAgKiBmdW5uZWxzIFJlYWN0J3MgaGllcmFyY2hpY2FsIHVwZGF0ZXMgdGhyb3VnaCB0byBhIERPTSBub2RlIG9uIGFuXG4gICAgICogZW50aXJlbHkgZGlmZmVyZW50IHBhcnQgb2YgdGhlIHBhZ2UuXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlckxheWVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyTGF5ZXIoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgb3BlbiA9IF9wcm9wcy5vcGVuLFxuICAgICAgICAgIHJlbmRlciA9IF9wcm9wcy5yZW5kZXI7XG5cblxuICAgICAgaWYgKG9wZW4pIHtcbiAgICAgICAgaWYgKCF0aGlzLmxheWVyKSB7XG4gICAgICAgICAgdGhpcy5sYXllciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5sYXllcik7XG5cbiAgICAgICAgICBpZiAodGhpcy5wcm9wcy51c2VMYXllckZvckNsaWNrQXdheSkge1xuICAgICAgICAgICAgdGhpcy5sYXllci5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgdGhpcy5vbkNsaWNrQXdheSk7XG4gICAgICAgICAgICB0aGlzLmxheWVyLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5vbkNsaWNrQXdheSk7XG4gICAgICAgICAgICB0aGlzLmxheWVyLnN0eWxlLnBvc2l0aW9uID0gJ2ZpeGVkJztcbiAgICAgICAgICAgIHRoaXMubGF5ZXIuc3R5bGUudG9wID0gMDtcbiAgICAgICAgICAgIHRoaXMubGF5ZXIuc3R5bGUuYm90dG9tID0gMDtcbiAgICAgICAgICAgIHRoaXMubGF5ZXIuc3R5bGUubGVmdCA9IDA7XG4gICAgICAgICAgICB0aGlzLmxheWVyLnN0eWxlLnJpZ2h0ID0gMDtcbiAgICAgICAgICAgIHRoaXMubGF5ZXIuc3R5bGUuekluZGV4ID0gdGhpcy5jb250ZXh0Lm11aVRoZW1lLnpJbmRleC5sYXllcjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgX3RoaXMyLm9uQ2xpY2tBd2F5KTtcbiAgICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgX3RoaXMyLm9uQ2xpY2tBd2F5KTtcbiAgICAgICAgICAgIH0sIDApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBsYXllckVsZW1lbnQgPSByZW5kZXIoKTtcbiAgICAgICAgdGhpcy5sYXllckVsZW1lbnQgPSAoMCwgX3JlYWN0RG9tLnVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyKSh0aGlzLCBsYXllckVsZW1lbnQsIHRoaXMubGF5ZXIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy51bnJlbmRlckxheWVyKCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBSZW5kZXJUb0xheWVyO1xufShfcmVhY3QuQ29tcG9uZW50KTtcblxuUmVuZGVyVG9MYXllci5kZWZhdWx0UHJvcHMgPSB7XG4gIHVzZUxheWVyRm9yQ2xpY2tBd2F5OiB0cnVlXG59O1xuUmVuZGVyVG9MYXllci5jb250ZXh0VHlwZXMgPSB7XG4gIG11aVRoZW1lOiBfcHJvcFR5cGVzMi5kZWZhdWx0Lm9iamVjdC5pc1JlcXVpcmVkXG59O1xuUmVuZGVyVG9MYXllci5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB7XG4gIGNvbXBvbmVudENsaWNrQXdheTogX3Byb3BUeXBlczIuZGVmYXVsdC5mdW5jLFxuICBvcGVuOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmJvb2wuaXNSZXF1aXJlZCxcbiAgcmVuZGVyOiBfcHJvcFR5cGVzMi5kZWZhdWx0LmZ1bmMuaXNSZXF1aXJlZCxcbiAgdXNlTGF5ZXJGb3JDbGlja0F3YXk6IF9wcm9wVHlwZXMyLmRlZmF1bHQuYm9vbFxufSA6IHt9O1xuZXhwb3J0cy5kZWZhdWx0ID0gUmVuZGVyVG9MYXllcjtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vbWF0ZXJpYWwtdWkvaW50ZXJuYWwvUmVuZGVyVG9MYXllci5qc1xuLy8gbW9kdWxlIGlkID0gMzMyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3B1cmUgPSByZXF1aXJlKCdyZWNvbXBvc2UvcHVyZScpO1xuXG52YXIgX3B1cmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHVyZSk7XG5cbnZhciBfU3ZnSWNvbiA9IHJlcXVpcmUoJy4uLy4uL1N2Z0ljb24nKTtcblxudmFyIF9TdmdJY29uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1N2Z0ljb24pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgQXZBbGJ1bSA9IGZ1bmN0aW9uIEF2QWxidW0ocHJvcHMpIHtcbiAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgIF9TdmdJY29uMi5kZWZhdWx0LFxuICAgIHByb3BzLFxuICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdwYXRoJywgeyBkOiAnTTEyIDJDNi40OCAyIDIgNi40OCAyIDEyczQuNDggMTAgMTAgMTAgMTAtNC40OCAxMC0xMFMxNy41MiAyIDEyIDJ6bTAgMTQuNWMtMi40OSAwLTQuNS0yLjAxLTQuNS00LjVTOS41MSA3LjUgMTIgNy41czQuNSAyLjAxIDQuNSA0LjUtMi4wMSA0LjUtNC41IDQuNXptMC01LjVjLS41NSAwLTEgLjQ1LTEgMXMuNDUgMSAxIDEgMS0uNDUgMS0xLS40NS0xLTEtMXonIH0pXG4gICk7XG59O1xuQXZBbGJ1bSA9ICgwLCBfcHVyZTIuZGVmYXVsdCkoQXZBbGJ1bSk7XG5BdkFsYnVtLmRpc3BsYXlOYW1lID0gJ0F2QWxidW0nO1xuQXZBbGJ1bS5tdWlOYW1lID0gJ1N2Z0ljb24nO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBBdkFsYnVtO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9tYXRlcmlhbC11aS9zdmctaWNvbnMvYXYvYWxidW0uanNcbi8vIG1vZHVsZSBpZCA9IDM0MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wdXJlID0gcmVxdWlyZSgncmVjb21wb3NlL3B1cmUnKTtcblxudmFyIF9wdXJlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3B1cmUpO1xuXG52YXIgX1N2Z0ljb24gPSByZXF1aXJlKCcuLi8uLi9TdmdJY29uJyk7XG5cbnZhciBfU3ZnSWNvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TdmdJY29uKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIEF2U2tpcE5leHQgPSBmdW5jdGlvbiBBdlNraXBOZXh0KHByb3BzKSB7XG4gIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICBfU3ZnSWNvbjIuZGVmYXVsdCxcbiAgICBwcm9wcyxcbiAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgncGF0aCcsIHsgZDogJ002IDE4bDguNS02TDYgNnYxMnpNMTYgNnYxMmgyVjZoLTJ6JyB9KVxuICApO1xufTtcbkF2U2tpcE5leHQgPSAoMCwgX3B1cmUyLmRlZmF1bHQpKEF2U2tpcE5leHQpO1xuQXZTa2lwTmV4dC5kaXNwbGF5TmFtZSA9ICdBdlNraXBOZXh0JztcbkF2U2tpcE5leHQubXVpTmFtZSA9ICdTdmdJY29uJztcblxuZXhwb3J0cy5kZWZhdWx0ID0gQXZTa2lwTmV4dDtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vbWF0ZXJpYWwtdWkvc3ZnLWljb25zL2F2L3NraXAtbmV4dC5qc1xuLy8gbW9kdWxlIGlkID0gMzQzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3B1cmUgPSByZXF1aXJlKCdyZWNvbXBvc2UvcHVyZScpO1xuXG52YXIgX3B1cmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHVyZSk7XG5cbnZhciBfU3ZnSWNvbiA9IHJlcXVpcmUoJy4uLy4uL1N2Z0ljb24nKTtcblxudmFyIF9TdmdJY29uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1N2Z0ljb24pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgQXZTa2lwUHJldmlvdXMgPSBmdW5jdGlvbiBBdlNraXBQcmV2aW91cyhwcm9wcykge1xuICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgX1N2Z0ljb24yLmRlZmF1bHQsXG4gICAgcHJvcHMsXG4gICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ3BhdGgnLCB7IGQ6ICdNNiA2aDJ2MTJINnptMy41IDZsOC41IDZWNnonIH0pXG4gICk7XG59O1xuQXZTa2lwUHJldmlvdXMgPSAoMCwgX3B1cmUyLmRlZmF1bHQpKEF2U2tpcFByZXZpb3VzKTtcbkF2U2tpcFByZXZpb3VzLmRpc3BsYXlOYW1lID0gJ0F2U2tpcFByZXZpb3VzJztcbkF2U2tpcFByZXZpb3VzLm11aU5hbWUgPSAnU3ZnSWNvbic7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IEF2U2tpcFByZXZpb3VzO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9tYXRlcmlhbC11aS9zdmctaWNvbnMvYXYvc2tpcC1wcmV2aW91cy5qc1xuLy8gbW9kdWxlIGlkID0gMzQ0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3B1cmUgPSByZXF1aXJlKCdyZWNvbXBvc2UvcHVyZScpO1xuXG52YXIgX3B1cmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHVyZSk7XG5cbnZhciBfU3ZnSWNvbiA9IHJlcXVpcmUoJy4uLy4uL1N2Z0ljb24nKTtcblxudmFyIF9TdmdJY29uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1N2Z0ljb24pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgTmF2aWdhdGlvbkNoZWNrID0gZnVuY3Rpb24gTmF2aWdhdGlvbkNoZWNrKHByb3BzKSB7XG4gIHJldHVybiBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcbiAgICBfU3ZnSWNvbjIuZGVmYXVsdCxcbiAgICBwcm9wcyxcbiAgICBfcmVhY3QyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgncGF0aCcsIHsgZDogJ005IDE2LjE3TDQuODMgMTJsLTEuNDIgMS40MUw5IDE5IDIxIDdsLTEuNDEtMS40MXonIH0pXG4gICk7XG59O1xuTmF2aWdhdGlvbkNoZWNrID0gKDAsIF9wdXJlMi5kZWZhdWx0KShOYXZpZ2F0aW9uQ2hlY2spO1xuTmF2aWdhdGlvbkNoZWNrLmRpc3BsYXlOYW1lID0gJ05hdmlnYXRpb25DaGVjayc7XG5OYXZpZ2F0aW9uQ2hlY2subXVpTmFtZSA9ICdTdmdJY29uJztcblxuZXhwb3J0cy5kZWZhdWx0ID0gTmF2aWdhdGlvbkNoZWNrO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9tYXRlcmlhbC11aS9zdmctaWNvbnMvbmF2aWdhdGlvbi9jaGVjay5qc1xuLy8gbW9kdWxlIGlkID0gMzQ3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3B1cmUgPSByZXF1aXJlKCdyZWNvbXBvc2UvcHVyZScpO1xuXG52YXIgX3B1cmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHVyZSk7XG5cbnZhciBfU3ZnSWNvbiA9IHJlcXVpcmUoJy4uLy4uL1N2Z0ljb24nKTtcblxudmFyIF9TdmdJY29uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1N2Z0ljb24pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgTmF2aWdhdGlvbkV4cGFuZExlc3MgPSBmdW5jdGlvbiBOYXZpZ2F0aW9uRXhwYW5kTGVzcyhwcm9wcykge1xuICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgX1N2Z0ljb24yLmRlZmF1bHQsXG4gICAgcHJvcHMsXG4gICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ3BhdGgnLCB7IGQ6ICdNMTIgOGwtNiA2IDEuNDEgMS40MUwxMiAxMC44M2w0LjU5IDQuNThMMTggMTR6JyB9KVxuICApO1xufTtcbk5hdmlnYXRpb25FeHBhbmRMZXNzID0gKDAsIF9wdXJlMi5kZWZhdWx0KShOYXZpZ2F0aW9uRXhwYW5kTGVzcyk7XG5OYXZpZ2F0aW9uRXhwYW5kTGVzcy5kaXNwbGF5TmFtZSA9ICdOYXZpZ2F0aW9uRXhwYW5kTGVzcyc7XG5OYXZpZ2F0aW9uRXhwYW5kTGVzcy5tdWlOYW1lID0gJ1N2Z0ljb24nO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBOYXZpZ2F0aW9uRXhwYW5kTGVzcztcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vbWF0ZXJpYWwtdWkvc3ZnLWljb25zL25hdmlnYXRpb24vZXhwYW5kLWxlc3MuanNcbi8vIG1vZHVsZSBpZCA9IDM0OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wdXJlID0gcmVxdWlyZSgncmVjb21wb3NlL3B1cmUnKTtcblxudmFyIF9wdXJlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3B1cmUpO1xuXG52YXIgX1N2Z0ljb24gPSByZXF1aXJlKCcuLi8uLi9TdmdJY29uJyk7XG5cbnZhciBfU3ZnSWNvbjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TdmdJY29uKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIE5hdmlnYXRpb25FeHBhbmRNb3JlID0gZnVuY3Rpb24gTmF2aWdhdGlvbkV4cGFuZE1vcmUocHJvcHMpIHtcbiAgcmV0dXJuIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFxuICAgIF9TdmdJY29uMi5kZWZhdWx0LFxuICAgIHByb3BzLFxuICAgIF9yZWFjdDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdwYXRoJywgeyBkOiAnTTE2LjU5IDguNTlMMTIgMTMuMTcgNy40MSA4LjU5IDYgMTBsNiA2IDYtNnonIH0pXG4gICk7XG59O1xuTmF2aWdhdGlvbkV4cGFuZE1vcmUgPSAoMCwgX3B1cmUyLmRlZmF1bHQpKE5hdmlnYXRpb25FeHBhbmRNb3JlKTtcbk5hdmlnYXRpb25FeHBhbmRNb3JlLmRpc3BsYXlOYW1lID0gJ05hdmlnYXRpb25FeHBhbmRNb3JlJztcbk5hdmlnYXRpb25FeHBhbmRNb3JlLm11aU5hbWUgPSAnU3ZnSWNvbic7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IE5hdmlnYXRpb25FeHBhbmRNb3JlO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9tYXRlcmlhbC11aS9zdmctaWNvbnMvbmF2aWdhdGlvbi9leHBhbmQtbW9yZS5qc1xuLy8gbW9kdWxlIGlkID0gMzQ5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3B1cmUgPSByZXF1aXJlKCdyZWNvbXBvc2UvcHVyZScpO1xuXG52YXIgX3B1cmUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHVyZSk7XG5cbnZhciBfU3ZnSWNvbiA9IHJlcXVpcmUoJy4uLy4uL1N2Z0ljb24nKTtcblxudmFyIF9TdmdJY29uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1N2Z0ljb24pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgTmF2aWdhdGlvbk1lbnUgPSBmdW5jdGlvbiBOYXZpZ2F0aW9uTWVudShwcm9wcykge1xuICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXG4gICAgX1N2Z0ljb24yLmRlZmF1bHQsXG4gICAgcHJvcHMsXG4gICAgX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ3BhdGgnLCB7IGQ6ICdNMyAxOGgxOHYtMkgzdjJ6bTAtNWgxOHYtMkgzdjJ6bTAtN3YyaDE4VjZIM3onIH0pXG4gICk7XG59O1xuTmF2aWdhdGlvbk1lbnUgPSAoMCwgX3B1cmUyLmRlZmF1bHQpKE5hdmlnYXRpb25NZW51KTtcbk5hdmlnYXRpb25NZW51LmRpc3BsYXlOYW1lID0gJ05hdmlnYXRpb25NZW51Jztcbk5hdmlnYXRpb25NZW51Lm11aU5hbWUgPSAnU3ZnSWNvbic7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IE5hdmlnYXRpb25NZW51O1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9tYXRlcmlhbC11aS9zdmctaWNvbnMvbmF2aWdhdGlvbi9tZW51LmpzXG4vLyBtb2R1bGUgaWQgPSAzNTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgbm9ybWFsaXplSGVhZGVyTmFtZSA9IHJlcXVpcmUoJy4vaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lJyk7XG5cbnZhciBERUZBVUxUX0NPTlRFTlRfVFlQRSA9IHtcbiAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnXG59O1xuXG5mdW5jdGlvbiBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgdmFsdWUpIHtcbiAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzKSAmJiB1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzWydDb250ZW50LVR5cGUnXSkpIHtcbiAgICBoZWFkZXJzWydDb250ZW50LVR5cGUnXSA9IHZhbHVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldERlZmF1bHRBZGFwdGVyKCkge1xuICB2YXIgYWRhcHRlcjtcbiAgaWYgKHR5cGVvZiBYTUxIdHRwUmVxdWVzdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBGb3IgYnJvd3NlcnMgdXNlIFhIUiBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4vYWRhcHRlcnMveGhyJyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gRm9yIG5vZGUgdXNlIEhUVFAgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL2h0dHAnKTtcbiAgfVxuICByZXR1cm4gYWRhcHRlcjtcbn1cblxudmFyIGRlZmF1bHRzID0ge1xuICBhZGFwdGVyOiBnZXREZWZhdWx0QWRhcHRlcigpLFxuXG4gIHRyYW5zZm9ybVJlcXVlc3Q6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXF1ZXN0KGRhdGEsIGhlYWRlcnMpIHtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdDb250ZW50LVR5cGUnKTtcbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNBcnJheUJ1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzU3RyZWFtKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0ZpbGUoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQmxvYihkYXRhKVxuICAgICkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyVmlldyhkYXRhKSkge1xuICAgICAgcmV0dXJuIGRhdGEuYnVmZmVyO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMoZGF0YSkpIHtcbiAgICAgIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9dXRmLTgnKTtcbiAgICAgIHJldHVybiBkYXRhLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc09iamVjdChkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTgnKTtcbiAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShkYXRhKTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIHRyYW5zZm9ybVJlc3BvbnNlOiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVzcG9uc2UoZGF0YSkge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgfSBjYXRjaCAoZSkgeyAvKiBJZ25vcmUgKi8gfVxuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgdGltZW91dDogMCxcblxuICB4c3JmQ29va2llTmFtZTogJ1hTUkYtVE9LRU4nLFxuICB4c3JmSGVhZGVyTmFtZTogJ1gtWFNSRi1UT0tFTicsXG5cbiAgbWF4Q29udGVudExlbmd0aDogLTEsXG5cbiAgdmFsaWRhdGVTdGF0dXM6IGZ1bmN0aW9uIHZhbGlkYXRlU3RhdHVzKHN0YXR1cykge1xuICAgIHJldHVybiBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMDtcbiAgfVxufTtcblxuZGVmYXVsdHMuaGVhZGVycyA9IHtcbiAgY29tbW9uOiB7XG4gICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyonXG4gIH1cbn07XG5cbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0ge307XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0gdXRpbHMubWVyZ2UoREVGQVVMVF9DT05URU5UX1RZUEUpO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmYXVsdHM7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYXhpb3MvbGliL2RlZmF1bHRzLmpzXG4vLyBtb2R1bGUgaWQgPSA3NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9